

================================================================
== Vivado HLS Report for 'axis_to_ddr_writer'
================================================================
* Date:           Fri Apr 15 11:42:37 2016

* Version:        2015.4 (Build 1412921 on Wed Nov 18 09:58:55 AM 2015)
* Project:        AXIS_TO_DDR_WRITER_AXILITE
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   8.00|      7.00|        1.00|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +------------------------------------+------+------+----------+-----------+-----------+------+----------+
        |                                    |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        |              Loop Name             |  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +------------------------------------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1                            |     ?|     ?|      4618|          -|          -|     ?|    no    |
        | + Loop 1.1                         |  4096|  4096|         1|          1|          1|  4096|    yes   |
        | + memcpy.base_ddr_addr.buffer.gep  |   513|   513|         3|          1|          1|   512|    yes   |
        +------------------------------------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 1
  * Pipeline-1: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 16
* Pipeline: 2
  Pipeline-0: II = 1, D = 1, States = { 7 }
  Pipeline-1: II = 1, D = 3, States = { 9 10 11 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / (tmp_1)
7 --> 
	8  / (exitcond_flatten)
	7  / (!exitcond_flatten)
8 --> 
	9  / true
9 --> 
	12  / (exitcond2)
	10  / (!exitcond2)
10 --> 
	11  / true
11 --> 
	9  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	6  / true
* FSM state operations: 

 <State 1>: 2.57ns
ST_1: stg_17 [1/1] 0.00ns
codeRepl:0  call void (...)* @_ssdm_op_SpecBitsMap(i8* %inputStream_V), !map !7

ST_1: stg_18 [1/1] 0.00ns
codeRepl:1  call void (...)* @_ssdm_op_SpecBitsMap(i64* %base_ddr_addr), !map !11

ST_1: stg_19 [1/1] 0.00ns
codeRepl:2  call void (...)* @_ssdm_op_SpecBitsMap(i8* %frame_index_V), !map !17

ST_1: stg_20 [1/1] 0.00ns
codeRepl:3  call void (...)* @_ssdm_op_SpecBitsMap(i32* %frame_count), !map !21

ST_1: stg_21 [1/1] 0.00ns
codeRepl:4  call void (...)* @_ssdm_op_SpecBitsMap(i32 %base_address), !map !25

ST_1: stg_22 [1/1] 0.00ns
codeRepl:5  call void (...)* @_ssdm_op_SpecBitsMap(i32 %frame_buffer_dim), !map !31

ST_1: stg_23 [1/1] 0.00ns
codeRepl:6  call void (...)* @_ssdm_op_SpecBitsMap(i32 %frame_buffer_offset), !map !35

ST_1: stg_24 [1/1] 0.00ns
codeRepl:7  call void (...)* @_ssdm_op_SpecBitsMap(i8 %frame_buffer_number), !map !39

ST_1: stg_25 [1/1] 0.00ns
codeRepl:8  call void (...)* @_ssdm_op_SpecBitsMap(i1 %update_intr), !map !43

ST_1: stg_26 [1/1] 0.00ns
codeRepl:9  call void (...)* @_ssdm_op_SpecTopModule([19 x i8]* @axis_to_ddr_writer_str) nounwind

ST_1: update_intr_read [1/1] 1.00ns
codeRepl:10  %update_intr_read = call i1 @_ssdm_op_Read.s_axilite.i1(i1 %update_intr)

ST_1: frame_buffer_number_read [1/1] 1.00ns
codeRepl:11  %frame_buffer_number_read = call i8 @_ssdm_op_Read.s_axilite.i8(i8 %frame_buffer_number)

ST_1: frame_buffer_offset_read [1/1] 1.00ns
codeRepl:12  %frame_buffer_offset_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %frame_buffer_offset)

ST_1: frame_buffer_dim_read [1/1] 1.00ns
codeRepl:13  %frame_buffer_dim_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %frame_buffer_dim)

ST_1: base_address_read [1/1] 1.00ns
codeRepl:14  %base_address_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %base_address)

ST_1: buffer [1/1] 0.00ns
codeRepl:15  %buffer = alloca [512 x i64], align 16

ST_1: stg_33 [1/1] 0.00ns
codeRepl:16  call void (...)* @_ssdm_op_SpecInterface(i32 %base_address, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_34 [1/1] 0.00ns
codeRepl:17  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_35 [1/1] 0.00ns
codeRepl:18  call void (...)* @_ssdm_op_SpecInterface(i1 %update_intr, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_36 [1/1] 0.00ns
codeRepl:19  call void (...)* @_ssdm_op_SpecInterface(i32 %frame_buffer_offset, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_37 [1/1] 0.00ns
codeRepl:20  call void (...)* @_ssdm_op_SpecInterface(i32 %frame_buffer_dim, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_38 [1/1] 0.00ns
codeRepl:21  call void (...)* @_ssdm_op_SpecInterface(i8 %frame_buffer_number, [10 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_39 [1/1] 0.00ns
codeRepl:22  call void (...)* @_ssdm_op_SpecInterface(i64* %base_ddr_addr, [6 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 32, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_40 [1/1] 0.00ns
codeRepl:23  call void (...)* @_ssdm_op_SpecInterface(i8* %inputStream_V, [5 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_41 [1/1] 0.00ns
codeRepl:24  call void (...)* @_ssdm_op_SpecInterface(i32* %frame_count, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_42 [1/1] 0.00ns
codeRepl:25  call void (...)* @_ssdm_op_SpecInterface(i8* %frame_index_V, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_1: stg_43 [1/1] 0.00ns
codeRepl:26  call void (...)* @_ssdm_op_SpecMemCore([512 x i64]* %buffer, [1 x i8]* @p_str1, [12 x i8]* @p_str5, [1 x i8]* @p_str1, i32 -1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_1: stg_44 [1/1] 0.00ns
codeRepl:27  call void (...)* @_ssdm_op_SpecReset(i8* @inner_index_V, i32 1, [1 x i8]* @p_str1) nounwind

ST_1: stg_45 [1/1] 0.00ns
codeRepl:28  call void (...)* @_ssdm_op_SpecReset(i32* @frame_count_inner, i32 1, [1 x i8]* @p_str1) nounwind

ST_1: t_V [1/1] 0.00ns
codeRepl:29  %t_V = load i8* @inner_index_V, align 1

ST_1: stg_47 [1/1] 0.00ns
codeRepl:30  call void @_ssdm_op_Write.ap_none.volatile.i8P(i8* %frame_index_V, i8 %t_V)

ST_1: stg_48 [1/1] 0.00ns
codeRepl:31  call void (...)* @_ssdm_op_SpecReset(i32* @FRAME_BUFFER_DIM_r, i32 0, [1 x i8]* @p_str1) nounwind

ST_1: FRAME_OFFSET_load [1/1] 0.00ns
codeRepl:32  %FRAME_OFFSET_load = load i32* @FRAME_OFFSET, align 4

ST_1: stg_50 [1/1] 0.00ns
codeRepl:33  call void (...)* @_ssdm_op_SpecReset(i32* @FRAME_OFFSET, i32 0, [1 x i8]* @p_str1) nounwind

ST_1: stg_51 [1/1] 0.00ns
codeRepl:34  call void (...)* @_ssdm_op_SpecReset(i8* @FRAME_BUFFER_NUMBER_r, i32 0, [1 x i8]* @p_str1) nounwind

ST_1: BASE_ADDRESS_load [1/1] 0.00ns
codeRepl:35  %BASE_ADDRESS_load = load i29* @BASE_ADDRESS_r, align 4

ST_1: stg_53 [1/1] 0.00ns
codeRepl:36  call void (...)* @_ssdm_op_SpecReset(i29* @BASE_ADDRESS_r, i32 0, [1 x i8]* @p_str1) nounwind

ST_1: stg_54 [1/1] 1.57ns
codeRepl:37  br i1 %update_intr_read, label %0, label %._crit_edge99

ST_1: stg_55 [1/1] 0.00ns
:0  store i32 %frame_buffer_dim_read, i32* @FRAME_BUFFER_DIM_r, align 4

ST_1: stg_56 [1/1] 0.00ns
:1  store i8 %frame_buffer_number_read, i8* @FRAME_BUFFER_NUMBER_r, align 1

ST_1: stg_57 [1/1] 0.00ns
:2  store i32 %frame_buffer_offset_read, i32* @FRAME_OFFSET, align 4

ST_1: tmp_3_cast4 [1/1] 0.00ns
:3  %tmp_3_cast4 = call i29 @_ssdm_op_PartSelect.i29.i32.i32.i32(i32 %base_address_read, i32 3, i32 31)

ST_1: stg_59 [1/1] 0.00ns
:4  store i29 %tmp_3_cast4, i29* @BASE_ADDRESS_r, align 4

ST_1: stg_60 [1/1] 1.57ns
:5  br label %._crit_edge99


 <State 2>: 6.08ns
ST_2: i_op_assign [1/1] 0.00ns
._crit_edge99:0  %i_op_assign = phi i32 [ %frame_buffer_offset_read, %0 ], [ %FRAME_OFFSET_load, %codeRepl ]

ST_2: i_op_assign_1 [1/1] 0.00ns
._crit_edge99:1  %i_op_assign_1 = phi i29 [ %tmp_3_cast4, %0 ], [ %BASE_ADDRESS_load, %codeRepl ]

ST_2: lhs_V [1/1] 0.00ns
._crit_edge99:3  %lhs_V = zext i8 %t_V to i40

ST_2: rhs_V [1/1] 0.00ns
._crit_edge99:4  %rhs_V = zext i32 %i_op_assign to i40

ST_2: r_V [3/3] 6.08ns
._crit_edge99:5  %r_V = mul i40 %rhs_V, %lhs_V


 <State 3>: 6.08ns
ST_3: r_V [2/3] 6.08ns
._crit_edge99:5  %r_V = mul i40 %rhs_V, %lhs_V


 <State 4>: 6.08ns
ST_4: r_V [1/3] 6.08ns
._crit_edge99:5  %r_V = mul i40 %rhs_V, %lhs_V

ST_4: tmp_8 [1/1] 0.00ns
._crit_edge99:6  %tmp_8 = call i32 @_ssdm_op_PartSelect.i32.i40.i32.i32(i40 %r_V, i32 3, i32 34)


 <State 5>: 4.01ns
ST_5: i_op_assign_1_cast [1/1] 0.00ns
._crit_edge99:2  %i_op_assign_1_cast = zext i29 %i_op_assign_1 to i32

ST_5: offset [1/1] 2.44ns
._crit_edge99:7  %offset = add i32 %tmp_8, %i_op_assign_1_cast

ST_5: stg_71 [1/1] 1.57ns
._crit_edge99:8  br label %1


 <State 6>: 5.12ns
ST_6: offset1 [1/1] 0.00ns
:0  %offset1 = phi i32 [ %offset, %._crit_edge99 ], [ %offset_1, %burst.wr.end ]

ST_6: idx [1/1] 0.00ns
:1  %idx = phi i32 [ 0, %._crit_edge99 ], [ %idx_1, %burst.wr.end ]

ST_6: FRAME_BUFFER_DIM_load [1/1] 0.00ns
:2  %FRAME_BUFFER_DIM_load = load i32* @FRAME_BUFFER_DIM_r, align 4

ST_6: tmp_s [1/1] 0.00ns
:3  %tmp_s = call i20 @_ssdm_op_PartSelect.i20.i32.i32.i32(i32 %FRAME_BUFFER_DIM_load, i32 12, i32 31)

ST_6: tmp_3 [1/1] 0.00ns
:4  %tmp_3 = zext i20 %tmp_s to i32

ST_6: tmp_1 [1/1] 2.52ns
:5  %tmp_1 = icmp ult i32 %idx, %tmp_3

ST_6: idx_1 [1/1] 2.44ns
:6  %idx_1 = add nsw i32 %idx, 1

ST_6: stg_79 [1/1] 1.57ns
:7  br i1 %tmp_1, label %.preheader, label %._crit_edge100

ST_6: FRAME_BUFFER_NUMBER_load [1/1] 0.00ns
._crit_edge100:0  %FRAME_BUFFER_NUMBER_load = load i8* @FRAME_BUFFER_NUMBER_r, align 1

ST_6: tmp_2_cast [1/1] 0.00ns
._crit_edge100:1  %tmp_2_cast = zext i8 %FRAME_BUFFER_NUMBER_load to i9

ST_6: op2_assign [1/1] 1.72ns
._crit_edge100:2  %op2_assign = add i9 %tmp_2_cast, -1

ST_6: tmp_4_cast [1/1] 0.00ns
._crit_edge100:3  %tmp_4_cast = zext i8 %t_V to i9

ST_6: tmp_5 [1/1] 2.03ns
._crit_edge100:4  %tmp_5 = icmp eq i9 %tmp_4_cast, %op2_assign

ST_6: tmp_6 [1/1] 1.72ns
._crit_edge100:5  %tmp_6 = add i8 %t_V, 1

ST_6: p_tmp_6 [1/1] 1.37ns
._crit_edge100:6  %p_tmp_6 = select i1 %tmp_5, i8 0, i8 %tmp_6

ST_6: stg_87 [1/1] 0.00ns
._crit_edge100:7  store i8 %p_tmp_6, i8* @inner_index_V, align 1

ST_6: frame_count_inner_load [1/1] 0.00ns
._crit_edge100:8  %frame_count_inner_load = load i32* @frame_count_inner, align 4

ST_6: tmp_7 [1/1] 2.44ns
._crit_edge100:9  %tmp_7 = add nsw i32 %frame_count_inner_load, 1

ST_6: stg_90 [1/1] 0.00ns
._crit_edge100:10  store i32 %tmp_7, i32* @frame_count_inner, align 4

ST_6: stg_91 [1/1] 0.00ns
._crit_edge100:11  call void @_ssdm_op_Write.ap_none.i32P(i32* %frame_count, i32 %tmp_7)

ST_6: stg_92 [1/1] 0.00ns
._crit_edge100:12  ret void


 <State 7>: 5.96ns
ST_7: indvar_flatten [1/1] 0.00ns
.preheader:0  %indvar_flatten = phi i13 [ %indvar_flatten_next, %ifFalse ], [ 0, %1 ]

ST_7: j [1/1] 0.00ns
.preheader:1  %j = phi i10 [ %j_mid2, %ifFalse ], [ 0, %1 ]

ST_7: temp [1/1] 0.00ns
.preheader:2  %temp = phi i64 [ %temp_2, %ifFalse ], [ 0, %1 ]

ST_7: i [1/1] 0.00ns
.preheader:3  %i = phi i4 [ %i_1, %ifFalse ], [ 0, %1 ]

ST_7: exitcond_flatten [1/1] 2.18ns
.preheader:4  %exitcond_flatten = icmp eq i13 %indvar_flatten, -4096

ST_7: indvar_flatten_next [1/1] 1.96ns
.preheader:5  %indvar_flatten_next = add i13 %indvar_flatten, 1

ST_7: stg_99 [1/1] 0.00ns
.preheader:6  br i1 %exitcond_flatten, label %burst.wr.header.preheader, label %.preheader96

ST_7: empty [1/1] 0.00ns
.preheader96:0  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4096, i64 4096, i64 4096)

ST_7: j_s [1/1] 1.84ns
.preheader96:1  %j_s = add i10 %j, 1

ST_7: exitcond5 [1/1] 1.88ns
.preheader96:2  %exitcond5 = icmp eq i4 %i, -8

ST_7: j_mid2 [1/1] 1.37ns
.preheader96:3  %j_mid2 = select i1 %exitcond5, i10 %j_s, i10 %j

ST_7: tmp_2 [1/1] 0.00ns
.preheader96:4  %tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str6)

ST_7: stg_105 [1/1] 0.00ns
.preheader96:5  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_7: tmp_10 [1/1] 0.00ns
.preheader96:6  %tmp_10 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %inputStream_V)

ST_7: tmp_11 [1/1] 0.00ns
.preheader96:7  %tmp_11 = call i56 @_ssdm_op_PartSelect.i56.i64.i32.i32(i64 %temp, i32 8, i32 63)

ST_7: temp_1 [1/1] 1.37ns
.preheader96:8  %temp_1 = select i1 %exitcond5, i56 0, i56 %tmp_11

ST_7: temp_2 [1/1] 0.00ns
.preheader96:9  %temp_2 = call i64 @_ssdm_op_BitConcatenate.i64.i8.i56(i8 %tmp_10, i56 %temp_1)

ST_7: empty_9 [1/1] 0.00ns
.preheader96:10  %empty_9 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str6, i32 %tmp_2)

ST_7: i_op [1/1] 0.80ns
.preheader96:11  %i_op = add i4 %i, 1

ST_7: i_1 [1/1] 1.37ns
.preheader96:12  %i_1 = select i1 %exitcond5, i4 1, i4 %i_op

ST_7: ifzero [1/1] 1.88ns
.preheader96:13  %ifzero = icmp eq i4 %i_1, -8

ST_7: stg_114 [1/1] 0.00ns
.preheader96:14  br i1 %ifzero, label %ifTrue, label %ifFalse

ST_7: tmp_4 [1/1] 0.00ns
ifTrue:0  %tmp_4 = zext i10 %j_mid2 to i64

ST_7: buffer_addr_1 [1/1] 0.00ns
ifTrue:1  %buffer_addr_1 = getelementptr inbounds [512 x i64]* %buffer, i64 0, i64 %tmp_4

ST_7: stg_117 [1/1] 2.71ns
ifTrue:2  store i64 %temp_2, i64* %buffer_addr_1, align 8

ST_7: stg_118 [1/1] 0.00ns
ifTrue:3  br label %ifFalse

ST_7: stg_119 [1/1] 0.00ns
ifFalse:0  br label %.preheader


 <State 8>: 7.00ns
ST_8: tmp [1/1] 0.00ns
burst.wr.header.preheader:0  %tmp = sext i32 %offset1 to i64

ST_8: base_ddr_addr_addr [1/1] 0.00ns
burst.wr.header.preheader:1  %base_ddr_addr_addr = getelementptr i64* %base_ddr_addr, i64 %tmp

ST_8: p_wr_req [1/1] 7.00ns
burst.wr.header.preheader:2  %p_wr_req = call i1 @_ssdm_op_WriteReq.m_axi.i64P(i64* %base_ddr_addr_addr, i32 512)

ST_8: stg_123 [1/1] 1.57ns
burst.wr.header.preheader:3  br label %burst.wr.header


 <State 9>: 3.44ns
ST_9: indvar [1/1] 0.00ns
burst.wr.header:0  %indvar = phi i10 [ %indvar_next, %burst.wr.body ], [ 0, %burst.wr.header.preheader ]

ST_9: exitcond2 [1/1] 2.07ns
burst.wr.header:1  %exitcond2 = icmp eq i10 %indvar, -512

ST_9: empty_10 [1/1] 0.00ns
burst.wr.header:2  %empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 512, i64 512, i64 512)

ST_9: indvar_next [1/1] 1.84ns
burst.wr.header:3  %indvar_next = add i10 %indvar, 1

ST_9: stg_128 [1/1] 0.00ns
burst.wr.header:4  br i1 %exitcond2, label %burst.wr.end, label %burst.wr.body

ST_9: tmp_9 [1/1] 0.00ns
burst.wr.body:3  %tmp_9 = zext i10 %indvar to i64

ST_9: buffer_addr [1/1] 0.00ns
burst.wr.body:4  %buffer_addr = getelementptr [512 x i64]* %buffer, i64 0, i64 %tmp_9

ST_9: buffer_load [2/2] 2.71ns
burst.wr.body:5  %buffer_load = load i64* %buffer_addr, align 8


 <State 10>: 2.71ns
ST_10: buffer_load [1/2] 2.71ns
burst.wr.body:5  %buffer_load = load i64* %buffer_addr, align 8


 <State 11>: 7.00ns
ST_11: burstwrite_rbegin [1/1] 0.00ns
burst.wr.body:0  %burstwrite_rbegin = call i32 (...)* @_ssdm_op_SpecRegionBegin([18 x i8]* @burstwrite_OC_region_str) nounwind

ST_11: stg_134 [1/1] 0.00ns
burst.wr.body:1  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str7)

ST_11: empty_11 [1/1] 0.00ns
burst.wr.body:2  %empty_11 = call i32 (...)* @_ssdm_op_SpecLoopName([32 x i8]* @memcpy_OC_base_ddr_addr_OC_buf) nounwind

ST_11: stg_136 [1/1] 7.00ns
burst.wr.body:6  call void @_ssdm_op_Write.m_axi.i64P(i64* %base_ddr_addr_addr, i64 %buffer_load, i8 -1)

ST_11: burstwrite_rend [1/1] 0.00ns
burst.wr.body:7  %burstwrite_rend = call i32 (...)* @_ssdm_op_SpecRegionEnd([18 x i8]* @burstwrite_OC_region_str, i32 %burstwrite_rbegin) nounwind

ST_11: stg_138 [1/1] 0.00ns
burst.wr.body:8  br label %burst.wr.header


 <State 12>: 7.00ns
ST_12: p_wr_resp [5/5] 7.00ns
burst.wr.end:0  %p_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)

ST_12: offset_1 [1/1] 2.44ns
burst.wr.end:1  %offset_1 = add i32 %offset1, 512


 <State 13>: 7.00ns
ST_13: p_wr_resp [4/5] 7.00ns
burst.wr.end:0  %p_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)


 <State 14>: 7.00ns
ST_14: p_wr_resp [3/5] 7.00ns
burst.wr.end:0  %p_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)


 <State 15>: 7.00ns
ST_15: p_wr_resp [2/5] 7.00ns
burst.wr.end:0  %p_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)


 <State 16>: 7.00ns
ST_16: p_wr_resp [1/5] 7.00ns
burst.wr.end:0  %p_wr_resp = call i1 @_ssdm_op_WriteResp.m_axi.i64P(i64* %base_ddr_addr_addr)

ST_16: stg_145 [1/1] 0.00ns
burst.wr.end:2  br label %1



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
