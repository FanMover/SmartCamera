// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pattern_generator_cross.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pattern_generator_cross::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pattern_generator_cross::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> pattern_generator_cross::ap_ST_fsm_state1 = "1";
const sc_lv<6> pattern_generator_cross::ap_ST_fsm_state2 = "10";
const sc_lv<6> pattern_generator_cross::ap_ST_fsm_state3 = "100";
const sc_lv<6> pattern_generator_cross::ap_ST_fsm_state4 = "1000";
const sc_lv<6> pattern_generator_cross::ap_ST_fsm_state5 = "10000";
const sc_lv<6> pattern_generator_cross::ap_ST_fsm_state6 = "100000";
const bool pattern_generator_cross::ap_const_boolean_1 = true;
const sc_lv<1> pattern_generator_cross::ap_const_lv1_0 = "0";
const sc_lv<1> pattern_generator_cross::ap_const_lv1_1 = "1";
const sc_lv<2> pattern_generator_cross::ap_const_lv2_0 = "00";
const sc_lv<2> pattern_generator_cross::ap_const_lv2_2 = "10";
const sc_lv<2> pattern_generator_cross::ap_const_lv2_3 = "11";
const sc_lv<2> pattern_generator_cross::ap_const_lv2_1 = "1";
const sc_lv<32> pattern_generator_cross::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> pattern_generator_cross::ap_const_lv32_2 = "10";
const sc_lv<32> pattern_generator_cross::ap_const_lv32_3 = "11";
const sc_lv<32> pattern_generator_cross::ap_const_lv32_1 = "1";
const bool pattern_generator_cross::ap_const_boolean_0 = false;
const sc_lv<9> pattern_generator_cross::ap_const_lv9_0 = "000000000";
const sc_lv<10> pattern_generator_cross::ap_const_lv10_0 = "0000000000";
const sc_lv<32> pattern_generator_cross::ap_const_lv32_4 = "100";
const sc_lv<32> pattern_generator_cross::ap_const_lv32_5 = "101";
const sc_lv<8> pattern_generator_cross::ap_const_lv8_3E = "111110";
const sc_lv<8> pattern_generator_cross::ap_const_lv8_C1 = "11000001";
const sc_lv<9> pattern_generator_cross::ap_const_lv9_1FE = "111111110";
const sc_lv<9> pattern_generator_cross::ap_const_lv9_1 = "1";
const sc_lv<9> pattern_generator_cross::ap_const_lv9_1E0 = "111100000";
const sc_lv<32> pattern_generator_cross::ap_const_lv32_27F = "1001111111";
const sc_lv<10> pattern_generator_cross::ap_const_lv10_2D0 = "1011010000";
const sc_lv<10> pattern_generator_cross::ap_const_lv10_1 = "1";
const sc_lv<10> pattern_generator_cross::ap_const_lv10_280 = "1010000000";
const sc_lv<32> pattern_generator_cross::ap_const_lv32_1DF = "111011111";
const sc_lv<32> pattern_generator_cross::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";

pattern_generator_cross::pattern_generator_cross(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( outputStream_V_1_ack_in );
    sensitive << ( ap_predicate_op48_write_state3 );
    sensitive << ( ap_predicate_op49_write_state3 );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( outputStream_V_1_ack_in );
    sensitive << ( ap_predicate_op51_write_state4 );
    sensitive << ( ap_predicate_op53_write_state4 );

    SC_METHOD(thread_ap_predicate_op48_write_state3);
    sensitive << ( exitcond_fu_184_p2 );
    sensitive << ( or_cond_fu_202_p2 );
    sensitive << ( or_cond7_fu_212_p2 );

    SC_METHOD(thread_ap_predicate_op49_write_state3);
    sensitive << ( exitcond_fu_184_p2 );
    sensitive << ( or_cond_fu_202_p2 );
    sensitive << ( or_cond7_fu_212_p2 );

    SC_METHOD(thread_ap_predicate_op51_write_state4);
    sensitive << ( or_cond_reg_335 );
    sensitive << ( or_cond7_reg_339 );

    SC_METHOD(thread_ap_predicate_op53_write_state4);
    sensitive << ( or_cond_reg_335 );
    sensitive << ( or_cond7_reg_339 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond5_fu_135_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( y_reg_79 );

    SC_METHOD(thread_exitcond_fu_184_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( x_reg_90 );

    SC_METHOD(thread_or_cond7_fu_212_p2);
    sensitive << ( tmp_8_reg_316 );
    sensitive << ( tmp_7_fu_207_p2 );

    SC_METHOD(thread_or_cond_fu_202_p2);
    sensitive << ( tmp_1_reg_311 );
    sensitive << ( tmp_4_fu_196_p2 );

    SC_METHOD(thread_outputStream_V_1_ack_in);
    sensitive << ( outputStream_V_1_state );

    SC_METHOD(thread_outputStream_V_1_ack_out);
    sensitive << ( outputStream_V_TREADY );

    SC_METHOD(thread_outputStream_V_1_data_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_predicate_op48_write_state3 );
    sensitive << ( ap_predicate_op49_write_state3 );

    SC_METHOD(thread_outputStream_V_1_data_out);
    sensitive << ( outputStream_V_1_payload_A );
    sensitive << ( outputStream_V_1_payload_B );
    sensitive << ( outputStream_V_1_sel );

    SC_METHOD(thread_outputStream_V_1_load_A);
    sensitive << ( outputStream_V_1_sel_wr );
    sensitive << ( outputStream_V_1_state_cmp_full );

    SC_METHOD(thread_outputStream_V_1_load_B);
    sensitive << ( outputStream_V_1_sel_wr );
    sensitive << ( outputStream_V_1_state_cmp_full );

    SC_METHOD(thread_outputStream_V_1_sel);
    sensitive << ( outputStream_V_1_sel_rd );

    SC_METHOD(thread_outputStream_V_1_state_cmp_full);
    sensitive << ( outputStream_V_1_state );

    SC_METHOD(thread_outputStream_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_predicate_op48_write_state3 );
    sensitive << ( ap_predicate_op49_write_state3 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_outputStream_V_1_vld_out);
    sensitive << ( outputStream_V_1_state );

    SC_METHOD(thread_outputStream_V_TDATA);
    sensitive << ( outputStream_V_1_data_out );

    SC_METHOD(thread_outputStream_V_TDATA_blk_n);
    sensitive << ( outputStream_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_184_p2 );
    sensitive << ( or_cond_fu_202_p2 );
    sensitive << ( or_cond7_fu_212_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( or_cond_reg_335 );
    sensitive << ( or_cond7_reg_339 );

    SC_METHOD(thread_outputStream_V_TVALID);
    sensitive << ( outputStream_V_1_state );

    SC_METHOD(thread_storemerge4_fu_275_p2);
    sensitive << ( tmp_s_reg_112 );
    sensitive << ( storemerge4_v_cast_c_fu_267_p3 );

    SC_METHOD(thread_storemerge4_v_cast_c_fu_267_p3);
    sensitive << ( dirY );

    SC_METHOD(thread_storemerge_fu_251_p2);
    sensitive << ( tmp_5_reg_101 );
    sensitive << ( storemerge_v_cast_ca_fu_243_p3 );

    SC_METHOD(thread_storemerge_v_cast_ca_fu_243_p3);
    sensitive << ( dirX );

    SC_METHOD(thread_tmp_1_fu_147_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_135_p2 );
    sensitive << ( y_reg_79 );

    SC_METHOD(thread_tmp_2_fu_163_p2);
    sensitive << ( lineX_load_reg_287 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_135_p2 );
    sensitive << ( tmp_fu_158_p2 );

    SC_METHOD(thread_tmp_4_fu_196_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_184_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( x_reg_90 );

    SC_METHOD(thread_tmp_6_fu_217_p2);
    sensitive << ( lineY_load_reg_295 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_7_fu_207_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_184_p2 );
    sensitive << ( or_cond_fu_202_p2 );
    sensitive << ( lineX_load_reg_287 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( x_cast1_fu_180_p1 );

    SC_METHOD(thread_tmp_8_fu_153_p2);
    sensitive << ( lineY_load_reg_295 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_135_p2 );
    sensitive << ( y_cast2_fu_131_p1 );

    SC_METHOD(thread_tmp_9_fu_222_p2);
    sensitive << ( lineY_load_reg_295 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_6_fu_217_p2 );

    SC_METHOD(thread_tmp_fu_158_p2);
    sensitive << ( lineX_load_reg_287 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_135_p2 );

    SC_METHOD(thread_x_1_fu_190_p2);
    sensitive << ( x_reg_90 );

    SC_METHOD(thread_x_cast1_fu_180_p1);
    sensitive << ( x_reg_90 );

    SC_METHOD(thread_y_1_fu_141_p2);
    sensitive << ( y_reg_79 );

    SC_METHOD(thread_y_cast2_fu_131_p1);
    sensitive << ( y_reg_79 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( outputStream_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_184_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond5_fu_135_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_CS_fsm_state6 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    outputStream_V_1_sel_rd = SC_LOGIC_0;
    outputStream_V_1_sel_wr = SC_LOGIC_0;
    outputStream_V_1_state = "00";
    lineX = "00000000000000000000000000000000";
    lineY = "00000000000000000000000000000000";
    dirX = "0";
    dirY = "0";
    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pattern_generator_cross_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, outputStream_V_TDATA, "(port)outputStream_V_TDATA");
    sc_trace(mVcdFile, outputStream_V_TVALID, "(port)outputStream_V_TVALID");
    sc_trace(mVcdFile, outputStream_V_TREADY, "(port)outputStream_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, outputStream_V_1_data_in, "outputStream_V_1_data_in");
    sc_trace(mVcdFile, outputStream_V_1_data_out, "outputStream_V_1_data_out");
    sc_trace(mVcdFile, outputStream_V_1_vld_in, "outputStream_V_1_vld_in");
    sc_trace(mVcdFile, outputStream_V_1_vld_out, "outputStream_V_1_vld_out");
    sc_trace(mVcdFile, outputStream_V_1_ack_in, "outputStream_V_1_ack_in");
    sc_trace(mVcdFile, outputStream_V_1_ack_out, "outputStream_V_1_ack_out");
    sc_trace(mVcdFile, outputStream_V_1_payload_A, "outputStream_V_1_payload_A");
    sc_trace(mVcdFile, outputStream_V_1_payload_B, "outputStream_V_1_payload_B");
    sc_trace(mVcdFile, outputStream_V_1_sel_rd, "outputStream_V_1_sel_rd");
    sc_trace(mVcdFile, outputStream_V_1_sel_wr, "outputStream_V_1_sel_wr");
    sc_trace(mVcdFile, outputStream_V_1_sel, "outputStream_V_1_sel");
    sc_trace(mVcdFile, outputStream_V_1_load_A, "outputStream_V_1_load_A");
    sc_trace(mVcdFile, outputStream_V_1_load_B, "outputStream_V_1_load_B");
    sc_trace(mVcdFile, outputStream_V_1_state, "outputStream_V_1_state");
    sc_trace(mVcdFile, outputStream_V_1_state_cmp_full, "outputStream_V_1_state_cmp_full");
    sc_trace(mVcdFile, lineX, "lineX");
    sc_trace(mVcdFile, lineY, "lineY");
    sc_trace(mVcdFile, dirX, "dirX");
    sc_trace(mVcdFile, dirY, "dirY");
    sc_trace(mVcdFile, outputStream_V_TDATA_blk_n, "outputStream_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_184_p2, "exitcond_fu_184_p2");
    sc_trace(mVcdFile, or_cond_fu_202_p2, "or_cond_fu_202_p2");
    sc_trace(mVcdFile, or_cond7_fu_212_p2, "or_cond7_fu_212_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, or_cond_reg_335, "or_cond_reg_335");
    sc_trace(mVcdFile, or_cond7_reg_339, "or_cond7_reg_339");
    sc_trace(mVcdFile, lineX_load_reg_287, "lineX_load_reg_287");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, lineY_load_reg_295, "lineY_load_reg_295");
    sc_trace(mVcdFile, y_1_fu_141_p2, "y_1_fu_141_p2");
    sc_trace(mVcdFile, y_1_reg_306, "y_1_reg_306");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_fu_147_p2, "tmp_1_fu_147_p2");
    sc_trace(mVcdFile, tmp_1_reg_311, "tmp_1_reg_311");
    sc_trace(mVcdFile, exitcond5_fu_135_p2, "exitcond5_fu_135_p2");
    sc_trace(mVcdFile, tmp_8_fu_153_p2, "tmp_8_fu_153_p2");
    sc_trace(mVcdFile, tmp_8_reg_316, "tmp_8_reg_316");
    sc_trace(mVcdFile, x_1_fu_190_p2, "x_1_fu_190_p2");
    sc_trace(mVcdFile, x_1_reg_330, "x_1_reg_330");
    sc_trace(mVcdFile, ap_predicate_op48_write_state3, "ap_predicate_op48_write_state3");
    sc_trace(mVcdFile, ap_predicate_op49_write_state3, "ap_predicate_op49_write_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, y_reg_79, "y_reg_79");
    sc_trace(mVcdFile, x_reg_90, "x_reg_90");
    sc_trace(mVcdFile, ap_predicate_op51_write_state4, "ap_predicate_op51_write_state4");
    sc_trace(mVcdFile, ap_predicate_op53_write_state4, "ap_predicate_op53_write_state4");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, tmp_5_reg_101, "tmp_5_reg_101");
    sc_trace(mVcdFile, tmp_fu_158_p2, "tmp_fu_158_p2");
    sc_trace(mVcdFile, tmp_s_reg_112, "tmp_s_reg_112");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_6_fu_217_p2, "tmp_6_fu_217_p2");
    sc_trace(mVcdFile, storemerge_fu_251_p2, "storemerge_fu_251_p2");
    sc_trace(mVcdFile, storemerge4_fu_275_p2, "storemerge4_fu_275_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_2_fu_163_p2, "tmp_2_fu_163_p2");
    sc_trace(mVcdFile, tmp_9_fu_222_p2, "tmp_9_fu_222_p2");
    sc_trace(mVcdFile, y_cast2_fu_131_p1, "y_cast2_fu_131_p1");
    sc_trace(mVcdFile, tmp_4_fu_196_p2, "tmp_4_fu_196_p2");
    sc_trace(mVcdFile, x_cast1_fu_180_p1, "x_cast1_fu_180_p1");
    sc_trace(mVcdFile, tmp_7_fu_207_p2, "tmp_7_fu_207_p2");
    sc_trace(mVcdFile, storemerge_v_cast_ca_fu_243_p3, "storemerge_v_cast_ca_fu_243_p3");
    sc_trace(mVcdFile, storemerge4_v_cast_c_fu_267_p3, "storemerge4_v_cast_c_fu_267_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("pattern_generator_cross.hdltvin.dat");
    mHdltvoutHandle.open("pattern_generator_cross.hdltvout.dat");
}

pattern_generator_cross::~pattern_generator_cross() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void pattern_generator_cross::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dirX = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond5_fu_135_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_158_p2.read())) {
                dirX = ap_const_lv1_0;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_158_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_fu_163_p2.read()))) {
                dirX = ap_const_lv1_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dirY = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_217_p2.read())) {
                dirY = ap_const_lv1_0;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_217_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_fu_222_p2.read()))) {
                dirY = ap_const_lv1_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        lineX = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            lineX = storemerge_fu_251_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        lineY = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(outputStream_V_1_ack_in.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
            lineY = storemerge4_fu_275_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_vld_out.read()))) {
            outputStream_V_1_sel_rd =  (sc_logic) (~outputStream_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_ack_in.read()))) {
            outputStream_V_1_sel_wr =  (sc_logic) (~outputStream_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outputStream_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(outputStream_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(outputStream_V_1_state.read(), ap_const_lv2_2)))) {
            outputStream_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outputStream_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outputStream_V_1_state.read(), ap_const_lv2_1)))) {
            outputStream_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(outputStream_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outputStream_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(outputStream_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_ack_out.read()))))) {
            outputStream_V_1_state = ap_const_lv2_3;
        } else {
            outputStream_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond5_fu_135_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_158_p2.read())) {
            tmp_5_reg_101 = ap_const_lv32_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_158_p2.read())) {
            tmp_5_reg_101 = lineX_load_reg_287.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_6_fu_217_p2.read())) {
            tmp_s_reg_112 = ap_const_lv32_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_217_p2.read())) {
            tmp_s_reg_112 = lineY_load_reg_295.read();
        }
    }
    if ((esl_seteq<1,1,1>(exitcond5_fu_135_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        x_reg_90 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()))) {
        x_reg_90 = x_1_reg_330.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_184_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        y_reg_79 = y_1_reg_306.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        y_reg_79 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        lineX_load_reg_287 = lineX.read();
        lineY_load_reg_295 = lineY.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_184_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_202_p2.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        or_cond7_reg_339 = or_cond7_fu_212_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_184_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        or_cond_reg_335 = or_cond_fu_202_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_load_A.read())) {
        outputStream_V_1_payload_A = outputStream_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_load_B.read())) {
        outputStream_V_1_payload_B = outputStream_V_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(exitcond5_fu_135_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_1_reg_311 = tmp_1_fu_147_p2.read();
        tmp_8_reg_316 = tmp_8_fu_153_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
        x_1_reg_330 = x_1_fu_190_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        y_1_reg_306 = y_1_fu_141_p2.read();
    }
}

void pattern_generator_cross::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void pattern_generator_cross::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void pattern_generator_cross::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void pattern_generator_cross::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void pattern_generator_cross::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void pattern_generator_cross::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void pattern_generator_cross::thread_ap_block_state3_io() {
    ap_block_state3_io = ((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state3.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op49_write_state3.read())));
}

void pattern_generator_cross::thread_ap_block_state4_io() {
    ap_block_state4_io = ((esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op51_write_state4.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, outputStream_V_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op53_write_state4.read())));
}

void pattern_generator_cross::thread_ap_predicate_op48_write_state3() {
    ap_predicate_op48_write_state3 = (esl_seteq<1,1,1>(exitcond_fu_184_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_202_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond7_fu_212_p2.read()));
}

void pattern_generator_cross::thread_ap_predicate_op49_write_state3() {
    ap_predicate_op49_write_state3 = (esl_seteq<1,1,1>(exitcond_fu_184_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_202_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond7_fu_212_p2.read()));
}

void pattern_generator_cross::thread_ap_predicate_op51_write_state4() {
    ap_predicate_op51_write_state4 = (esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_335.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond7_reg_339.read()));
}

void pattern_generator_cross::thread_ap_predicate_op53_write_state4() {
    ap_predicate_op53_write_state4 = (esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_335.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond7_reg_339.read()));
}

void pattern_generator_cross::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void pattern_generator_cross::thread_exitcond5_fu_135_p2() {
    exitcond5_fu_135_p2 = (!y_reg_79.read().is_01() || !ap_const_lv9_1FE.is_01())? sc_lv<1>(): sc_lv<1>(y_reg_79.read() == ap_const_lv9_1FE);
}

void pattern_generator_cross::thread_exitcond_fu_184_p2() {
    exitcond_fu_184_p2 = (!x_reg_90.read().is_01() || !ap_const_lv10_2D0.is_01())? sc_lv<1>(): sc_lv<1>(x_reg_90.read() == ap_const_lv10_2D0);
}

void pattern_generator_cross::thread_or_cond7_fu_212_p2() {
    or_cond7_fu_212_p2 = (tmp_7_fu_207_p2.read() | tmp_8_reg_316.read());
}

void pattern_generator_cross::thread_or_cond_fu_202_p2() {
    or_cond_fu_202_p2 = (tmp_1_reg_311.read() & tmp_4_fu_196_p2.read());
}

void pattern_generator_cross::thread_outputStream_V_1_ack_in() {
    outputStream_V_1_ack_in = outputStream_V_1_state.read()[1];
}

void pattern_generator_cross::thread_outputStream_V_1_ack_out() {
    outputStream_V_1_ack_out = outputStream_V_TREADY.read();
}

void pattern_generator_cross::thread_outputStream_V_1_data_in() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op49_write_state3.read())) {
            outputStream_V_1_data_in = ap_const_lv8_C1;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state3.read())) {
            outputStream_V_1_data_in = ap_const_lv8_3E;
        } else {
            outputStream_V_1_data_in = "XXXXXXXX";
        }
    } else {
        outputStream_V_1_data_in = "XXXXXXXX";
    }
}

void pattern_generator_cross::thread_outputStream_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outputStream_V_1_sel.read())) {
        outputStream_V_1_data_out = outputStream_V_1_payload_B.read();
    } else {
        outputStream_V_1_data_out = outputStream_V_1_payload_A.read();
    }
}

void pattern_generator_cross::thread_outputStream_V_1_load_A() {
    outputStream_V_1_load_A = (outputStream_V_1_state_cmp_full.read() & ~outputStream_V_1_sel_wr.read());
}

void pattern_generator_cross::thread_outputStream_V_1_load_B() {
    outputStream_V_1_load_B = (outputStream_V_1_sel_wr.read() & outputStream_V_1_state_cmp_full.read());
}

void pattern_generator_cross::thread_outputStream_V_1_sel() {
    outputStream_V_1_sel = outputStream_V_1_sel_rd.read();
}

void pattern_generator_cross::thread_outputStream_V_1_state_cmp_full() {
    outputStream_V_1_state_cmp_full =  (sc_logic) ((!outputStream_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outputStream_V_1_state.read() != ap_const_lv2_1))[0];
}

void pattern_generator_cross::thread_outputStream_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op48_write_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op49_write_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read())))) {
        outputStream_V_1_vld_in = ap_const_logic_1;
    } else {
        outputStream_V_1_vld_in = ap_const_logic_0;
    }
}

void pattern_generator_cross::thread_outputStream_V_1_vld_out() {
    outputStream_V_1_vld_out = outputStream_V_1_state.read()[0];
}

void pattern_generator_cross::thread_outputStream_V_TDATA() {
    outputStream_V_TDATA = outputStream_V_1_data_out.read();
}

void pattern_generator_cross::thread_outputStream_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_184_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_202_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond7_fu_212_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_335.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond7_reg_339.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_184_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_fu_202_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, or_cond7_fu_212_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_reg_335.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, or_cond7_reg_339.read())))) {
        outputStream_V_TDATA_blk_n = outputStream_V_1_state.read()[1];
    } else {
        outputStream_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void pattern_generator_cross::thread_outputStream_V_TVALID() {
    outputStream_V_TVALID = outputStream_V_1_state.read()[0];
}

void pattern_generator_cross::thread_storemerge4_fu_275_p2() {
    storemerge4_fu_275_p2 = (!tmp_s_reg_112.read().is_01() || !storemerge4_v_cast_c_fu_267_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_s_reg_112.read()) + sc_biguint<32>(storemerge4_v_cast_c_fu_267_p3.read()));
}

void pattern_generator_cross::thread_storemerge4_v_cast_c_fu_267_p3() {
    storemerge4_v_cast_c_fu_267_p3 = (!dirY.read()[0].is_01())? sc_lv<32>(): ((dirY.read()[0].to_bool())? ap_const_lv32_FFFFFFFF: ap_const_lv32_1);
}

void pattern_generator_cross::thread_storemerge_fu_251_p2() {
    storemerge_fu_251_p2 = (!tmp_5_reg_101.read().is_01() || !storemerge_v_cast_ca_fu_243_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_5_reg_101.read()) + sc_biguint<32>(storemerge_v_cast_ca_fu_243_p3.read()));
}

void pattern_generator_cross::thread_storemerge_v_cast_ca_fu_243_p3() {
    storemerge_v_cast_ca_fu_243_p3 = (!dirX.read()[0].is_01())? sc_lv<32>(): ((dirX.read()[0].to_bool())? ap_const_lv32_FFFFFFFF: ap_const_lv32_1);
}

void pattern_generator_cross::thread_tmp_1_fu_147_p2() {
    tmp_1_fu_147_p2 = (!y_reg_79.read().is_01() || !ap_const_lv9_1E0.is_01())? sc_lv<1>(): (sc_biguint<9>(y_reg_79.read()) < sc_biguint<9>(ap_const_lv9_1E0));
}

void pattern_generator_cross::thread_tmp_2_fu_163_p2() {
    tmp_2_fu_163_p2 = (!lineX_load_reg_287.read().is_01() || !ap_const_lv32_27F.is_01())? sc_lv<1>(): sc_lv<1>(lineX_load_reg_287.read() == ap_const_lv32_27F);
}

void pattern_generator_cross::thread_tmp_4_fu_196_p2() {
    tmp_4_fu_196_p2 = (!x_reg_90.read().is_01() || !ap_const_lv10_280.is_01())? sc_lv<1>(): (sc_biguint<10>(x_reg_90.read()) < sc_biguint<10>(ap_const_lv10_280));
}

void pattern_generator_cross::thread_tmp_6_fu_217_p2() {
    tmp_6_fu_217_p2 = (!lineY_load_reg_295.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(lineY_load_reg_295.read() == ap_const_lv32_0);
}

void pattern_generator_cross::thread_tmp_7_fu_207_p2() {
    tmp_7_fu_207_p2 = (!x_cast1_fu_180_p1.read().is_01() || !lineX_load_reg_287.read().is_01())? sc_lv<1>(): sc_lv<1>(x_cast1_fu_180_p1.read() == lineX_load_reg_287.read());
}

void pattern_generator_cross::thread_tmp_8_fu_153_p2() {
    tmp_8_fu_153_p2 = (!y_cast2_fu_131_p1.read().is_01() || !lineY_load_reg_295.read().is_01())? sc_lv<1>(): sc_lv<1>(y_cast2_fu_131_p1.read() == lineY_load_reg_295.read());
}

void pattern_generator_cross::thread_tmp_9_fu_222_p2() {
    tmp_9_fu_222_p2 = (!lineY_load_reg_295.read().is_01() || !ap_const_lv32_1DF.is_01())? sc_lv<1>(): sc_lv<1>(lineY_load_reg_295.read() == ap_const_lv32_1DF);
}

void pattern_generator_cross::thread_tmp_fu_158_p2() {
    tmp_fu_158_p2 = (!lineX_load_reg_287.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(lineX_load_reg_287.read() == ap_const_lv32_0);
}

void pattern_generator_cross::thread_x_1_fu_190_p2() {
    x_1_fu_190_p2 = (!x_reg_90.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(x_reg_90.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void pattern_generator_cross::thread_x_cast1_fu_180_p1() {
    x_cast1_fu_180_p1 = esl_zext<32,10>(x_reg_90.read());
}

void pattern_generator_cross::thread_y_1_fu_141_p2() {
    y_1_fu_141_p2 = (!y_reg_79.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(y_reg_79.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void pattern_generator_cross::thread_y_cast2_fu_131_p1() {
    y_cast2_fu_131_p1 = esl_zext<32,9>(y_reg_79.read());
}

void pattern_generator_cross::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond5_fu_135_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_184_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(exitcond_fu_184_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state3_io.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(outputStream_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void pattern_generator_cross::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"outputStream_V_TDATA\" :  \"" << outputStream_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outputStream_V_TVALID\" :  \"" << outputStream_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outputStream_V_TREADY\" :  \"" << outputStream_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

