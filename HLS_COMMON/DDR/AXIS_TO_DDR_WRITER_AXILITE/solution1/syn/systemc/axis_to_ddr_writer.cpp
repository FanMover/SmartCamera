// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "axis_to_ddr_writer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axis_to_ddr_writer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axis_to_ddr_writer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> axis_to_ddr_writer::ap_ST_st1_fsm_0 = "1";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st2_fsm_1 = "10";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st3_fsm_2 = "100";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st4_fsm_3 = "1000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st5_fsm_4 = "10000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st6_fsm_5 = "100000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_pp1_stg0_fsm_8 = "100000000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st12_fsm_9 = "1000000000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st13_fsm_10 = "10000000000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st14_fsm_11 = "100000000000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st15_fsm_12 = "1000000000000";
const sc_lv<14> axis_to_ddr_writer::ap_ST_st16_fsm_13 = "10000000000000";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> axis_to_ddr_writer::ap_const_lv1_1 = "1";
const sc_lv<8> axis_to_ddr_writer::ap_const_lv8_0 = "00000000";
const int axis_to_ddr_writer::C_S_AXI_DATA_WIDTH = "100000";
const int axis_to_ddr_writer::C_M_AXI_DATA_WIDTH = "100000";
const int axis_to_ddr_writer::C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int axis_to_ddr_writer::C_M_AXI_BASE_DDR_ADDR_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axis_to_ddr_writer::C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axis_to_ddr_writer::C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = "11";
const sc_lv<1> axis_to_ddr_writer::ap_const_lv1_0 = "0";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_1 = "1";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_3 = "11";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_4 = "100";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_5 = "101";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_6 = "110";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_7 = "111";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_8 = "1000";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_9 = "1001";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_D = "1101";
const sc_lv<13> axis_to_ddr_writer::ap_const_lv13_0 = "0000000000000";
const sc_lv<10> axis_to_ddr_writer::ap_const_lv10_0 = "0000000000";
const sc_lv<64> axis_to_ddr_writer::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> axis_to_ddr_writer::ap_const_lv4_0 = "0000";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_200 = "1000000000";
const sc_lv<3> axis_to_ddr_writer::ap_const_lv3_0 = "000";
const sc_lv<2> axis_to_ddr_writer::ap_const_lv2_0 = "00";
const sc_lv<8> axis_to_ddr_writer::ap_const_lv8_FF = "11111111";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_1F = "11111";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_22 = "100010";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_C = "1100";
const sc_lv<9> axis_to_ddr_writer::ap_const_lv9_1FF = "111111111";
const sc_lv<8> axis_to_ddr_writer::ap_const_lv8_1 = "1";
const sc_lv<13> axis_to_ddr_writer::ap_const_lv13_1000 = "1000000000000";
const sc_lv<13> axis_to_ddr_writer::ap_const_lv13_1 = "1";
const sc_lv<10> axis_to_ddr_writer::ap_const_lv10_1 = "1";
const sc_lv<4> axis_to_ddr_writer::ap_const_lv4_8 = "1000";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_3F = "111111";
const sc_lv<56> axis_to_ddr_writer::ap_const_lv56_0 = "00000000000000000000000000000000000000000000000000000000";
const sc_lv<4> axis_to_ddr_writer::ap_const_lv4_1 = "1";
const sc_lv<10> axis_to_ddr_writer::ap_const_lv10_200 = "1000000000";

axis_to_ddr_writer::axis_to_ddr_writer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    axis_to_ddr_writer_AXILiteS_s_axi_U = new axis_to_ddr_writer_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("axis_to_ddr_writer_AXILiteS_s_axi_U");
    axis_to_ddr_writer_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    axis_to_ddr_writer_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    axis_to_ddr_writer_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    axis_to_ddr_writer_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    axis_to_ddr_writer_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    axis_to_ddr_writer_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    axis_to_ddr_writer_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    axis_to_ddr_writer_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    axis_to_ddr_writer_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    axis_to_ddr_writer_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    axis_to_ddr_writer_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    axis_to_ddr_writer_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    axis_to_ddr_writer_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    axis_to_ddr_writer_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ACLK(ap_clk);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ACLK_EN(axis_to_ddr_writer_AXILiteS_s_axi_U_ap_dummy_ce);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ap_start(ap_start);
    axis_to_ddr_writer_AXILiteS_s_axi_U->interrupt(interrupt);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ap_ready(ap_ready);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ap_done(ap_done);
    axis_to_ddr_writer_AXILiteS_s_axi_U->ap_idle(ap_idle);
    axis_to_ddr_writer_AXILiteS_s_axi_U->base_address(base_address);
    axis_to_ddr_writer_AXILiteS_s_axi_U->frame_buffer_dim(frame_buffer_dim);
    axis_to_ddr_writer_AXILiteS_s_axi_U->frame_buffer_offset(frame_buffer_offset);
    axis_to_ddr_writer_AXILiteS_s_axi_U->frame_buffer_number(frame_buffer_number);
    axis_to_ddr_writer_AXILiteS_s_axi_U->update_intr(update_intr);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U = new axis_to_ddr_writer_base_ddr_addr_m_axi<64,32,5,C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,C_M_AXI_BASE_DDR_ADDR_USER_VALUE,C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE>("axis_to_ddr_writer_base_ddr_addr_m_axi_U");
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWVALID(m_axi_base_ddr_addr_AWVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWREADY(m_axi_base_ddr_addr_AWREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWADDR(m_axi_base_ddr_addr_AWADDR);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWID(m_axi_base_ddr_addr_AWID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWLEN(m_axi_base_ddr_addr_AWLEN);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWSIZE(m_axi_base_ddr_addr_AWSIZE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWBURST(m_axi_base_ddr_addr_AWBURST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWLOCK(m_axi_base_ddr_addr_AWLOCK);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWCACHE(m_axi_base_ddr_addr_AWCACHE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWPROT(m_axi_base_ddr_addr_AWPROT);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWQOS(m_axi_base_ddr_addr_AWQOS);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWREGION(m_axi_base_ddr_addr_AWREGION);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWUSER(m_axi_base_ddr_addr_AWUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WVALID(m_axi_base_ddr_addr_WVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WREADY(m_axi_base_ddr_addr_WREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WDATA(m_axi_base_ddr_addr_WDATA);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WSTRB(m_axi_base_ddr_addr_WSTRB);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WLAST(m_axi_base_ddr_addr_WLAST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WID(m_axi_base_ddr_addr_WID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WUSER(m_axi_base_ddr_addr_WUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARVALID(m_axi_base_ddr_addr_ARVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARREADY(m_axi_base_ddr_addr_ARREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARADDR(m_axi_base_ddr_addr_ARADDR);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARID(m_axi_base_ddr_addr_ARID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARLEN(m_axi_base_ddr_addr_ARLEN);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARSIZE(m_axi_base_ddr_addr_ARSIZE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARBURST(m_axi_base_ddr_addr_ARBURST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARLOCK(m_axi_base_ddr_addr_ARLOCK);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARCACHE(m_axi_base_ddr_addr_ARCACHE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARPROT(m_axi_base_ddr_addr_ARPROT);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARQOS(m_axi_base_ddr_addr_ARQOS);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARREGION(m_axi_base_ddr_addr_ARREGION);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARUSER(m_axi_base_ddr_addr_ARUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RVALID(m_axi_base_ddr_addr_RVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RREADY(m_axi_base_ddr_addr_RREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RDATA(m_axi_base_ddr_addr_RDATA);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RLAST(m_axi_base_ddr_addr_RLAST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RID(m_axi_base_ddr_addr_RID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RUSER(m_axi_base_ddr_addr_RUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RRESP(m_axi_base_ddr_addr_RRESP);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BVALID(m_axi_base_ddr_addr_BVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BREADY(m_axi_base_ddr_addr_BREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BRESP(m_axi_base_ddr_addr_BRESP);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BID(m_axi_base_ddr_addr_BID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BUSER(m_axi_base_ddr_addr_BUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ACLK(ap_clk);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARESET(ap_rst_n_inv);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ACLK_EN(axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARVALID(base_ddr_addr_ARVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARREADY(base_ddr_addr_ARREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARADDR(base_ddr_addr_ARADDR);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARID(base_ddr_addr_ARID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARLEN(base_ddr_addr_ARLEN);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARSIZE(base_ddr_addr_ARSIZE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARLOCK(base_ddr_addr_ARLOCK);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARCACHE(base_ddr_addr_ARCACHE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARQOS(base_ddr_addr_ARQOS);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARPROT(base_ddr_addr_ARPROT);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARUSER(base_ddr_addr_ARUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARBURST(base_ddr_addr_ARBURST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARREGION(base_ddr_addr_ARREGION);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RVALID(base_ddr_addr_RVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RREADY(base_ddr_addr_RREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RDATA(base_ddr_addr_RDATA);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RID(base_ddr_addr_RID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RUSER(base_ddr_addr_RUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RRESP(base_ddr_addr_RRESP);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RLAST(base_ddr_addr_RLAST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWVALID(base_ddr_addr_AWVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWREADY(base_ddr_addr_AWREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWADDR(base_ddr_addr_AWADDR);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWID(base_ddr_addr_AWID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWLEN(base_ddr_addr_AWLEN);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWSIZE(base_ddr_addr_AWSIZE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWLOCK(base_ddr_addr_AWLOCK);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWCACHE(base_ddr_addr_AWCACHE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWQOS(base_ddr_addr_AWQOS);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWPROT(base_ddr_addr_AWPROT);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWUSER(base_ddr_addr_AWUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWBURST(base_ddr_addr_AWBURST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWREGION(base_ddr_addr_AWREGION);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WVALID(base_ddr_addr_WVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WREADY(base_ddr_addr_WREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WDATA(base_ddr_addr_WDATA);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WID(base_ddr_addr_WID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WUSER(base_ddr_addr_WUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WLAST(base_ddr_addr_WLAST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WSTRB(base_ddr_addr_WSTRB);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BVALID(base_ddr_addr_BVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BREADY(base_ddr_addr_BREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BRESP(base_ddr_addr_BRESP);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BID(base_ddr_addr_BID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BUSER(base_ddr_addr_BUSER);
    buffer_U = new axis_to_ddr_writer_buffer("buffer_U");
    buffer_U->clk(ap_clk);
    buffer_U->reset(ap_rst_n_inv);
    buffer_U->address0(buffer_address0);
    buffer_U->ce0(buffer_ce0);
    buffer_U->q0(buffer_q0);
    buffer_U->address1(buffer_address1);
    buffer_U->ce1(buffer_ce1);
    buffer_U->we1(buffer_we1);
    buffer_U->d1(buffer_d1);
    axis_to_ddr_writer_mul_32ns_8ns_40_3_U0 = new axis_to_ddr_writer_mul_32ns_8ns_40_3<1,3,32,8,40>("axis_to_ddr_writer_mul_32ns_8ns_40_3_U0");
    axis_to_ddr_writer_mul_32ns_8ns_40_3_U0->clk(ap_clk);
    axis_to_ddr_writer_mul_32ns_8ns_40_3_U0->reset(ap_rst_n_inv);
    axis_to_ddr_writer_mul_32ns_8ns_40_3_U0->din0(grp_fu_393_p0);
    axis_to_ddr_writer_mul_32ns_8ns_40_3_U0->din1(grp_fu_393_p1);
    axis_to_ddr_writer_mul_32ns_8ns_40_3_U0->ce(grp_fu_393_ce);
    axis_to_ddr_writer_mul_32ns_8ns_40_3_U0->dout(grp_fu_393_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( tmp_1_fu_436_p2 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_1_fu_436_p2 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_231);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_sig_bdd_251);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_262);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_271);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_280);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_291);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_297);
    sensitive << ( inputStream_V_TVALID );
    sensitive << ( exitcond_flatten_fu_507_p2 );

    SC_METHOD(thread_ap_sig_bdd_314);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_327);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_365);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_393);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_439);
    sensitive << ( ap_reg_ppstg_exitcond2_reg_715_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );

    SC_METHOD(thread_ap_sig_cseq_ST_pp1_stg0_fsm_8);
    sensitive << ( ap_sig_bdd_327 );

    SC_METHOD(thread_ap_sig_cseq_ST_st12_fsm_9);
    sensitive << ( ap_sig_bdd_365 );

    SC_METHOD(thread_ap_sig_cseq_ST_st16_fsm_13);
    sensitive << ( ap_sig_bdd_393 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_32 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_251 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_262 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_bdd_271 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_bdd_280 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_bdd_291 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_bdd_314 );

    SC_METHOD(thread_ap_sig_ioackin_base_ddr_addr_AWREADY);
    sensitive << ( base_ddr_addr_AWREADY );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_base_ddr_addr_WREADY);
    sensitive << ( base_ddr_addr_WREADY );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_WREADY );

    SC_METHOD(thread_axis_to_ddr_writer_AXILiteS_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce);

    SC_METHOD(thread_base_ddr_addr_ARADDR);

    SC_METHOD(thread_base_ddr_addr_ARBURST);

    SC_METHOD(thread_base_ddr_addr_ARCACHE);

    SC_METHOD(thread_base_ddr_addr_ARID);

    SC_METHOD(thread_base_ddr_addr_ARLEN);

    SC_METHOD(thread_base_ddr_addr_ARLOCK);

    SC_METHOD(thread_base_ddr_addr_ARPROT);

    SC_METHOD(thread_base_ddr_addr_ARQOS);

    SC_METHOD(thread_base_ddr_addr_ARREGION);

    SC_METHOD(thread_base_ddr_addr_ARSIZE);

    SC_METHOD(thread_base_ddr_addr_ARUSER);

    SC_METHOD(thread_base_ddr_addr_ARVALID);

    SC_METHOD(thread_base_ddr_addr_AWADDR);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( tmp_fu_591_p1 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_base_ddr_addr_AWBURST);

    SC_METHOD(thread_base_ddr_addr_AWCACHE);

    SC_METHOD(thread_base_ddr_addr_AWID);

    SC_METHOD(thread_base_ddr_addr_AWLEN);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_base_ddr_addr_AWLOCK);

    SC_METHOD(thread_base_ddr_addr_AWPROT);

    SC_METHOD(thread_base_ddr_addr_AWQOS);

    SC_METHOD(thread_base_ddr_addr_AWREGION);

    SC_METHOD(thread_base_ddr_addr_AWSIZE);

    SC_METHOD(thread_base_ddr_addr_AWUSER);

    SC_METHOD(thread_base_ddr_addr_AWVALID);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_base_ddr_addr_BREADY);
    sensitive << ( base_ddr_addr_BVALID );
    sensitive << ( ap_sig_cseq_ST_st16_fsm_13 );

    SC_METHOD(thread_base_ddr_addr_RREADY);

    SC_METHOD(thread_base_ddr_addr_WDATA);
    sensitive << ( ap_reg_ppstg_exitcond2_reg_715_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( buffer_load_reg_729 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_WREADY );

    SC_METHOD(thread_base_ddr_addr_WID);

    SC_METHOD(thread_base_ddr_addr_WLAST);

    SC_METHOD(thread_base_ddr_addr_WSTRB);
    sensitive << ( ap_reg_ppstg_exitcond2_reg_715_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_WREADY );

    SC_METHOD(thread_base_ddr_addr_WUSER);

    SC_METHOD(thread_base_ddr_addr_WVALID);
    sensitive << ( ap_reg_ppstg_exitcond2_reg_715_pp1_it1 );
    sensitive << ( ap_reg_ppiten_pp1_it2 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_WREADY );

    SC_METHOD(thread_buffer_address0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_8 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( tmp_9_fu_614_p1 );

    SC_METHOD(thread_buffer_address1);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_4_fu_586_p1 );

    SC_METHOD(thread_buffer_ce0);
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_8 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppstg_exitcond2_reg_715_pp1_it1 );
    sensitive << ( ap_sig_ioackin_base_ddr_addr_WREADY );
    sensitive << ( ap_reg_ppiten_pp1_it2 );

    SC_METHOD(thread_buffer_ce1);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_bdd_297 );

    SC_METHOD(thread_buffer_d1);
    sensitive << ( inputStream_V_TDATA );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( temp_1_fu_549_p3 );

    SC_METHOD(thread_buffer_we1);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( exitcond_flatten_fu_507_p2 );
    sensitive << ( ap_sig_bdd_297 );
    sensitive << ( ifzero_fu_580_p2 );

    SC_METHOD(thread_exitcond2_fu_602_p2);
    sensitive << ( indvar_reg_328 );
    sensitive << ( ap_sig_cseq_ST_pp1_stg0_fsm_8 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppstg_exitcond2_reg_715_pp1_it1 );
    sensitive << ( ap_sig_ioackin_base_ddr_addr_WREADY );
    sensitive << ( ap_reg_ppiten_pp1_it2 );

    SC_METHOD(thread_exitcond5_fu_525_p2);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( exitcond_flatten_fu_507_p2 );
    sensitive << ( ap_sig_bdd_297 );
    sensitive << ( i_reg_317 );

    SC_METHOD(thread_exitcond_flatten_fu_507_p2);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_bdd_297 );
    sensitive << ( indvar_flatten_reg_284 );

    SC_METHOD(thread_frame_count);
    sensitive << ( frame_count_inner );
    sensitive << ( tmp_1_fu_436_p2 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_frame_index_V);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( inner_index_V );
    sensitive << ( frame_index_V_preg );

    SC_METHOD(thread_grp_fu_393_ce);

    SC_METHOD(thread_grp_fu_393_p0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( grp_fu_393_p00 );

    SC_METHOD(thread_grp_fu_393_p00);
    sensitive << ( i_op_assign_reg_244 );

    SC_METHOD(thread_grp_fu_393_p1);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( grp_fu_393_p10 );

    SC_METHOD(thread_grp_fu_393_p10);
    sensitive << ( t_V_reg_633 );

    SC_METHOD(thread_i_1_fu_572_p3);
    sensitive << ( exitcond5_fu_525_p2 );
    sensitive << ( i_op_fu_566_p2 );

    SC_METHOD(thread_i_op_assign_1_cast_fu_409_p1);
    sensitive << ( i_op_assign_1_reg_253 );

    SC_METHOD(thread_i_op_fu_566_p2);
    sensitive << ( i_reg_317 );

    SC_METHOD(thread_idx_1_fu_442_p2);
    sensitive << ( idx_reg_273 );

    SC_METHOD(thread_ifzero_fu_580_p2);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( exitcond_flatten_fu_507_p2 );
    sensitive << ( ap_sig_bdd_297 );
    sensitive << ( i_1_fu_572_p3 );

    SC_METHOD(thread_indvar_flatten_next_fu_513_p2);
    sensitive << ( indvar_flatten_reg_284 );

    SC_METHOD(thread_indvar_next_fu_608_p2);
    sensitive << ( indvar_reg_328 );

    SC_METHOD(thread_inputStream_V_TREADY);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( exitcond_flatten_fu_507_p2 );
    sensitive << ( ap_sig_bdd_297 );

    SC_METHOD(thread_j_mid2_fu_531_p3);
    sensitive << ( j_reg_295 );
    sensitive << ( exitcond5_fu_525_p2 );
    sensitive << ( j_s_fu_519_p2 );

    SC_METHOD(thread_j_s_fu_519_p2);
    sensitive << ( j_reg_295 );

    SC_METHOD(thread_offset_1_fu_619_p2);
    sensitive << ( offset1_reg_263 );

    SC_METHOD(thread_offset_fu_413_p2);
    sensitive << ( tmp_8_reg_665 );
    sensitive << ( i_op_assign_1_cast_fu_409_p1 );

    SC_METHOD(thread_op2_assign_fu_456_p2);
    sensitive << ( tmp_2_cast_fu_452_p1 );

    SC_METHOD(thread_p_tmp_6_fu_476_p3);
    sensitive << ( tmp_5_fu_465_p2 );
    sensitive << ( tmp_6_fu_471_p2 );

    SC_METHOD(thread_temp_1_fu_549_p3);
    sensitive << ( exitcond5_fu_525_p2 );
    sensitive << ( tmp_11_fu_539_p4 );

    SC_METHOD(thread_temp_2_fu_557_p3);
    sensitive << ( inputStream_V_TDATA );
    sensitive << ( temp_1_fu_549_p3 );

    SC_METHOD(thread_tmp_11_fu_539_p4);
    sensitive << ( temp_reg_306 );

    SC_METHOD(thread_tmp_1_fu_436_p2);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( idx_reg_273 );
    sensitive << ( tmp_3_fu_432_p1 );

    SC_METHOD(thread_tmp_2_cast_fu_452_p1);
    sensitive << ( FRAME_BUFFER_NUMBER_r );

    SC_METHOD(thread_tmp_3_fu_432_p1);
    sensitive << ( tmp_s_fu_422_p4 );

    SC_METHOD(thread_tmp_4_cast_fu_462_p1);
    sensitive << ( t_V_reg_633 );

    SC_METHOD(thread_tmp_4_fu_586_p1);
    sensitive << ( j_mid2_fu_531_p3 );

    SC_METHOD(thread_tmp_5_fu_465_p2);
    sensitive << ( tmp_1_fu_436_p2 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( tmp_4_cast_fu_462_p1 );
    sensitive << ( op2_assign_fu_456_p2 );

    SC_METHOD(thread_tmp_6_fu_471_p2);
    sensitive << ( t_V_reg_633 );

    SC_METHOD(thread_tmp_7_fu_494_p2);
    sensitive << ( frame_count_inner );

    SC_METHOD(thread_tmp_9_fu_614_p1);
    sensitive << ( indvar_reg_328 );

    SC_METHOD(thread_tmp_fu_591_p1);
    sensitive << ( offset1_reg_263 );

    SC_METHOD(thread_tmp_s_fu_422_p4);
    sensitive << ( FRAME_BUFFER_DIM_r );

    SC_METHOD(thread_update_intr_read_read_fu_162_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( update_intr );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( base_ddr_addr_BVALID );
    sensitive << ( tmp_1_fu_436_p2 );
    sensitive << ( exitcond_flatten_fu_507_p2 );
    sensitive << ( ap_sig_bdd_297 );
    sensitive << ( ap_sig_ioackin_base_ddr_addr_AWREADY );
    sensitive << ( exitcond2_fu_602_p2 );
    sensitive << ( ap_reg_ppiten_pp1_it0 );
    sensitive << ( ap_reg_ppiten_pp1_it1 );
    sensitive << ( ap_reg_ppstg_exitcond2_reg_715_pp1_it1 );
    sensitive << ( ap_sig_ioackin_base_ddr_addr_WREADY );
    sensitive << ( ap_reg_ppiten_pp1_it2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000000001";
    inner_index_V = "00000000";
    FRAME_OFFSET = "00000000000001001011000000000000";
    BASE_ADDRESS_r = "00000000000000000000000000000";
    FRAME_BUFFER_DIM_r = "00000000000001001011000000000000";
    FRAME_BUFFER_NUMBER_r = "00001000";
    frame_count_inner = "00000000000000000000000000000000";
    ap_reg_ppiten_pp1_it0 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp1_it2 = SC_LOGIC_0;
    ap_reg_ioackin_base_ddr_addr_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_base_ddr_addr_WREADY = SC_LOGIC_0;
    frame_index_V_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axis_to_ddr_writer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, inputStream_V_TDATA, "(port)inputStream_V_TDATA");
    sc_trace(mVcdFile, inputStream_V_TVALID, "(port)inputStream_V_TVALID");
    sc_trace(mVcdFile, inputStream_V_TREADY, "(port)inputStream_V_TREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWVALID, "(port)m_axi_base_ddr_addr_AWVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWREADY, "(port)m_axi_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWADDR, "(port)m_axi_base_ddr_addr_AWADDR");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWID, "(port)m_axi_base_ddr_addr_AWID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWLEN, "(port)m_axi_base_ddr_addr_AWLEN");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWSIZE, "(port)m_axi_base_ddr_addr_AWSIZE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWBURST, "(port)m_axi_base_ddr_addr_AWBURST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWLOCK, "(port)m_axi_base_ddr_addr_AWLOCK");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWCACHE, "(port)m_axi_base_ddr_addr_AWCACHE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWPROT, "(port)m_axi_base_ddr_addr_AWPROT");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWQOS, "(port)m_axi_base_ddr_addr_AWQOS");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWREGION, "(port)m_axi_base_ddr_addr_AWREGION");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWUSER, "(port)m_axi_base_ddr_addr_AWUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WVALID, "(port)m_axi_base_ddr_addr_WVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WREADY, "(port)m_axi_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WDATA, "(port)m_axi_base_ddr_addr_WDATA");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WSTRB, "(port)m_axi_base_ddr_addr_WSTRB");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WLAST, "(port)m_axi_base_ddr_addr_WLAST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WID, "(port)m_axi_base_ddr_addr_WID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WUSER, "(port)m_axi_base_ddr_addr_WUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARVALID, "(port)m_axi_base_ddr_addr_ARVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARREADY, "(port)m_axi_base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARADDR, "(port)m_axi_base_ddr_addr_ARADDR");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARID, "(port)m_axi_base_ddr_addr_ARID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARLEN, "(port)m_axi_base_ddr_addr_ARLEN");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARSIZE, "(port)m_axi_base_ddr_addr_ARSIZE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARBURST, "(port)m_axi_base_ddr_addr_ARBURST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARLOCK, "(port)m_axi_base_ddr_addr_ARLOCK");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARCACHE, "(port)m_axi_base_ddr_addr_ARCACHE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARPROT, "(port)m_axi_base_ddr_addr_ARPROT");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARQOS, "(port)m_axi_base_ddr_addr_ARQOS");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARREGION, "(port)m_axi_base_ddr_addr_ARREGION");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARUSER, "(port)m_axi_base_ddr_addr_ARUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RVALID, "(port)m_axi_base_ddr_addr_RVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RREADY, "(port)m_axi_base_ddr_addr_RREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RDATA, "(port)m_axi_base_ddr_addr_RDATA");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RLAST, "(port)m_axi_base_ddr_addr_RLAST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RID, "(port)m_axi_base_ddr_addr_RID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RUSER, "(port)m_axi_base_ddr_addr_RUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RRESP, "(port)m_axi_base_ddr_addr_RRESP");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BVALID, "(port)m_axi_base_ddr_addr_BVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BREADY, "(port)m_axi_base_ddr_addr_BREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BRESP, "(port)m_axi_base_ddr_addr_BRESP");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BID, "(port)m_axi_base_ddr_addr_BID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BUSER, "(port)m_axi_base_ddr_addr_BUSER");
    sc_trace(mVcdFile, frame_index_V, "(port)frame_index_V");
    sc_trace(mVcdFile, frame_count, "(port)frame_count");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_32, "ap_sig_bdd_32");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, base_address, "base_address");
    sc_trace(mVcdFile, frame_buffer_dim, "frame_buffer_dim");
    sc_trace(mVcdFile, frame_buffer_offset, "frame_buffer_offset");
    sc_trace(mVcdFile, frame_buffer_number, "frame_buffer_number");
    sc_trace(mVcdFile, update_intr, "update_intr");
    sc_trace(mVcdFile, inner_index_V, "inner_index_V");
    sc_trace(mVcdFile, FRAME_OFFSET, "FRAME_OFFSET");
    sc_trace(mVcdFile, BASE_ADDRESS_r, "BASE_ADDRESS_r");
    sc_trace(mVcdFile, FRAME_BUFFER_DIM_r, "FRAME_BUFFER_DIM_r");
    sc_trace(mVcdFile, FRAME_BUFFER_NUMBER_r, "FRAME_BUFFER_NUMBER_r");
    sc_trace(mVcdFile, frame_count_inner, "frame_count_inner");
    sc_trace(mVcdFile, axis_to_ddr_writer_AXILiteS_s_axi_U_ap_dummy_ce, "axis_to_ddr_writer_AXILiteS_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, base_ddr_addr_AWVALID, "base_ddr_addr_AWVALID");
    sc_trace(mVcdFile, base_ddr_addr_AWREADY, "base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, base_ddr_addr_AWADDR, "base_ddr_addr_AWADDR");
    sc_trace(mVcdFile, base_ddr_addr_AWID, "base_ddr_addr_AWID");
    sc_trace(mVcdFile, base_ddr_addr_AWLEN, "base_ddr_addr_AWLEN");
    sc_trace(mVcdFile, base_ddr_addr_AWSIZE, "base_ddr_addr_AWSIZE");
    sc_trace(mVcdFile, base_ddr_addr_AWBURST, "base_ddr_addr_AWBURST");
    sc_trace(mVcdFile, base_ddr_addr_AWLOCK, "base_ddr_addr_AWLOCK");
    sc_trace(mVcdFile, base_ddr_addr_AWCACHE, "base_ddr_addr_AWCACHE");
    sc_trace(mVcdFile, base_ddr_addr_AWPROT, "base_ddr_addr_AWPROT");
    sc_trace(mVcdFile, base_ddr_addr_AWQOS, "base_ddr_addr_AWQOS");
    sc_trace(mVcdFile, base_ddr_addr_AWREGION, "base_ddr_addr_AWREGION");
    sc_trace(mVcdFile, base_ddr_addr_AWUSER, "base_ddr_addr_AWUSER");
    sc_trace(mVcdFile, base_ddr_addr_WVALID, "base_ddr_addr_WVALID");
    sc_trace(mVcdFile, base_ddr_addr_WREADY, "base_ddr_addr_WREADY");
    sc_trace(mVcdFile, base_ddr_addr_WDATA, "base_ddr_addr_WDATA");
    sc_trace(mVcdFile, base_ddr_addr_WSTRB, "base_ddr_addr_WSTRB");
    sc_trace(mVcdFile, base_ddr_addr_WLAST, "base_ddr_addr_WLAST");
    sc_trace(mVcdFile, base_ddr_addr_WID, "base_ddr_addr_WID");
    sc_trace(mVcdFile, base_ddr_addr_WUSER, "base_ddr_addr_WUSER");
    sc_trace(mVcdFile, base_ddr_addr_ARVALID, "base_ddr_addr_ARVALID");
    sc_trace(mVcdFile, base_ddr_addr_ARREADY, "base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, base_ddr_addr_ARADDR, "base_ddr_addr_ARADDR");
    sc_trace(mVcdFile, base_ddr_addr_ARID, "base_ddr_addr_ARID");
    sc_trace(mVcdFile, base_ddr_addr_ARLEN, "base_ddr_addr_ARLEN");
    sc_trace(mVcdFile, base_ddr_addr_ARSIZE, "base_ddr_addr_ARSIZE");
    sc_trace(mVcdFile, base_ddr_addr_ARBURST, "base_ddr_addr_ARBURST");
    sc_trace(mVcdFile, base_ddr_addr_ARLOCK, "base_ddr_addr_ARLOCK");
    sc_trace(mVcdFile, base_ddr_addr_ARCACHE, "base_ddr_addr_ARCACHE");
    sc_trace(mVcdFile, base_ddr_addr_ARPROT, "base_ddr_addr_ARPROT");
    sc_trace(mVcdFile, base_ddr_addr_ARQOS, "base_ddr_addr_ARQOS");
    sc_trace(mVcdFile, base_ddr_addr_ARREGION, "base_ddr_addr_ARREGION");
    sc_trace(mVcdFile, base_ddr_addr_ARUSER, "base_ddr_addr_ARUSER");
    sc_trace(mVcdFile, base_ddr_addr_RVALID, "base_ddr_addr_RVALID");
    sc_trace(mVcdFile, base_ddr_addr_RREADY, "base_ddr_addr_RREADY");
    sc_trace(mVcdFile, base_ddr_addr_RDATA, "base_ddr_addr_RDATA");
    sc_trace(mVcdFile, base_ddr_addr_RLAST, "base_ddr_addr_RLAST");
    sc_trace(mVcdFile, base_ddr_addr_RID, "base_ddr_addr_RID");
    sc_trace(mVcdFile, base_ddr_addr_RUSER, "base_ddr_addr_RUSER");
    sc_trace(mVcdFile, base_ddr_addr_RRESP, "base_ddr_addr_RRESP");
    sc_trace(mVcdFile, base_ddr_addr_BVALID, "base_ddr_addr_BVALID");
    sc_trace(mVcdFile, base_ddr_addr_BREADY, "base_ddr_addr_BREADY");
    sc_trace(mVcdFile, base_ddr_addr_BRESP, "base_ddr_addr_BRESP");
    sc_trace(mVcdFile, base_ddr_addr_BID, "base_ddr_addr_BID");
    sc_trace(mVcdFile, base_ddr_addr_BUSER, "base_ddr_addr_BUSER");
    sc_trace(mVcdFile, axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce, "axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, indvar_reg_328, "indvar_reg_328");
    sc_trace(mVcdFile, t_V_reg_633, "t_V_reg_633");
    sc_trace(mVcdFile, update_intr_read_read_fu_162_p2, "update_intr_read_read_fu_162_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_251, "ap_sig_bdd_251");
    sc_trace(mVcdFile, tmp_8_reg_665, "tmp_8_reg_665");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_262, "ap_sig_bdd_262");
    sc_trace(mVcdFile, offset_fu_413_p2, "offset_fu_413_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_bdd_271, "ap_sig_bdd_271");
    sc_trace(mVcdFile, tmp_1_fu_436_p2, "tmp_1_fu_436_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_bdd_280, "ap_sig_bdd_280");
    sc_trace(mVcdFile, idx_1_fu_442_p2, "idx_1_fu_442_p2");
    sc_trace(mVcdFile, idx_1_reg_679, "idx_1_reg_679");
    sc_trace(mVcdFile, indvar_flatten_next_fu_513_p2, "indvar_flatten_next_fu_513_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_bdd_291, "ap_sig_bdd_291");
    sc_trace(mVcdFile, exitcond_flatten_fu_507_p2, "exitcond_flatten_fu_507_p2");
    sc_trace(mVcdFile, ap_sig_bdd_297, "ap_sig_bdd_297");
    sc_trace(mVcdFile, j_mid2_fu_531_p3, "j_mid2_fu_531_p3");
    sc_trace(mVcdFile, temp_2_fu_557_p3, "temp_2_fu_557_p3");
    sc_trace(mVcdFile, i_1_fu_572_p3, "i_1_fu_572_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_bdd_314, "ap_sig_bdd_314");
    sc_trace(mVcdFile, ap_sig_ioackin_base_ddr_addr_AWREADY, "ap_sig_ioackin_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, exitcond2_fu_602_p2, "exitcond2_fu_602_p2");
    sc_trace(mVcdFile, exitcond2_reg_715, "exitcond2_reg_715");
    sc_trace(mVcdFile, ap_sig_cseq_ST_pp1_stg0_fsm_8, "ap_sig_cseq_ST_pp1_stg0_fsm_8");
    sc_trace(mVcdFile, ap_sig_bdd_327, "ap_sig_bdd_327");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it0, "ap_reg_ppiten_pp1_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it1, "ap_reg_ppiten_pp1_it1");
    sc_trace(mVcdFile, ap_reg_ppstg_exitcond2_reg_715_pp1_it1, "ap_reg_ppstg_exitcond2_reg_715_pp1_it1");
    sc_trace(mVcdFile, ap_sig_ioackin_base_ddr_addr_WREADY, "ap_sig_ioackin_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, ap_reg_ppiten_pp1_it2, "ap_reg_ppiten_pp1_it2");
    sc_trace(mVcdFile, indvar_next_fu_608_p2, "indvar_next_fu_608_p2");
    sc_trace(mVcdFile, buffer_q0, "buffer_q0");
    sc_trace(mVcdFile, buffer_load_reg_729, "buffer_load_reg_729");
    sc_trace(mVcdFile, offset_1_fu_619_p2, "offset_1_fu_619_p2");
    sc_trace(mVcdFile, offset_1_reg_734, "offset_1_reg_734");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st12_fsm_9, "ap_sig_cseq_ST_st12_fsm_9");
    sc_trace(mVcdFile, ap_sig_bdd_365, "ap_sig_bdd_365");
    sc_trace(mVcdFile, buffer_address0, "buffer_address0");
    sc_trace(mVcdFile, buffer_ce0, "buffer_ce0");
    sc_trace(mVcdFile, buffer_address1, "buffer_address1");
    sc_trace(mVcdFile, buffer_ce1, "buffer_ce1");
    sc_trace(mVcdFile, buffer_we1, "buffer_we1");
    sc_trace(mVcdFile, buffer_d1, "buffer_d1");
    sc_trace(mVcdFile, i_op_assign_reg_244, "i_op_assign_reg_244");
    sc_trace(mVcdFile, i_op_assign_1_reg_253, "i_op_assign_1_reg_253");
    sc_trace(mVcdFile, offset1_reg_263, "offset1_reg_263");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st16_fsm_13, "ap_sig_cseq_ST_st16_fsm_13");
    sc_trace(mVcdFile, ap_sig_bdd_393, "ap_sig_bdd_393");
    sc_trace(mVcdFile, idx_reg_273, "idx_reg_273");
    sc_trace(mVcdFile, indvar_flatten_reg_284, "indvar_flatten_reg_284");
    sc_trace(mVcdFile, j_reg_295, "j_reg_295");
    sc_trace(mVcdFile, temp_reg_306, "temp_reg_306");
    sc_trace(mVcdFile, i_reg_317, "i_reg_317");
    sc_trace(mVcdFile, tmp_4_fu_586_p1, "tmp_4_fu_586_p1");
    sc_trace(mVcdFile, ifzero_fu_580_p2, "ifzero_fu_580_p2");
    sc_trace(mVcdFile, tmp_9_fu_614_p1, "tmp_9_fu_614_p1");
    sc_trace(mVcdFile, tmp_fu_591_p1, "tmp_fu_591_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_base_ddr_addr_AWREADY, "ap_reg_ioackin_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_base_ddr_addr_WREADY, "ap_reg_ioackin_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, p_tmp_6_fu_476_p3, "p_tmp_6_fu_476_p3");
    sc_trace(mVcdFile, tmp_7_fu_494_p2, "tmp_7_fu_494_p2");
    sc_trace(mVcdFile, frame_index_V_preg, "frame_index_V_preg");
    sc_trace(mVcdFile, grp_fu_393_p0, "grp_fu_393_p0");
    sc_trace(mVcdFile, grp_fu_393_p1, "grp_fu_393_p1");
    sc_trace(mVcdFile, grp_fu_393_p2, "grp_fu_393_p2");
    sc_trace(mVcdFile, i_op_assign_1_cast_fu_409_p1, "i_op_assign_1_cast_fu_409_p1");
    sc_trace(mVcdFile, tmp_s_fu_422_p4, "tmp_s_fu_422_p4");
    sc_trace(mVcdFile, tmp_3_fu_432_p1, "tmp_3_fu_432_p1");
    sc_trace(mVcdFile, tmp_2_cast_fu_452_p1, "tmp_2_cast_fu_452_p1");
    sc_trace(mVcdFile, tmp_4_cast_fu_462_p1, "tmp_4_cast_fu_462_p1");
    sc_trace(mVcdFile, op2_assign_fu_456_p2, "op2_assign_fu_456_p2");
    sc_trace(mVcdFile, tmp_5_fu_465_p2, "tmp_5_fu_465_p2");
    sc_trace(mVcdFile, tmp_6_fu_471_p2, "tmp_6_fu_471_p2");
    sc_trace(mVcdFile, exitcond5_fu_525_p2, "exitcond5_fu_525_p2");
    sc_trace(mVcdFile, j_s_fu_519_p2, "j_s_fu_519_p2");
    sc_trace(mVcdFile, tmp_11_fu_539_p4, "tmp_11_fu_539_p4");
    sc_trace(mVcdFile, temp_1_fu_549_p3, "temp_1_fu_549_p3");
    sc_trace(mVcdFile, i_op_fu_566_p2, "i_op_fu_566_p2");
    sc_trace(mVcdFile, grp_fu_393_ce, "grp_fu_393_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_393_p00, "grp_fu_393_p00");
    sc_trace(mVcdFile, grp_fu_393_p10, "grp_fu_393_p10");
    sc_trace(mVcdFile, ap_sig_bdd_439, "ap_sig_bdd_439");
    sc_trace(mVcdFile, ap_sig_bdd_231, "ap_sig_bdd_231");
#endif

    }
    mHdltvinHandle.open("axis_to_ddr_writer.hdltvin.dat");
    mHdltvoutHandle.open("axis_to_ddr_writer.hdltvout.dat");
}

axis_to_ddr_writer::~axis_to_ddr_writer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete axis_to_ddr_writer_AXILiteS_s_axi_U;
    delete axis_to_ddr_writer_base_ddr_addr_m_axi_U;
    delete buffer_U;
    delete axis_to_ddr_writer_mul_32ns_8ns_40_3_U0;
}

void axis_to_ddr_writer::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_base_ddr_addr_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_AWREADY.read())) {
                ap_reg_ioackin_base_ddr_addr_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, base_ddr_addr_AWREADY.read())) {
                ap_reg_ioackin_base_ddr_addr_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_base_ddr_addr_WREADY = ap_const_logic_0;
    } else {
        if (ap_sig_bdd_439.read()) {
            if (!(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))) {
                ap_reg_ioackin_base_ddr_addr_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, base_ddr_addr_WREADY.read())) {
                ap_reg_ioackin_base_ddr_addr_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_8.read()) && 
             !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_602_p2.read()))) {
            ap_reg_ppiten_pp1_it0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
                    !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_AWREADY.read()))) {
            ap_reg_ppiten_pp1_it0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_8.read()) && 
             !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_602_p2.read()))) {
            ap_reg_ppiten_pp1_it1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
                     !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_8.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_602_p2.read())))) {
            ap_reg_ppiten_pp1_it1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp1_it2 = ap_const_logic_0;
    } else {
        if (!(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()))) {
            ap_reg_ppiten_pp1_it2 = ap_reg_ppiten_pp1_it1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
                    !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_AWREADY.read()))) {
            ap_reg_ppiten_pp1_it2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        frame_count_inner = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_436_p2.read()))) {
            frame_count_inner = tmp_7_fu_494_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        frame_index_V_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
             !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
            frame_index_V_preg = inner_index_V.read();
        }
    }
    if (ap_sig_bdd_231.read()) {
        if (esl_seteq<1,1,1>(update_intr_read_read_fu_162_p2.read(), ap_const_lv1_0)) {
            i_op_assign_1_reg_253 = BASE_ADDRESS_r.read();
        } else if (!esl_seteq<1,1,1>(update_intr_read_read_fu_162_p2.read(), ap_const_lv1_0)) {
            i_op_assign_1_reg_253 = base_address.read().range(31, 3);
        }
    }
    if (ap_sig_bdd_231.read()) {
        if (esl_seteq<1,1,1>(update_intr_read_read_fu_162_p2.read(), ap_const_lv1_0)) {
            i_op_assign_reg_244 = FRAME_OFFSET.read();
        } else if (!esl_seteq<1,1,1>(update_intr_read_read_fu_162_p2.read(), ap_const_lv1_0)) {
            i_op_assign_reg_244 = frame_buffer_offset.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_436_p2.read()))) {
        i_reg_317 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_507_p2.read()) && 
                !ap_sig_bdd_297.read())) {
        i_reg_317 = i_1_fu_572_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_13.read()) && 
         !esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_0))) {
        idx_reg_273 = idx_1_reg_679.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        idx_reg_273 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_436_p2.read()))) {
        indvar_flatten_reg_284 = ap_const_lv13_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_507_p2.read()) && 
                !ap_sig_bdd_297.read())) {
        indvar_flatten_reg_284 = indvar_flatten_next_fu_513_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_AWREADY.read()))) {
        indvar_reg_328 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_8.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
                !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_602_p2.read()))) {
        indvar_reg_328 = indvar_next_fu_608_p2.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inner_index_V = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_436_p2.read()))) {
            inner_index_V = p_tmp_6_fu_476_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_436_p2.read()))) {
        j_reg_295 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_507_p2.read()) && 
                !ap_sig_bdd_297.read())) {
        j_reg_295 = j_mid2_fu_531_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_13.read()) && 
         !esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_0))) {
        offset1_reg_263 = offset_1_reg_734.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        offset1_reg_263 = offset_fu_413_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_436_p2.read()))) {
        temp_reg_306 = ap_const_lv64_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_507_p2.read()) && 
                !ap_sig_bdd_297.read())) {
        temp_reg_306 = temp_2_fu_557_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(update_intr_read_read_fu_162_p2.read(), ap_const_lv1_0))) {
        BASE_ADDRESS_r = base_address.read().range(31, 3);
        FRAME_BUFFER_DIM_r = frame_buffer_dim.read();
        FRAME_BUFFER_NUMBER_r = frame_buffer_number.read();
        FRAME_OFFSET = frame_buffer_offset.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_8.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())))) {
        ap_reg_ppstg_exitcond2_reg_715_pp1_it1 = exitcond2_reg_715.read();
        exitcond2_reg_715 = exitcond2_fu_602_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_8.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_reg_715.read()))) {
        buffer_load_reg_729 = buffer_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        idx_1_reg_679 = idx_1_fu_442_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st12_fsm_9.read())) {
        offset_1_reg_734 = offset_1_fu_619_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        t_V_reg_633 = inner_index_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        tmp_8_reg_665 = grp_fu_393_p2.read().range(34, 3);
    }
}

void axis_to_ddr_writer::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_436_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_436_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axis_to_ddr_writer::thread_ap_sig_bdd_231() {
    ap_sig_bdd_231 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_251() {
    ap_sig_bdd_251 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_262() {
    ap_sig_bdd_262 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_271() {
    ap_sig_bdd_271 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_280() {
    ap_sig_bdd_280 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_291() {
    ap_sig_bdd_291 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_297() {
    ap_sig_bdd_297 = (esl_seteq<1,1,1>(inputStream_V_TVALID.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_507_p2.read()));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_314() {
    ap_sig_bdd_314 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_32() {
    ap_sig_bdd_32 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void axis_to_ddr_writer::thread_ap_sig_bdd_327() {
    ap_sig_bdd_327 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_365() {
    ap_sig_bdd_365 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_393() {
    ap_sig_bdd_393 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(13, 13));
}

void axis_to_ddr_writer::thread_ap_sig_bdd_439() {
    ap_sig_bdd_439 = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()));
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_pp1_stg0_fsm_8() {
    if (ap_sig_bdd_327.read()) {
        ap_sig_cseq_ST_pp1_stg0_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_pp1_stg0_fsm_8 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_st12_fsm_9() {
    if (ap_sig_bdd_365.read()) {
        ap_sig_cseq_ST_st12_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st12_fsm_9 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_st16_fsm_13() {
    if (ap_sig_bdd_393.read()) {
        ap_sig_cseq_ST_st16_fsm_13 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st16_fsm_13 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_32.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_251.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_262.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_bdd_271.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_bdd_280.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_bdd_291.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_bdd_314.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_sig_ioackin_base_ddr_addr_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_AWREADY.read())) {
        ap_sig_ioackin_base_ddr_addr_AWREADY = base_ddr_addr_AWREADY.read();
    } else {
        ap_sig_ioackin_base_ddr_addr_AWREADY = ap_const_logic_1;
    }
}

void axis_to_ddr_writer::thread_ap_sig_ioackin_base_ddr_addr_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_WREADY.read())) {
        ap_sig_ioackin_base_ddr_addr_WREADY = base_ddr_addr_WREADY.read();
    } else {
        ap_sig_ioackin_base_ddr_addr_WREADY = ap_const_logic_1;
    }
}

void axis_to_ddr_writer::thread_axis_to_ddr_writer_AXILiteS_s_axi_U_ap_dummy_ce() {
    axis_to_ddr_writer_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void axis_to_ddr_writer::thread_axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce() {
    axis_to_ddr_writer_base_ddr_addr_m_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARADDR() {
    base_ddr_addr_ARADDR = ap_const_lv32_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARBURST() {
    base_ddr_addr_ARBURST = ap_const_lv2_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARCACHE() {
    base_ddr_addr_ARCACHE = ap_const_lv4_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARID() {
    base_ddr_addr_ARID = ap_const_lv1_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARLEN() {
    base_ddr_addr_ARLEN = ap_const_lv32_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARLOCK() {
    base_ddr_addr_ARLOCK = ap_const_lv2_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARPROT() {
    base_ddr_addr_ARPROT = ap_const_lv3_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARQOS() {
    base_ddr_addr_ARQOS = ap_const_lv4_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARREGION() {
    base_ddr_addr_ARREGION = ap_const_lv4_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARSIZE() {
    base_ddr_addr_ARSIZE = ap_const_lv3_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARUSER() {
    base_ddr_addr_ARUSER = ap_const_lv1_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_ARVALID() {
    base_ddr_addr_ARVALID = ap_const_logic_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWADDR() {
    base_ddr_addr_AWADDR =  (sc_lv<32>) (tmp_fu_591_p1.read());
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWBURST() {
    base_ddr_addr_AWBURST = ap_const_lv2_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWCACHE() {
    base_ddr_addr_AWCACHE = ap_const_lv4_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWID() {
    base_ddr_addr_AWID = ap_const_lv1_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWLEN() {
    base_ddr_addr_AWLEN = ap_const_lv32_200;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWLOCK() {
    base_ddr_addr_AWLOCK = ap_const_lv2_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWPROT() {
    base_ddr_addr_AWPROT = ap_const_lv3_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWQOS() {
    base_ddr_addr_AWQOS = ap_const_lv4_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWREGION() {
    base_ddr_addr_AWREGION = ap_const_lv4_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWSIZE() {
    base_ddr_addr_AWSIZE = ap_const_lv3_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWUSER() {
    base_ddr_addr_AWUSER = ap_const_lv1_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_AWREADY.read()))) {
        base_ddr_addr_AWVALID = ap_const_logic_1;
    } else {
        base_ddr_addr_AWVALID = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_base_ddr_addr_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st16_fsm_13.read()) && 
         !esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_0))) {
        base_ddr_addr_BREADY = ap_const_logic_1;
    } else {
        base_ddr_addr_BREADY = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_base_ddr_addr_RREADY() {
    base_ddr_addr_RREADY = ap_const_logic_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_WDATA() {
    base_ddr_addr_WDATA = buffer_load_reg_729.read();
}

void axis_to_ddr_writer::thread_base_ddr_addr_WID() {
    base_ddr_addr_WID = ap_const_lv1_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_WLAST() {
    base_ddr_addr_WLAST = ap_const_logic_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_WSTRB() {
    base_ddr_addr_WSTRB = ap_const_lv8_FF;
}

void axis_to_ddr_writer::thread_base_ddr_addr_WUSER() {
    base_ddr_addr_WUSER = ap_const_lv1_0;
}

void axis_to_ddr_writer::thread_base_ddr_addr_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_WREADY.read()))) {
        base_ddr_addr_WVALID = ap_const_logic_1;
    } else {
        base_ddr_addr_WVALID = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_buffer_address0() {
    buffer_address0 =  (sc_lv<9>) (tmp_9_fu_614_p1.read());
}

void axis_to_ddr_writer::thread_buffer_address1() {
    buffer_address1 =  (sc_lv<9>) (tmp_4_fu_586_p1.read());
}

void axis_to_ddr_writer::thread_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_pp1_stg0_fsm_8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())))) {
        buffer_ce0 = ap_const_logic_1;
    } else {
        buffer_ce0 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_buffer_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
         !ap_sig_bdd_297.read())) {
        buffer_ce1 = ap_const_logic_1;
    } else {
        buffer_ce1 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_buffer_d1() {
    buffer_d1 = esl_concat<8,56>(inputStream_V_TDATA.read(), temp_1_fu_549_p3.read());
}

void axis_to_ddr_writer::thread_buffer_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_507_p2.read()) && 
          !ap_sig_bdd_297.read() && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, ifzero_fu_580_p2.read())))) {
        buffer_we1 = ap_const_logic_1;
    } else {
        buffer_we1 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_exitcond2_fu_602_p2() {
    exitcond2_fu_602_p2 = (!indvar_reg_328.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(indvar_reg_328.read() == ap_const_lv10_200);
}

void axis_to_ddr_writer::thread_exitcond5_fu_525_p2() {
    exitcond5_fu_525_p2 = (!i_reg_317.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_317.read() == ap_const_lv4_8);
}

void axis_to_ddr_writer::thread_exitcond_flatten_fu_507_p2() {
    exitcond_flatten_fu_507_p2 = (!indvar_flatten_reg_284.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_284.read() == ap_const_lv13_1000);
}

void axis_to_ddr_writer::thread_frame_count() {
    frame_count = (!frame_count_inner.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(frame_count_inner.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axis_to_ddr_writer::thread_frame_index_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        frame_index_V = inner_index_V.read();
    } else {
        frame_index_V = frame_index_V_preg.read();
    }
}

void axis_to_ddr_writer::thread_grp_fu_393_ce() {
    grp_fu_393_ce = ap_const_logic_1;
}

void axis_to_ddr_writer::thread_grp_fu_393_p0() {
    grp_fu_393_p0 =  (sc_lv<32>) (grp_fu_393_p00.read());
}

void axis_to_ddr_writer::thread_grp_fu_393_p00() {
    grp_fu_393_p00 = esl_zext<40,32>(i_op_assign_reg_244.read());
}

void axis_to_ddr_writer::thread_grp_fu_393_p1() {
    grp_fu_393_p1 =  (sc_lv<8>) (grp_fu_393_p10.read());
}

void axis_to_ddr_writer::thread_grp_fu_393_p10() {
    grp_fu_393_p10 = esl_zext<40,8>(t_V_reg_633.read());
}

void axis_to_ddr_writer::thread_i_1_fu_572_p3() {
    i_1_fu_572_p3 = (!exitcond5_fu_525_p2.read()[0].is_01())? sc_lv<4>(): ((exitcond5_fu_525_p2.read()[0].to_bool())? ap_const_lv4_1: i_op_fu_566_p2.read());
}

void axis_to_ddr_writer::thread_i_op_assign_1_cast_fu_409_p1() {
    i_op_assign_1_cast_fu_409_p1 = esl_zext<32,29>(i_op_assign_1_reg_253.read());
}

void axis_to_ddr_writer::thread_i_op_fu_566_p2() {
    i_op_fu_566_p2 = (!i_reg_317.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_317.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void axis_to_ddr_writer::thread_idx_1_fu_442_p2() {
    idx_1_fu_442_p2 = (!idx_reg_273.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(idx_reg_273.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axis_to_ddr_writer::thread_ifzero_fu_580_p2() {
    ifzero_fu_580_p2 = (!i_1_fu_572_p3.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_1_fu_572_p3.read() == ap_const_lv4_8);
}

void axis_to_ddr_writer::thread_indvar_flatten_next_fu_513_p2() {
    indvar_flatten_next_fu_513_p2 = (!indvar_flatten_reg_284.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(indvar_flatten_reg_284.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void axis_to_ddr_writer::thread_indvar_next_fu_608_p2() {
    indvar_next_fu_608_p2 = (!indvar_reg_328.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(indvar_reg_328.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void axis_to_ddr_writer::thread_inputStream_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_507_p2.read()) && 
         !ap_sig_bdd_297.read())) {
        inputStream_V_TREADY = ap_const_logic_1;
    } else {
        inputStream_V_TREADY = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_j_mid2_fu_531_p3() {
    j_mid2_fu_531_p3 = (!exitcond5_fu_525_p2.read()[0].is_01())? sc_lv<10>(): ((exitcond5_fu_525_p2.read()[0].to_bool())? j_s_fu_519_p2.read(): j_reg_295.read());
}

void axis_to_ddr_writer::thread_j_s_fu_519_p2() {
    j_s_fu_519_p2 = (!j_reg_295.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_295.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void axis_to_ddr_writer::thread_offset_1_fu_619_p2() {
    offset_1_fu_619_p2 = (!offset1_reg_263.read().is_01() || !ap_const_lv32_200.is_01())? sc_lv<32>(): (sc_biguint<32>(offset1_reg_263.read()) + sc_biguint<32>(ap_const_lv32_200));
}

void axis_to_ddr_writer::thread_offset_fu_413_p2() {
    offset_fu_413_p2 = (!tmp_8_reg_665.read().is_01() || !i_op_assign_1_cast_fu_409_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_8_reg_665.read()) + sc_biguint<32>(i_op_assign_1_cast_fu_409_p1.read()));
}

void axis_to_ddr_writer::thread_op2_assign_fu_456_p2() {
    op2_assign_fu_456_p2 = (!tmp_2_cast_fu_452_p1.read().is_01() || !ap_const_lv9_1FF.is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_2_cast_fu_452_p1.read()) + sc_bigint<9>(ap_const_lv9_1FF));
}

void axis_to_ddr_writer::thread_p_tmp_6_fu_476_p3() {
    p_tmp_6_fu_476_p3 = (!tmp_5_fu_465_p2.read()[0].is_01())? sc_lv<8>(): ((tmp_5_fu_465_p2.read()[0].to_bool())? ap_const_lv8_0: tmp_6_fu_471_p2.read());
}

void axis_to_ddr_writer::thread_temp_1_fu_549_p3() {
    temp_1_fu_549_p3 = (!exitcond5_fu_525_p2.read()[0].is_01())? sc_lv<56>(): ((exitcond5_fu_525_p2.read()[0].to_bool())? ap_const_lv56_0: tmp_11_fu_539_p4.read());
}

void axis_to_ddr_writer::thread_temp_2_fu_557_p3() {
    temp_2_fu_557_p3 = esl_concat<8,56>(inputStream_V_TDATA.read(), temp_1_fu_549_p3.read());
}

void axis_to_ddr_writer::thread_tmp_11_fu_539_p4() {
    tmp_11_fu_539_p4 = temp_reg_306.read().range(63, 8);
}

void axis_to_ddr_writer::thread_tmp_1_fu_436_p2() {
    tmp_1_fu_436_p2 = (!idx_reg_273.read().is_01() || !tmp_3_fu_432_p1.read().is_01())? sc_lv<1>(): (sc_biguint<32>(idx_reg_273.read()) < sc_biguint<32>(tmp_3_fu_432_p1.read()));
}

void axis_to_ddr_writer::thread_tmp_2_cast_fu_452_p1() {
    tmp_2_cast_fu_452_p1 = esl_zext<9,8>(FRAME_BUFFER_NUMBER_r.read());
}

void axis_to_ddr_writer::thread_tmp_3_fu_432_p1() {
    tmp_3_fu_432_p1 = esl_zext<32,20>(tmp_s_fu_422_p4.read());
}

void axis_to_ddr_writer::thread_tmp_4_cast_fu_462_p1() {
    tmp_4_cast_fu_462_p1 = esl_zext<9,8>(t_V_reg_633.read());
}

void axis_to_ddr_writer::thread_tmp_4_fu_586_p1() {
    tmp_4_fu_586_p1 = esl_zext<64,10>(j_mid2_fu_531_p3.read());
}

void axis_to_ddr_writer::thread_tmp_5_fu_465_p2() {
    tmp_5_fu_465_p2 = (!tmp_4_cast_fu_462_p1.read().is_01() || !op2_assign_fu_456_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_cast_fu_462_p1.read() == op2_assign_fu_456_p2.read());
}

void axis_to_ddr_writer::thread_tmp_6_fu_471_p2() {
    tmp_6_fu_471_p2 = (!t_V_reg_633.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(t_V_reg_633.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void axis_to_ddr_writer::thread_tmp_7_fu_494_p2() {
    tmp_7_fu_494_p2 = (!frame_count_inner.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(frame_count_inner.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axis_to_ddr_writer::thread_tmp_9_fu_614_p1() {
    tmp_9_fu_614_p1 = esl_zext<64,10>(indvar_reg_328.read());
}

void axis_to_ddr_writer::thread_tmp_fu_591_p1() {
    tmp_fu_591_p1 = esl_sext<64,32>(offset1_reg_263.read());
}

void axis_to_ddr_writer::thread_tmp_s_fu_422_p4() {
    tmp_s_fu_422_p4 = FRAME_BUFFER_DIM_r.read().range(31, 12);
}

void axis_to_ddr_writer::thread_update_intr_read_read_fu_162_p2() {
    update_intr_read_read_fu_162_p2 =  (sc_lv<1>) (update_intr.read());
}

void axis_to_ddr_writer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_436_p2.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_507_p2.read()) && !ap_sig_bdd_297.read())) {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            } else if ((!ap_sig_bdd_297.read() && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_507_p2.read()))) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        case 128 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_AWREADY.read())) {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_8;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_602_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())))) {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_8;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read()) && 
  !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it0.read()) && 
  !(esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_ppstg_exitcond2_reg_715_pp1_it1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it2.read())) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_602_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp1_it1.read())))) {
                ap_NS_fsm = ap_ST_st12_fsm_9;
            } else {
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_8;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st13_fsm_10;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_st14_fsm_11;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_st15_fsm_12;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_st16_fsm_13;
            break;
        case 8192 : 
            if (!esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st16_fsm_13;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXX";
            break;
    }
}

void axis_to_ddr_writer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_V_TDATA\" :  \"" << inputStream_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_V_TVALID\" :  \"" << inputStream_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"inputStream_V_TREADY\" :  \"" << inputStream_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWVALID\" :  \"" << m_axi_base_ddr_addr_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_AWREADY\" :  \"" << m_axi_base_ddr_addr_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWADDR\" :  \"" << m_axi_base_ddr_addr_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWID\" :  \"" << m_axi_base_ddr_addr_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWLEN\" :  \"" << m_axi_base_ddr_addr_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWSIZE\" :  \"" << m_axi_base_ddr_addr_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWBURST\" :  \"" << m_axi_base_ddr_addr_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWLOCK\" :  \"" << m_axi_base_ddr_addr_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWCACHE\" :  \"" << m_axi_base_ddr_addr_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWPROT\" :  \"" << m_axi_base_ddr_addr_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWQOS\" :  \"" << m_axi_base_ddr_addr_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWREGION\" :  \"" << m_axi_base_ddr_addr_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWUSER\" :  \"" << m_axi_base_ddr_addr_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WVALID\" :  \"" << m_axi_base_ddr_addr_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_WREADY\" :  \"" << m_axi_base_ddr_addr_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WDATA\" :  \"" << m_axi_base_ddr_addr_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WSTRB\" :  \"" << m_axi_base_ddr_addr_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WLAST\" :  \"" << m_axi_base_ddr_addr_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WID\" :  \"" << m_axi_base_ddr_addr_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WUSER\" :  \"" << m_axi_base_ddr_addr_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARVALID\" :  \"" << m_axi_base_ddr_addr_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_ARREADY\" :  \"" << m_axi_base_ddr_addr_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARADDR\" :  \"" << m_axi_base_ddr_addr_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARID\" :  \"" << m_axi_base_ddr_addr_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARLEN\" :  \"" << m_axi_base_ddr_addr_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARSIZE\" :  \"" << m_axi_base_ddr_addr_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARBURST\" :  \"" << m_axi_base_ddr_addr_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARLOCK\" :  \"" << m_axi_base_ddr_addr_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARCACHE\" :  \"" << m_axi_base_ddr_addr_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARPROT\" :  \"" << m_axi_base_ddr_addr_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARQOS\" :  \"" << m_axi_base_ddr_addr_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARREGION\" :  \"" << m_axi_base_ddr_addr_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARUSER\" :  \"" << m_axi_base_ddr_addr_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RVALID\" :  \"" << m_axi_base_ddr_addr_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_RREADY\" :  \"" << m_axi_base_ddr_addr_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RDATA\" :  \"" << m_axi_base_ddr_addr_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RLAST\" :  \"" << m_axi_base_ddr_addr_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RID\" :  \"" << m_axi_base_ddr_addr_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RUSER\" :  \"" << m_axi_base_ddr_addr_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RRESP\" :  \"" << m_axi_base_ddr_addr_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BVALID\" :  \"" << m_axi_base_ddr_addr_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_BREADY\" :  \"" << m_axi_base_ddr_addr_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BRESP\" :  \"" << m_axi_base_ddr_addr_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BID\" :  \"" << m_axi_base_ddr_addr_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BUSER\" :  \"" << m_axi_base_ddr_addr_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frame_index_V\" :  \"" << frame_index_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frame_count\" :  \"" << frame_count.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

