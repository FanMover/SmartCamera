// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ddr_to_axis_reader_HH_
#define _ddr_to_axis_reader_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ddr_to_axis_readebkb.h"
#include "ddr_to_axis_reader_base_ddr_addr_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_BASE_DDR_ADDR_ID_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH = 64,
         unsigned int C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH = 1>
struct ddr_to_axis_reader : public sc_module {
    // Port declarations 57
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > outStream_V_TDATA;
    sc_out< sc_logic > outStream_V_TVALID;
    sc_in< sc_logic > outStream_V_TREADY;
    sc_out< sc_logic > m_axi_base_ddr_addr_AWVALID;
    sc_in< sc_logic > m_axi_base_ddr_addr_AWREADY;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH> > m_axi_base_ddr_addr_AWADDR;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_AWID;
    sc_out< sc_lv<8> > m_axi_base_ddr_addr_AWLEN;
    sc_out< sc_lv<3> > m_axi_base_ddr_addr_AWSIZE;
    sc_out< sc_lv<2> > m_axi_base_ddr_addr_AWBURST;
    sc_out< sc_lv<2> > m_axi_base_ddr_addr_AWLOCK;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_AWCACHE;
    sc_out< sc_lv<3> > m_axi_base_ddr_addr_AWPROT;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_AWQOS;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_AWREGION;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH> > m_axi_base_ddr_addr_AWUSER;
    sc_out< sc_logic > m_axi_base_ddr_addr_WVALID;
    sc_in< sc_logic > m_axi_base_ddr_addr_WREADY;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH> > m_axi_base_ddr_addr_WDATA;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH/8> > m_axi_base_ddr_addr_WSTRB;
    sc_out< sc_logic > m_axi_base_ddr_addr_WLAST;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_WID;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH> > m_axi_base_ddr_addr_WUSER;
    sc_out< sc_logic > m_axi_base_ddr_addr_ARVALID;
    sc_in< sc_logic > m_axi_base_ddr_addr_ARREADY;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH> > m_axi_base_ddr_addr_ARADDR;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_ARID;
    sc_out< sc_lv<8> > m_axi_base_ddr_addr_ARLEN;
    sc_out< sc_lv<3> > m_axi_base_ddr_addr_ARSIZE;
    sc_out< sc_lv<2> > m_axi_base_ddr_addr_ARBURST;
    sc_out< sc_lv<2> > m_axi_base_ddr_addr_ARLOCK;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_ARCACHE;
    sc_out< sc_lv<3> > m_axi_base_ddr_addr_ARPROT;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_ARQOS;
    sc_out< sc_lv<4> > m_axi_base_ddr_addr_ARREGION;
    sc_out< sc_uint<C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH> > m_axi_base_ddr_addr_ARUSER;
    sc_in< sc_logic > m_axi_base_ddr_addr_RVALID;
    sc_out< sc_logic > m_axi_base_ddr_addr_RREADY;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH> > m_axi_base_ddr_addr_RDATA;
    sc_in< sc_logic > m_axi_base_ddr_addr_RLAST;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_RID;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH> > m_axi_base_ddr_addr_RUSER;
    sc_in< sc_lv<2> > m_axi_base_ddr_addr_RRESP;
    sc_in< sc_logic > m_axi_base_ddr_addr_BVALID;
    sc_out< sc_logic > m_axi_base_ddr_addr_BREADY;
    sc_in< sc_lv<2> > m_axi_base_ddr_addr_BRESP;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_ID_WIDTH> > m_axi_base_ddr_addr_BID;
    sc_in< sc_uint<C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH> > m_axi_base_ddr_addr_BUSER;
    sc_in< sc_lv<3> > frame_index_V;
    sc_out< sc_lv<32> > frame_count;
    sc_out< sc_lv<32> > frame_count_equals;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<64> > ap_var_for_const8;
    sc_signal< sc_lv<8> > ap_var_for_const9;


    // Module declarations
    ddr_to_axis_reader(sc_module_name name);
    SC_HAS_PROCESS(ddr_to_axis_reader);

    ~ddr_to_axis_reader();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    ddr_to_axis_reader_base_ddr_addr_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,C_M_AXI_BASE_DDR_ADDR_USER_VALUE,C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE>* ddr_to_axis_reader_base_ddr_addr_m_axi_U;
    ddr_to_axis_readebkb* buffer_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > outStream_V_1_data_out;
    sc_signal< sc_logic > outStream_V_1_vld_in;
    sc_signal< sc_logic > outStream_V_1_vld_out;
    sc_signal< sc_logic > outStream_V_1_ack_in;
    sc_signal< sc_logic > outStream_V_1_ack_out;
    sc_signal< sc_lv<8> > outStream_V_1_payload_A;
    sc_signal< sc_lv<8> > outStream_V_1_payload_B;
    sc_signal< sc_logic > outStream_V_1_sel_rd;
    sc_signal< sc_logic > outStream_V_1_sel_wr;
    sc_signal< sc_logic > outStream_V_1_sel;
    sc_signal< sc_logic > outStream_V_1_load_A;
    sc_signal< sc_logic > outStream_V_1_load_B;
    sc_signal< sc_lv<2> > outStream_V_1_state;
    sc_signal< sc_logic > outStream_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > frame_count_inner;
    sc_signal< sc_lv<32> > index_old;
    sc_signal< sc_lv<32> > frame_count_equals_i;
    sc_signal< sc_logic > outStream_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > tmp_7_reg_569;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_lv<1> > tmp_7_reg_569_pp1_iter1_reg;
    sc_signal< sc_logic > base_ddr_addr_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_278_p2;
    sc_signal< sc_logic > base_ddr_addr_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond1_reg_555;
    sc_signal< sc_logic > base_ddr_addr_AWREADY;
    sc_signal< sc_logic > base_ddr_addr_WREADY;
    sc_signal< sc_logic > base_ddr_addr_ARVALID;
    sc_signal< sc_logic > base_ddr_addr_ARREADY;
    sc_signal< sc_lv<32> > base_ddr_addr_ARADDR;
    sc_signal< sc_logic > base_ddr_addr_RVALID;
    sc_signal< sc_logic > base_ddr_addr_RREADY;
    sc_signal< sc_lv<64> > base_ddr_addr_RDATA;
    sc_signal< sc_logic > base_ddr_addr_RLAST;
    sc_signal< sc_lv<1> > base_ddr_addr_RID;
    sc_signal< sc_lv<1> > base_ddr_addr_RUSER;
    sc_signal< sc_lv<2> > base_ddr_addr_RRESP;
    sc_signal< sc_logic > base_ddr_addr_BVALID;
    sc_signal< sc_lv<2> > base_ddr_addr_BRESP;
    sc_signal< sc_lv<1> > base_ddr_addr_BID;
    sc_signal< sc_lv<1> > base_ddr_addr_BUSER;
    sc_signal< sc_lv<10> > indvar_reg_221;
    sc_signal< sc_lv<10> > indvar_reg_221_pp0_iter1_reg;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<13> > j_reg_233;
    sc_signal< sc_lv<32> > tmp_fu_250_p1;
    sc_signal< sc_lv<32> > tmp_reg_523;
    sc_signal< sc_lv<4> > tmp_cast_fu_258_p1;
    sc_signal< sc_lv<4> > tmp_cast_reg_528;
    sc_signal< sc_lv<7> > i_1_fu_284_p2;
    sc_signal< sc_lv<7> > i_1_reg_541;
    sc_signal< sc_logic > ap_sig_ioackin_base_ddr_addr_ARREADY;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<1> > exitcond1_fu_353_p2;
    sc_signal< sc_lv<1> > exitcond1_reg_555_pp0_iter1_reg;
    sc_signal< sc_lv<10> > indvar_next_fu_359_p2;
    sc_signal< sc_lv<10> > indvar_next_reg_559;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > base_ddr_addr_addr_r_reg_564;
    sc_signal< sc_lv<1> > tmp_7_fu_370_p2;
    sc_signal< bool > ap_block_state13_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state14_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state14_io;
    sc_signal< bool > ap_block_state15_pp1_stage0_iter2;
    sc_signal< bool > ap_block_state15_io;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<13> > j_1_fu_376_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<3> > tmp_8_fu_382_p1;
    sc_signal< sc_lv<3> > tmp_8_reg_578;
    sc_signal< sc_lv<8> > tmp_26_fu_512_p1;
    sc_signal< sc_lv<19> > offset_fu_517_p2;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state13;
    sc_signal< sc_lv<9> > buffer_address0;
    sc_signal< sc_logic > buffer_ce0;
    sc_signal< sc_lv<64> > buffer_q0;
    sc_signal< sc_lv<9> > buffer_address1;
    sc_signal< sc_logic > buffer_ce1;
    sc_signal< sc_logic > buffer_we1;
    sc_signal< sc_lv<19> > offset1_reg_200;
    sc_signal< sc_lv<7> > i_reg_210;
    sc_signal< sc_lv<10> > ap_phi_mux_indvar_phi_fu_225_p4;
    sc_signal< sc_lv<64> > indvar1_fu_365_p1;
    sc_signal< sc_lv<64> > gepindex2_cast_fu_396_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_290_p1;
    sc_signal< sc_logic > ap_reg_ioackin_base_ddr_addr_ARREADY;
    sc_signal< sc_lv<32> > tmp_3_fu_305_p2;
    sc_signal< sc_lv<32> > tmp_6_fu_335_p2;
    sc_signal< sc_lv<1> > tmp_4_fu_326_p2;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<3> > inner_index_V_2_fu_244_p2;
    sc_signal< sc_lv<3> > tmp_1_fu_262_p0;
    sc_signal< sc_lv<22> > tmp_1_fu_262_p2;
    sc_signal< sc_lv<4> > tmp_2_fu_322_p1;
    sc_signal< sc_lv<9> > gepindex_cast_fu_386_p4;
    sc_signal< sc_lv<6> > start_pos_fu_401_p3;
    sc_signal< sc_lv<6> > end_pos_fu_408_p2;
    sc_signal< sc_lv<7> > tmp_11_fu_420_p1;
    sc_signal< sc_lv<7> > tmp_12_fu_424_p1;
    sc_signal< sc_lv<1> > tmp_10_fu_414_p2;
    sc_signal< sc_lv<7> > tmp_14_fu_438_p2;
    sc_signal< sc_lv<7> > tmp_16_fu_450_p2;
    sc_signal< sc_lv<64> > tmp_13_fu_428_p4;
    sc_signal< sc_lv<7> > tmp_15_fu_444_p2;
    sc_signal< sc_lv<7> > tmp_17_fu_456_p3;
    sc_signal< sc_lv<7> > tmp_19_fu_472_p3;
    sc_signal< sc_lv<7> > tmp_20_fu_480_p2;
    sc_signal< sc_lv<64> > tmp_18_fu_464_p3;
    sc_signal< sc_lv<64> > tmp_21_fu_486_p1;
    sc_signal< sc_lv<64> > tmp_22_fu_490_p1;
    sc_signal< sc_lv<64> > tmp_23_fu_494_p2;
    sc_signal< sc_lv<64> > tmp_24_fu_500_p2;
    sc_signal< sc_lv<64> > tmp_25_fu_506_p2;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_lv<22> > tmp_1_fu_262_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state1;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_state3;
    static const sc_lv<12> ap_ST_fsm_state4;
    static const sc_lv<12> ap_ST_fsm_state5;
    static const sc_lv<12> ap_ST_fsm_state6;
    static const sc_lv<12> ap_ST_fsm_state7;
    static const sc_lv<12> ap_ST_fsm_state8;
    static const sc_lv<12> ap_ST_fsm_pp0_stage0;
    static const sc_lv<12> ap_ST_fsm_state12;
    static const sc_lv<12> ap_ST_fsm_pp1_stage0;
    static const sc_lv<12> ap_ST_fsm_state16;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const int C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR;
    static const int C_M_AXI_BASE_DDR_ADDR_USER_VALUE;
    static const int C_M_AXI_BASE_DDR_ADDR_PROT_VALUE;
    static const int C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_200;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<22> ap_const_lv22_4B000;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<7> ap_const_lv7_4B;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<6> ap_const_lv6_7;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<7> ap_const_lv7_3F;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFFF;
    static const sc_lv<19> ap_const_lv19_200;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const8();
    void thread_ap_var_for_const9();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter1();
    void thread_ap_block_state11_pp0_stage0_iter2();
    void thread_ap_block_state13_pp1_stage0_iter0();
    void thread_ap_block_state14_io();
    void thread_ap_block_state14_pp1_stage0_iter1();
    void thread_ap_block_state15_io();
    void thread_ap_block_state15_pp1_stage0_iter2();
    void thread_ap_block_state2_io();
    void thread_ap_block_state9_pp0_stage0_iter0();
    void thread_ap_condition_pp0_exit_iter0_state9();
    void thread_ap_condition_pp1_exit_iter0_state13();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_indvar_phi_fu_225_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_base_ddr_addr_ARREADY();
    void thread_base_ddr_addr_ARADDR();
    void thread_base_ddr_addr_ARVALID();
    void thread_base_ddr_addr_RREADY();
    void thread_base_ddr_addr_blk_n_AR();
    void thread_base_ddr_addr_blk_n_R();
    void thread_buffer_address0();
    void thread_buffer_address1();
    void thread_buffer_ce0();
    void thread_buffer_ce1();
    void thread_buffer_we1();
    void thread_end_pos_fu_408_p2();
    void thread_exitcond1_fu_353_p2();
    void thread_exitcond_fu_278_p2();
    void thread_frame_count();
    void thread_frame_count_equals();
    void thread_gepindex2_cast_fu_396_p1();
    void thread_gepindex_cast_fu_386_p4();
    void thread_i_1_fu_284_p2();
    void thread_indvar1_fu_365_p1();
    void thread_indvar_next_fu_359_p2();
    void thread_inner_index_V_2_fu_244_p2();
    void thread_j_1_fu_376_p2();
    void thread_offset_fu_517_p2();
    void thread_outStream_V_1_ack_in();
    void thread_outStream_V_1_ack_out();
    void thread_outStream_V_1_data_out();
    void thread_outStream_V_1_load_A();
    void thread_outStream_V_1_load_B();
    void thread_outStream_V_1_sel();
    void thread_outStream_V_1_state_cmp_full();
    void thread_outStream_V_1_vld_in();
    void thread_outStream_V_1_vld_out();
    void thread_outStream_V_TDATA();
    void thread_outStream_V_TDATA_blk_n();
    void thread_outStream_V_TVALID();
    void thread_start_pos_fu_401_p3();
    void thread_tmp_10_fu_414_p2();
    void thread_tmp_11_fu_420_p1();
    void thread_tmp_12_fu_424_p1();
    void thread_tmp_13_fu_428_p4();
    void thread_tmp_14_fu_438_p2();
    void thread_tmp_15_fu_444_p2();
    void thread_tmp_16_fu_450_p2();
    void thread_tmp_17_fu_456_p3();
    void thread_tmp_18_fu_464_p3();
    void thread_tmp_19_fu_472_p3();
    void thread_tmp_1_fu_262_p0();
    void thread_tmp_1_fu_262_p00();
    void thread_tmp_1_fu_262_p2();
    void thread_tmp_20_fu_480_p2();
    void thread_tmp_21_fu_486_p1();
    void thread_tmp_22_fu_490_p1();
    void thread_tmp_23_fu_494_p2();
    void thread_tmp_24_fu_500_p2();
    void thread_tmp_25_fu_506_p2();
    void thread_tmp_26_fu_512_p1();
    void thread_tmp_2_fu_322_p1();
    void thread_tmp_3_fu_305_p2();
    void thread_tmp_4_fu_326_p2();
    void thread_tmp_5_fu_290_p1();
    void thread_tmp_6_fu_335_p2();
    void thread_tmp_7_fu_370_p2();
    void thread_tmp_8_fu_382_p1();
    void thread_tmp_cast_fu_258_p1();
    void thread_tmp_fu_250_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
