// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ddr_to_axis_reader.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ddr_to_axis_reader::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ddr_to_axis_reader::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state1 = "1";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state2 = "10";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state3 = "100";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state4 = "1000";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state5 = "10000";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state6 = "100000";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state12 = "1000000000";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_pp1_stage0 = "10000000000";
const sc_lv<12> ddr_to_axis_reader::ap_ST_fsm_state16 = "100000000000";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool ddr_to_axis_reader::ap_const_boolean_1 = true;
const sc_lv<1> ddr_to_axis_reader::ap_const_lv1_0 = "0";
const sc_lv<1> ddr_to_axis_reader::ap_const_lv1_1 = "1";
const sc_lv<2> ddr_to_axis_reader::ap_const_lv2_0 = "00";
const sc_lv<2> ddr_to_axis_reader::ap_const_lv2_2 = "10";
const sc_lv<2> ddr_to_axis_reader::ap_const_lv2_3 = "11";
const sc_lv<2> ddr_to_axis_reader::ap_const_lv2_1 = "1";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_A = "1010";
const bool ddr_to_axis_reader::ap_const_boolean_0 = false;
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_1 = "1";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_8 = "1000";
const int ddr_to_axis_reader::C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int ddr_to_axis_reader::C_M_AXI_BASE_DDR_ADDR_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ddr_to_axis_reader::C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ddr_to_axis_reader::C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = "11";
const int ddr_to_axis_reader::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_B = "1011";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_7 = "111";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_9 = "1001";
const sc_lv<7> ddr_to_axis_reader::ap_const_lv7_0 = "0000000";
const sc_lv<10> ddr_to_axis_reader::ap_const_lv10_0 = "0000000000";
const sc_lv<13> ddr_to_axis_reader::ap_const_lv13_0 = "0000000000000";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_200 = "1000000000";
const sc_lv<3> ddr_to_axis_reader::ap_const_lv3_0 = "000";
const sc_lv<4> ddr_to_axis_reader::ap_const_lv4_0 = "0000";
const sc_lv<3> ddr_to_axis_reader::ap_const_lv3_7 = "111";
const sc_lv<22> ddr_to_axis_reader::ap_const_lv22_4B000 = "1001011000000000000";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_3 = "11";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_15 = "10101";
const sc_lv<7> ddr_to_axis_reader::ap_const_lv7_4B = "1001011";
const sc_lv<7> ddr_to_axis_reader::ap_const_lv7_1 = "1";
const sc_lv<10> ddr_to_axis_reader::ap_const_lv10_200 = "1000000000";
const sc_lv<10> ddr_to_axis_reader::ap_const_lv10_1 = "1";
const sc_lv<13> ddr_to_axis_reader::ap_const_lv13_1000 = "1000000000000";
const sc_lv<13> ddr_to_axis_reader::ap_const_lv13_1 = "1";
const sc_lv<6> ddr_to_axis_reader::ap_const_lv6_7 = "111";
const sc_lv<32> ddr_to_axis_reader::ap_const_lv32_3F = "111111";
const sc_lv<7> ddr_to_axis_reader::ap_const_lv7_3F = "111111";
const sc_lv<64> ddr_to_axis_reader::ap_const_lv64_FFFFFFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<19> ddr_to_axis_reader::ap_const_lv19_200 = "1000000000";
const sc_lv<64> ddr_to_axis_reader::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> ddr_to_axis_reader::ap_const_lv8_0 = "00000000";

ddr_to_axis_reader::ddr_to_axis_reader(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ddr_to_axis_reader_base_ddr_addr_m_axi_U = new ddr_to_axis_reader_base_ddr_addr_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,C_M_AXI_BASE_DDR_ADDR_USER_VALUE,C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE>("ddr_to_axis_reader_base_ddr_addr_m_axi_U");
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWVALID(m_axi_base_ddr_addr_AWVALID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWREADY(m_axi_base_ddr_addr_AWREADY);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWADDR(m_axi_base_ddr_addr_AWADDR);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWID(m_axi_base_ddr_addr_AWID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWLEN(m_axi_base_ddr_addr_AWLEN);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWSIZE(m_axi_base_ddr_addr_AWSIZE);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWBURST(m_axi_base_ddr_addr_AWBURST);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWLOCK(m_axi_base_ddr_addr_AWLOCK);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWCACHE(m_axi_base_ddr_addr_AWCACHE);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWPROT(m_axi_base_ddr_addr_AWPROT);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWQOS(m_axi_base_ddr_addr_AWQOS);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWREGION(m_axi_base_ddr_addr_AWREGION);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->AWUSER(m_axi_base_ddr_addr_AWUSER);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->WVALID(m_axi_base_ddr_addr_WVALID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->WREADY(m_axi_base_ddr_addr_WREADY);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->WDATA(m_axi_base_ddr_addr_WDATA);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->WSTRB(m_axi_base_ddr_addr_WSTRB);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->WLAST(m_axi_base_ddr_addr_WLAST);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->WID(m_axi_base_ddr_addr_WID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->WUSER(m_axi_base_ddr_addr_WUSER);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARVALID(m_axi_base_ddr_addr_ARVALID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARREADY(m_axi_base_ddr_addr_ARREADY);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARADDR(m_axi_base_ddr_addr_ARADDR);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARID(m_axi_base_ddr_addr_ARID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARLEN(m_axi_base_ddr_addr_ARLEN);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARSIZE(m_axi_base_ddr_addr_ARSIZE);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARBURST(m_axi_base_ddr_addr_ARBURST);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARLOCK(m_axi_base_ddr_addr_ARLOCK);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARCACHE(m_axi_base_ddr_addr_ARCACHE);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARPROT(m_axi_base_ddr_addr_ARPROT);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARQOS(m_axi_base_ddr_addr_ARQOS);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARREGION(m_axi_base_ddr_addr_ARREGION);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARUSER(m_axi_base_ddr_addr_ARUSER);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->RVALID(m_axi_base_ddr_addr_RVALID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->RREADY(m_axi_base_ddr_addr_RREADY);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->RDATA(m_axi_base_ddr_addr_RDATA);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->RLAST(m_axi_base_ddr_addr_RLAST);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->RID(m_axi_base_ddr_addr_RID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->RUSER(m_axi_base_ddr_addr_RUSER);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->RRESP(m_axi_base_ddr_addr_RRESP);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->BVALID(m_axi_base_ddr_addr_BVALID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->BREADY(m_axi_base_ddr_addr_BREADY);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->BRESP(m_axi_base_ddr_addr_BRESP);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->BID(m_axi_base_ddr_addr_BID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->BUSER(m_axi_base_ddr_addr_BUSER);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ACLK(ap_clk);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ARESET(ap_rst_n_inv);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->ACLK_EN(ap_var_for_const0);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARVALID(base_ddr_addr_ARVALID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARREADY(base_ddr_addr_ARREADY);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARADDR(base_ddr_addr_ARADDR);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARID(ap_var_for_const1);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARLEN(ap_var_for_const2);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARSIZE(ap_var_for_const3);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARLOCK(ap_var_for_const4);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARCACHE(ap_var_for_const5);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARQOS(ap_var_for_const5);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARPROT(ap_var_for_const3);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARUSER(ap_var_for_const1);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARBURST(ap_var_for_const4);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_ARREGION(ap_var_for_const5);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_RVALID(base_ddr_addr_RVALID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_RREADY(base_ddr_addr_RREADY);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_RDATA(base_ddr_addr_RDATA);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_RID(base_ddr_addr_RID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_RUSER(base_ddr_addr_RUSER);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_RRESP(base_ddr_addr_RRESP);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_RLAST(base_ddr_addr_RLAST);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWVALID(ap_var_for_const6);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWREADY(base_ddr_addr_AWREADY);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWADDR(ap_var_for_const7);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWID(ap_var_for_const1);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWLEN(ap_var_for_const7);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWSIZE(ap_var_for_const3);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWLOCK(ap_var_for_const4);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWCACHE(ap_var_for_const5);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWQOS(ap_var_for_const5);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWPROT(ap_var_for_const3);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWUSER(ap_var_for_const1);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWBURST(ap_var_for_const4);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_AWREGION(ap_var_for_const5);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_WVALID(ap_var_for_const6);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_WREADY(base_ddr_addr_WREADY);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_WDATA(ap_var_for_const8);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_WID(ap_var_for_const1);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_WUSER(ap_var_for_const1);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_WLAST(ap_var_for_const6);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_WSTRB(ap_var_for_const9);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_BVALID(base_ddr_addr_BVALID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_BREADY(ap_var_for_const6);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_BRESP(base_ddr_addr_BRESP);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_BID(base_ddr_addr_BID);
    ddr_to_axis_reader_base_ddr_addr_m_axi_U->I_BUSER(base_ddr_addr_BUSER);
    buffer_U = new ddr_to_axis_readebkb("buffer_U");
    buffer_U->clk(ap_clk);
    buffer_U->reset(ap_rst_n_inv);
    buffer_U->address0(buffer_address0);
    buffer_U->ce0(buffer_ce0);
    buffer_U->q0(buffer_q0);
    buffer_U->address1(buffer_address1);
    buffer_U->ce1(buffer_ce1);
    buffer_U->we1(buffer_we1);
    buffer_U->d1(base_ddr_addr_addr_r_reg_564);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond1_reg_555 );
    sensitive << ( base_ddr_addr_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond1_reg_555 );
    sensitive << ( base_ddr_addr_RVALID );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state14_io );
    sensitive << ( ap_block_state15_io );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter1);
    sensitive << ( exitcond1_reg_555 );
    sensitive << ( base_ddr_addr_RVALID );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state13_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state14_io);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( tmp_7_reg_569 );

    SC_METHOD(thread_ap_block_state14_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state15_io);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( tmp_7_reg_569_pp1_iter1_reg );

    SC_METHOD(thread_ap_block_state15_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( exitcond_fu_278_p2 );
    sensitive << ( ap_sig_ioackin_base_ddr_addr_ARREADY );

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( exitcond1_fu_353_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state13);
    sensitive << ( tmp_7_fu_370_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_278_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_ap_phi_mux_indvar_phi_fu_225_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond1_reg_555 );
    sensitive << ( indvar_reg_221 );
    sensitive << ( indvar_next_reg_559 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_278_p2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_base_ddr_addr_ARREADY);
    sensitive << ( base_ddr_addr_ARREADY );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_ARREADY );

    SC_METHOD(thread_base_ddr_addr_ARADDR);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_278_p2 );
    sensitive << ( tmp_5_fu_290_p1 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_ARREADY );

    SC_METHOD(thread_base_ddr_addr_ARVALID);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_278_p2 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_ARREADY );

    SC_METHOD(thread_base_ddr_addr_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond1_reg_555 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_base_ddr_addr_blk_n_AR);
    sensitive << ( m_axi_base_ddr_addr_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_278_p2 );

    SC_METHOD(thread_base_ddr_addr_blk_n_R);
    sensitive << ( m_axi_base_ddr_addr_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond1_reg_555 );

    SC_METHOD(thread_buffer_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( gepindex2_cast_fu_396_p1 );

    SC_METHOD(thread_buffer_address1);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( indvar1_fu_365_p1 );

    SC_METHOD(thread_buffer_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_buffer_ce1);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_buffer_we1);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( exitcond1_reg_555_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_end_pos_fu_408_p2);
    sensitive << ( start_pos_fu_401_p3 );

    SC_METHOD(thread_exitcond1_fu_353_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_indvar_phi_fu_225_p4 );

    SC_METHOD(thread_exitcond_fu_278_p2);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( i_reg_210 );

    SC_METHOD(thread_frame_count);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( frame_count_inner );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_278_p2 );

    SC_METHOD(thread_frame_count_equals);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( frame_count_equals_i );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_278_p2 );
    sensitive << ( tmp_4_fu_326_p2 );

    SC_METHOD(thread_gepindex2_cast_fu_396_p1);
    sensitive << ( gepindex_cast_fu_386_p4 );

    SC_METHOD(thread_gepindex_cast_fu_386_p4);
    sensitive << ( j_reg_233 );

    SC_METHOD(thread_i_1_fu_284_p2);
    sensitive << ( i_reg_210 );

    SC_METHOD(thread_indvar1_fu_365_p1);
    sensitive << ( indvar_reg_221_pp0_iter1_reg );

    SC_METHOD(thread_indvar_next_fu_359_p2);
    sensitive << ( ap_phi_mux_indvar_phi_fu_225_p4 );

    SC_METHOD(thread_inner_index_V_2_fu_244_p2);
    sensitive << ( frame_index_V );

    SC_METHOD(thread_j_1_fu_376_p2);
    sensitive << ( j_reg_233 );

    SC_METHOD(thread_offset_fu_517_p2);
    sensitive << ( offset1_reg_200 );

    SC_METHOD(thread_outStream_V_1_ack_in);
    sensitive << ( outStream_V_1_state );

    SC_METHOD(thread_outStream_V_1_ack_out);
    sensitive << ( outStream_V_TREADY );

    SC_METHOD(thread_outStream_V_1_data_out);
    sensitive << ( outStream_V_1_payload_A );
    sensitive << ( outStream_V_1_payload_B );
    sensitive << ( outStream_V_1_sel );

    SC_METHOD(thread_outStream_V_1_load_A);
    sensitive << ( outStream_V_1_sel_wr );
    sensitive << ( outStream_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_1_load_B);
    sensitive << ( outStream_V_1_sel_wr );
    sensitive << ( outStream_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_1_sel);
    sensitive << ( outStream_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_1_state_cmp_full);
    sensitive << ( outStream_V_1_state );

    SC_METHOD(thread_outStream_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_7_reg_569 );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_outStream_V_1_vld_out);
    sensitive << ( outStream_V_1_state );

    SC_METHOD(thread_outStream_V_TDATA);
    sensitive << ( outStream_V_1_data_out );

    SC_METHOD(thread_outStream_V_TDATA_blk_n);
    sensitive << ( outStream_V_1_state );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_7_reg_569 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_7_reg_569_pp1_iter1_reg );

    SC_METHOD(thread_outStream_V_TVALID);
    sensitive << ( outStream_V_1_state );

    SC_METHOD(thread_start_pos_fu_401_p3);
    sensitive << ( tmp_8_reg_578 );

    SC_METHOD(thread_tmp_10_fu_414_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( tmp_7_reg_569 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( start_pos_fu_401_p3 );
    sensitive << ( end_pos_fu_408_p2 );

    SC_METHOD(thread_tmp_11_fu_420_p1);
    sensitive << ( start_pos_fu_401_p3 );

    SC_METHOD(thread_tmp_12_fu_424_p1);
    sensitive << ( end_pos_fu_408_p2 );

    SC_METHOD(thread_tmp_13_fu_428_p4);
    sensitive << ( buffer_q0 );

    SC_METHOD(thread_tmp_14_fu_438_p2);
    sensitive << ( tmp_11_fu_420_p1 );
    sensitive << ( tmp_12_fu_424_p1 );

    SC_METHOD(thread_tmp_15_fu_444_p2);
    sensitive << ( tmp_11_fu_420_p1 );

    SC_METHOD(thread_tmp_16_fu_450_p2);
    sensitive << ( tmp_11_fu_420_p1 );
    sensitive << ( tmp_12_fu_424_p1 );

    SC_METHOD(thread_tmp_17_fu_456_p3);
    sensitive << ( tmp_10_fu_414_p2 );
    sensitive << ( tmp_14_fu_438_p2 );
    sensitive << ( tmp_16_fu_450_p2 );

    SC_METHOD(thread_tmp_18_fu_464_p3);
    sensitive << ( buffer_q0 );
    sensitive << ( tmp_10_fu_414_p2 );
    sensitive << ( tmp_13_fu_428_p4 );

    SC_METHOD(thread_tmp_19_fu_472_p3);
    sensitive << ( tmp_11_fu_420_p1 );
    sensitive << ( tmp_10_fu_414_p2 );
    sensitive << ( tmp_15_fu_444_p2 );

    SC_METHOD(thread_tmp_1_fu_262_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_262_p00 );

    SC_METHOD(thread_tmp_1_fu_262_p00);
    sensitive << ( inner_index_V_2_fu_244_p2 );

    SC_METHOD(thread_tmp_1_fu_262_p2);
    sensitive << ( tmp_1_fu_262_p0 );

    SC_METHOD(thread_tmp_20_fu_480_p2);
    sensitive << ( tmp_17_fu_456_p3 );

    SC_METHOD(thread_tmp_21_fu_486_p1);
    sensitive << ( tmp_19_fu_472_p3 );

    SC_METHOD(thread_tmp_22_fu_490_p1);
    sensitive << ( tmp_20_fu_480_p2 );

    SC_METHOD(thread_tmp_23_fu_494_p2);
    sensitive << ( tmp_18_fu_464_p3 );
    sensitive << ( tmp_21_fu_486_p1 );

    SC_METHOD(thread_tmp_24_fu_500_p2);
    sensitive << ( tmp_22_fu_490_p1 );

    SC_METHOD(thread_tmp_25_fu_506_p2);
    sensitive << ( tmp_23_fu_494_p2 );
    sensitive << ( tmp_24_fu_500_p2 );

    SC_METHOD(thread_tmp_26_fu_512_p1);
    sensitive << ( tmp_25_fu_506_p2 );

    SC_METHOD(thread_tmp_2_fu_322_p1);
    sensitive << ( index_old );

    SC_METHOD(thread_tmp_3_fu_305_p2);
    sensitive << ( frame_count_inner );

    SC_METHOD(thread_tmp_4_fu_326_p2);
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_278_p2 );
    sensitive << ( tmp_cast_reg_528 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( tmp_2_fu_322_p1 );

    SC_METHOD(thread_tmp_5_fu_290_p1);
    sensitive << ( offset1_reg_200 );

    SC_METHOD(thread_tmp_6_fu_335_p2);
    sensitive << ( frame_count_equals_i );

    SC_METHOD(thread_tmp_7_fu_370_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( j_reg_233 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_tmp_8_fu_382_p1);
    sensitive << ( j_reg_233 );

    SC_METHOD(thread_tmp_cast_fu_258_p1);
    sensitive << ( inner_index_V_2_fu_244_p2 );

    SC_METHOD(thread_tmp_fu_250_p1);
    sensitive << ( inner_index_V_2_fu_244_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( outStream_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_278_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state2_io );
    sensitive << ( exitcond1_fu_353_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_7_fu_370_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp1_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const9);

    ap_CS_fsm = "000000000001";
    outStream_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_1_state = "00";
    frame_count_inner = "00000000000000000000000000000000";
    index_old = "11111111111111111111111111111111";
    frame_count_equals_i = "00000000000000000000000000000000";
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_reg_ioackin_base_ddr_addr_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ddr_to_axis_reader_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, outStream_V_TDATA, "(port)outStream_V_TDATA");
    sc_trace(mVcdFile, outStream_V_TVALID, "(port)outStream_V_TVALID");
    sc_trace(mVcdFile, outStream_V_TREADY, "(port)outStream_V_TREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWVALID, "(port)m_axi_base_ddr_addr_AWVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWREADY, "(port)m_axi_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWADDR, "(port)m_axi_base_ddr_addr_AWADDR");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWID, "(port)m_axi_base_ddr_addr_AWID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWLEN, "(port)m_axi_base_ddr_addr_AWLEN");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWSIZE, "(port)m_axi_base_ddr_addr_AWSIZE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWBURST, "(port)m_axi_base_ddr_addr_AWBURST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWLOCK, "(port)m_axi_base_ddr_addr_AWLOCK");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWCACHE, "(port)m_axi_base_ddr_addr_AWCACHE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWPROT, "(port)m_axi_base_ddr_addr_AWPROT");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWQOS, "(port)m_axi_base_ddr_addr_AWQOS");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWREGION, "(port)m_axi_base_ddr_addr_AWREGION");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWUSER, "(port)m_axi_base_ddr_addr_AWUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WVALID, "(port)m_axi_base_ddr_addr_WVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WREADY, "(port)m_axi_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WDATA, "(port)m_axi_base_ddr_addr_WDATA");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WSTRB, "(port)m_axi_base_ddr_addr_WSTRB");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WLAST, "(port)m_axi_base_ddr_addr_WLAST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WID, "(port)m_axi_base_ddr_addr_WID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WUSER, "(port)m_axi_base_ddr_addr_WUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARVALID, "(port)m_axi_base_ddr_addr_ARVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARREADY, "(port)m_axi_base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARADDR, "(port)m_axi_base_ddr_addr_ARADDR");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARID, "(port)m_axi_base_ddr_addr_ARID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARLEN, "(port)m_axi_base_ddr_addr_ARLEN");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARSIZE, "(port)m_axi_base_ddr_addr_ARSIZE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARBURST, "(port)m_axi_base_ddr_addr_ARBURST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARLOCK, "(port)m_axi_base_ddr_addr_ARLOCK");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARCACHE, "(port)m_axi_base_ddr_addr_ARCACHE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARPROT, "(port)m_axi_base_ddr_addr_ARPROT");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARQOS, "(port)m_axi_base_ddr_addr_ARQOS");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARREGION, "(port)m_axi_base_ddr_addr_ARREGION");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARUSER, "(port)m_axi_base_ddr_addr_ARUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RVALID, "(port)m_axi_base_ddr_addr_RVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RREADY, "(port)m_axi_base_ddr_addr_RREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RDATA, "(port)m_axi_base_ddr_addr_RDATA");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RLAST, "(port)m_axi_base_ddr_addr_RLAST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RID, "(port)m_axi_base_ddr_addr_RID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RUSER, "(port)m_axi_base_ddr_addr_RUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RRESP, "(port)m_axi_base_ddr_addr_RRESP");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BVALID, "(port)m_axi_base_ddr_addr_BVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BREADY, "(port)m_axi_base_ddr_addr_BREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BRESP, "(port)m_axi_base_ddr_addr_BRESP");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BID, "(port)m_axi_base_ddr_addr_BID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BUSER, "(port)m_axi_base_ddr_addr_BUSER");
    sc_trace(mVcdFile, frame_index_V, "(port)frame_index_V");
    sc_trace(mVcdFile, frame_count, "(port)frame_count");
    sc_trace(mVcdFile, frame_count_equals, "(port)frame_count_equals");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, outStream_V_1_data_out, "outStream_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_1_vld_in, "outStream_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_1_vld_out, "outStream_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_1_ack_in, "outStream_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_1_ack_out, "outStream_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_1_payload_A, "outStream_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_1_payload_B, "outStream_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_1_sel_rd, "outStream_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_1_sel_wr, "outStream_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_1_sel, "outStream_V_1_sel");
    sc_trace(mVcdFile, outStream_V_1_load_A, "outStream_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_1_load_B, "outStream_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_1_state, "outStream_V_1_state");
    sc_trace(mVcdFile, outStream_V_1_state_cmp_full, "outStream_V_1_state_cmp_full");
    sc_trace(mVcdFile, frame_count_inner, "frame_count_inner");
    sc_trace(mVcdFile, index_old, "index_old");
    sc_trace(mVcdFile, frame_count_equals_i, "frame_count_equals_i");
    sc_trace(mVcdFile, outStream_V_TDATA_blk_n, "outStream_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, tmp_7_reg_569, "tmp_7_reg_569");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, tmp_7_reg_569_pp1_iter1_reg, "tmp_7_reg_569_pp1_iter1_reg");
    sc_trace(mVcdFile, base_ddr_addr_blk_n_AR, "base_ddr_addr_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_278_p2, "exitcond_fu_278_p2");
    sc_trace(mVcdFile, base_ddr_addr_blk_n_R, "base_ddr_addr_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond1_reg_555, "exitcond1_reg_555");
    sc_trace(mVcdFile, base_ddr_addr_AWREADY, "base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, base_ddr_addr_WREADY, "base_ddr_addr_WREADY");
    sc_trace(mVcdFile, base_ddr_addr_ARVALID, "base_ddr_addr_ARVALID");
    sc_trace(mVcdFile, base_ddr_addr_ARREADY, "base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, base_ddr_addr_ARADDR, "base_ddr_addr_ARADDR");
    sc_trace(mVcdFile, base_ddr_addr_RVALID, "base_ddr_addr_RVALID");
    sc_trace(mVcdFile, base_ddr_addr_RREADY, "base_ddr_addr_RREADY");
    sc_trace(mVcdFile, base_ddr_addr_RDATA, "base_ddr_addr_RDATA");
    sc_trace(mVcdFile, base_ddr_addr_RLAST, "base_ddr_addr_RLAST");
    sc_trace(mVcdFile, base_ddr_addr_RID, "base_ddr_addr_RID");
    sc_trace(mVcdFile, base_ddr_addr_RUSER, "base_ddr_addr_RUSER");
    sc_trace(mVcdFile, base_ddr_addr_RRESP, "base_ddr_addr_RRESP");
    sc_trace(mVcdFile, base_ddr_addr_BVALID, "base_ddr_addr_BVALID");
    sc_trace(mVcdFile, base_ddr_addr_BRESP, "base_ddr_addr_BRESP");
    sc_trace(mVcdFile, base_ddr_addr_BID, "base_ddr_addr_BID");
    sc_trace(mVcdFile, base_ddr_addr_BUSER, "base_ddr_addr_BUSER");
    sc_trace(mVcdFile, indvar_reg_221, "indvar_reg_221");
    sc_trace(mVcdFile, indvar_reg_221_pp0_iter1_reg, "indvar_reg_221_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter1, "ap_block_state10_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter2, "ap_block_state11_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_reg_233, "j_reg_233");
    sc_trace(mVcdFile, tmp_fu_250_p1, "tmp_fu_250_p1");
    sc_trace(mVcdFile, tmp_reg_523, "tmp_reg_523");
    sc_trace(mVcdFile, tmp_cast_fu_258_p1, "tmp_cast_fu_258_p1");
    sc_trace(mVcdFile, tmp_cast_reg_528, "tmp_cast_reg_528");
    sc_trace(mVcdFile, i_1_fu_284_p2, "i_1_fu_284_p2");
    sc_trace(mVcdFile, i_1_reg_541, "i_1_reg_541");
    sc_trace(mVcdFile, ap_sig_ioackin_base_ddr_addr_ARREADY, "ap_sig_ioackin_base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, exitcond1_fu_353_p2, "exitcond1_fu_353_p2");
    sc_trace(mVcdFile, exitcond1_reg_555_pp0_iter1_reg, "exitcond1_reg_555_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_next_fu_359_p2, "indvar_next_fu_359_p2");
    sc_trace(mVcdFile, indvar_next_reg_559, "indvar_next_reg_559");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, base_ddr_addr_addr_r_reg_564, "base_ddr_addr_addr_r_reg_564");
    sc_trace(mVcdFile, tmp_7_fu_370_p2, "tmp_7_fu_370_p2");
    sc_trace(mVcdFile, ap_block_state13_pp1_stage0_iter0, "ap_block_state13_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state14_pp1_stage0_iter1, "ap_block_state14_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state14_io, "ap_block_state14_io");
    sc_trace(mVcdFile, ap_block_state15_pp1_stage0_iter2, "ap_block_state15_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state15_io, "ap_block_state15_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, j_1_fu_376_p2, "j_1_fu_376_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, tmp_8_fu_382_p1, "tmp_8_fu_382_p1");
    sc_trace(mVcdFile, tmp_8_reg_578, "tmp_8_reg_578");
    sc_trace(mVcdFile, tmp_26_fu_512_p1, "tmp_26_fu_512_p1");
    sc_trace(mVcdFile, offset_fu_517_p2, "offset_fu_517_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state13, "ap_condition_pp1_exit_iter0_state13");
    sc_trace(mVcdFile, buffer_address0, "buffer_address0");
    sc_trace(mVcdFile, buffer_ce0, "buffer_ce0");
    sc_trace(mVcdFile, buffer_q0, "buffer_q0");
    sc_trace(mVcdFile, buffer_address1, "buffer_address1");
    sc_trace(mVcdFile, buffer_ce1, "buffer_ce1");
    sc_trace(mVcdFile, buffer_we1, "buffer_we1");
    sc_trace(mVcdFile, offset1_reg_200, "offset1_reg_200");
    sc_trace(mVcdFile, i_reg_210, "i_reg_210");
    sc_trace(mVcdFile, ap_phi_mux_indvar_phi_fu_225_p4, "ap_phi_mux_indvar_phi_fu_225_p4");
    sc_trace(mVcdFile, indvar1_fu_365_p1, "indvar1_fu_365_p1");
    sc_trace(mVcdFile, gepindex2_cast_fu_396_p1, "gepindex2_cast_fu_396_p1");
    sc_trace(mVcdFile, tmp_5_fu_290_p1, "tmp_5_fu_290_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_base_ddr_addr_ARREADY, "ap_reg_ioackin_base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, tmp_3_fu_305_p2, "tmp_3_fu_305_p2");
    sc_trace(mVcdFile, tmp_6_fu_335_p2, "tmp_6_fu_335_p2");
    sc_trace(mVcdFile, tmp_4_fu_326_p2, "tmp_4_fu_326_p2");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, inner_index_V_2_fu_244_p2, "inner_index_V_2_fu_244_p2");
    sc_trace(mVcdFile, tmp_1_fu_262_p0, "tmp_1_fu_262_p0");
    sc_trace(mVcdFile, tmp_1_fu_262_p2, "tmp_1_fu_262_p2");
    sc_trace(mVcdFile, tmp_2_fu_322_p1, "tmp_2_fu_322_p1");
    sc_trace(mVcdFile, gepindex_cast_fu_386_p4, "gepindex_cast_fu_386_p4");
    sc_trace(mVcdFile, start_pos_fu_401_p3, "start_pos_fu_401_p3");
    sc_trace(mVcdFile, end_pos_fu_408_p2, "end_pos_fu_408_p2");
    sc_trace(mVcdFile, tmp_11_fu_420_p1, "tmp_11_fu_420_p1");
    sc_trace(mVcdFile, tmp_12_fu_424_p1, "tmp_12_fu_424_p1");
    sc_trace(mVcdFile, tmp_10_fu_414_p2, "tmp_10_fu_414_p2");
    sc_trace(mVcdFile, tmp_14_fu_438_p2, "tmp_14_fu_438_p2");
    sc_trace(mVcdFile, tmp_16_fu_450_p2, "tmp_16_fu_450_p2");
    sc_trace(mVcdFile, tmp_13_fu_428_p4, "tmp_13_fu_428_p4");
    sc_trace(mVcdFile, tmp_15_fu_444_p2, "tmp_15_fu_444_p2");
    sc_trace(mVcdFile, tmp_17_fu_456_p3, "tmp_17_fu_456_p3");
    sc_trace(mVcdFile, tmp_19_fu_472_p3, "tmp_19_fu_472_p3");
    sc_trace(mVcdFile, tmp_20_fu_480_p2, "tmp_20_fu_480_p2");
    sc_trace(mVcdFile, tmp_18_fu_464_p3, "tmp_18_fu_464_p3");
    sc_trace(mVcdFile, tmp_21_fu_486_p1, "tmp_21_fu_486_p1");
    sc_trace(mVcdFile, tmp_22_fu_490_p1, "tmp_22_fu_490_p1");
    sc_trace(mVcdFile, tmp_23_fu_494_p2, "tmp_23_fu_494_p2");
    sc_trace(mVcdFile, tmp_24_fu_500_p2, "tmp_24_fu_500_p2");
    sc_trace(mVcdFile, tmp_25_fu_506_p2, "tmp_25_fu_506_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, tmp_1_fu_262_p00, "tmp_1_fu_262_p00");
#endif

    }
    mHdltvinHandle.open("ddr_to_axis_reader.hdltvin.dat");
    mHdltvoutHandle.open("ddr_to_axis_reader.hdltvout.dat");
}

ddr_to_axis_reader::~ddr_to_axis_reader() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ddr_to_axis_reader_base_ddr_addr_m_axi_U;
    delete buffer_U;
}

void ddr_to_axis_reader::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ddr_to_axis_reader::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void ddr_to_axis_reader::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_0;
}

void ddr_to_axis_reader::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void ddr_to_axis_reader::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void ddr_to_axis_reader::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_200;
}

void ddr_to_axis_reader::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void ddr_to_axis_reader::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void ddr_to_axis_reader::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv64_0;
}

void ddr_to_axis_reader::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv8_0;
}

void ddr_to_axis_reader::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state13.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state13.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_base_ddr_addr_ARREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_0))) {
            if (!(esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read()))) {
                ap_reg_ioackin_base_ddr_addr_ARREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, base_ddr_addr_ARREADY.read()) && 
                        esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_reg_ioackin_base_ddr_addr_ARREADY = ap_const_logic_1;
            }
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        i_reg_210 = i_1_reg_541.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_210 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_555.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_reg_221 = indvar_next_reg_559.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        indvar_reg_221 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        j_reg_233 = ap_const_lv13_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_370_p2.read()))) {
        j_reg_233 = j_1_fu_376_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        offset1_reg_200 = offset_fu_517_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        offset1_reg_200 = tmp_1_fu_262_p2.read().range(21, 3);
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_vld_out.read()))) {
            outStream_V_1_sel_rd =  (sc_logic) (~outStream_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_ack_in.read()))) {
            outStream_V_1_sel_wr =  (sc_logic) (~outStream_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(outStream_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(outStream_V_1_state.read(), ap_const_lv2_2)))) {
            outStream_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outStream_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outStream_V_1_state.read(), ap_const_lv2_1)))) {
            outStream_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(outStream_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outStream_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(outStream_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_ack_out.read()))))) {
            outStream_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_555.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        base_ddr_addr_addr_r_reg_564 = base_ddr_addr_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond1_reg_555 = exitcond1_fu_353_p2.read();
        exitcond1_reg_555_pp0_iter1_reg = exitcond1_reg_555.read();
        indvar_reg_221_pp0_iter1_reg = indvar_reg_221.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_326_p2.read()))) {
        frame_count_equals_i = tmp_6_fu_335_p2.read();
    }
    if ((!(esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        frame_count_inner = tmp_3_fu_305_p2.read();
        index_old = tmp_reg_523.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        i_1_reg_541 = i_1_fu_284_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        indvar_next_reg_559 = indvar_next_fu_359_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_load_A.read())) {
        outStream_V_1_payload_A = tmp_26_fu_512_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_load_B.read())) {
        outStream_V_1_payload_B = tmp_26_fu_512_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_7_reg_569 = tmp_7_fu_370_p2.read();
        tmp_7_reg_569_pp1_iter1_reg = tmp_7_reg_569.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_370_p2.read()))) {
        tmp_8_reg_578 = tmp_8_fu_382_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_cast_reg_528 = tmp_cast_fu_258_p1.read();
        tmp_reg_523 = tmp_fu_250_p1.read();
    }
}

void ddr_to_axis_reader::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void ddr_to_axis_reader::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[10];
}

void ddr_to_axis_reader::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ddr_to_axis_reader::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[9];
}

void ddr_to_axis_reader::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[11];
}

void ddr_to_axis_reader::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ddr_to_axis_reader::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void ddr_to_axis_reader::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ddr_to_axis_reader::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_555.read()) && esl_seteq<1,1,1>(ap_const_logic_0, base_ddr_addr_RVALID.read()));
}

void ddr_to_axis_reader::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_555.read()) && esl_seteq<1,1,1>(ap_const_logic_0, base_ddr_addr_RVALID.read()));
}

void ddr_to_axis_reader::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ddr_to_axis_reader::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ddr_to_axis_reader::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())));
}

void ddr_to_axis_reader::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state14_io.read())) || (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())));
}

void ddr_to_axis_reader::thread_ap_block_state10_pp0_stage0_iter1() {
    ap_block_state10_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_555.read()) && esl_seteq<1,1,1>(ap_const_logic_0, base_ddr_addr_RVALID.read()));
}

void ddr_to_axis_reader::thread_ap_block_state11_pp0_stage0_iter2() {
    ap_block_state11_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ddr_to_axis_reader::thread_ap_block_state13_pp1_stage0_iter0() {
    ap_block_state13_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ddr_to_axis_reader::thread_ap_block_state14_io() {
    ap_block_state14_io = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_reg_569.read()) && esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0));
}

void ddr_to_axis_reader::thread_ap_block_state14_pp1_stage0_iter1() {
    ap_block_state14_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ddr_to_axis_reader::thread_ap_block_state15_io() {
    ap_block_state15_io = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_reg_569_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0));
}

void ddr_to_axis_reader::thread_ap_block_state15_pp1_stage0_iter2() {
    ap_block_state15_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ddr_to_axis_reader::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_ARREADY.read()));
}

void ddr_to_axis_reader::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ddr_to_axis_reader::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(exitcond1_fu_353_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_ap_condition_pp1_exit_iter0_state13() {
    if (esl_seteq<1,1,1>(tmp_7_fu_370_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state13 = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_ap_done() {
    if ((!(esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
         esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void ddr_to_axis_reader::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void ddr_to_axis_reader::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_ap_phi_mux_indvar_phi_fu_225_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_555.read()))) {
        ap_phi_mux_indvar_phi_fu_225_p4 = indvar_next_reg_559.read();
    } else {
        ap_phi_mux_indvar_phi_fu_225_p4 = indvar_reg_221.read();
    }
}

void ddr_to_axis_reader::thread_ap_ready() {
    if ((!(esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && 
         esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ddr_to_axis_reader::thread_ap_sig_ioackin_base_ddr_addr_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_ARREADY.read())) {
        ap_sig_ioackin_base_ddr_addr_ARREADY = base_ddr_addr_ARREADY.read();
    } else {
        ap_sig_ioackin_base_ddr_addr_ARREADY = ap_const_logic_1;
    }
}

void ddr_to_axis_reader::thread_base_ddr_addr_ARADDR() {
    base_ddr_addr_ARADDR =  (sc_lv<32>) (tmp_5_fu_290_p1.read());
}

void ddr_to_axis_reader::thread_base_ddr_addr_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_ARREADY.read()))) {
        base_ddr_addr_ARVALID = ap_const_logic_1;
    } else {
        base_ddr_addr_ARVALID = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_base_ddr_addr_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_555.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        base_ddr_addr_RREADY = ap_const_logic_1;
    } else {
        base_ddr_addr_RREADY = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_base_ddr_addr_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_0))) {
        base_ddr_addr_blk_n_AR = m_axi_base_ddr_addr_ARREADY.read();
    } else {
        base_ddr_addr_blk_n_AR = ap_const_logic_1;
    }
}

void ddr_to_axis_reader::thread_base_ddr_addr_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_555.read()))) {
        base_ddr_addr_blk_n_R = m_axi_base_ddr_addr_RVALID.read();
    } else {
        base_ddr_addr_blk_n_R = ap_const_logic_1;
    }
}

void ddr_to_axis_reader::thread_buffer_address0() {
    buffer_address0 =  (sc_lv<9>) (gepindex2_cast_fu_396_p1.read());
}

void ddr_to_axis_reader::thread_buffer_address1() {
    buffer_address1 =  (sc_lv<9>) (indvar1_fu_365_p1.read());
}

void ddr_to_axis_reader::thread_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1))) {
        buffer_ce0 = ap_const_logic_1;
    } else {
        buffer_ce0 = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_buffer_ce1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1))) {
        buffer_ce1 = ap_const_logic_1;
    } else {
        buffer_ce1 = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_buffer_we1() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_555_pp0_iter1_reg.read()))) {
        buffer_we1 = ap_const_logic_1;
    } else {
        buffer_we1 = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_end_pos_fu_408_p2() {
    end_pos_fu_408_p2 = (start_pos_fu_401_p3.read() | ap_const_lv6_7);
}

void ddr_to_axis_reader::thread_exitcond1_fu_353_p2() {
    exitcond1_fu_353_p2 = (!ap_phi_mux_indvar_phi_fu_225_p4.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar_phi_fu_225_p4.read() == ap_const_lv10_200);
}

void ddr_to_axis_reader::thread_exitcond_fu_278_p2() {
    exitcond_fu_278_p2 = (!i_reg_210.read().is_01() || !ap_const_lv7_4B.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_210.read() == ap_const_lv7_4B);
}

void ddr_to_axis_reader::thread_frame_count() {
    frame_count = (!ap_const_lv32_1.is_01() || !frame_count_inner.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(frame_count_inner.read()));
}

void ddr_to_axis_reader::thread_frame_count_equals() {
    frame_count_equals = (!frame_count_equals_i.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(frame_count_equals_i.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void ddr_to_axis_reader::thread_gepindex2_cast_fu_396_p1() {
    gepindex2_cast_fu_396_p1 = esl_zext<64,9>(gepindex_cast_fu_386_p4.read());
}

void ddr_to_axis_reader::thread_gepindex_cast_fu_386_p4() {
    gepindex_cast_fu_386_p4 = j_reg_233.read().range(11, 3);
}

void ddr_to_axis_reader::thread_i_1_fu_284_p2() {
    i_1_fu_284_p2 = (!i_reg_210.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(i_reg_210.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void ddr_to_axis_reader::thread_indvar1_fu_365_p1() {
    indvar1_fu_365_p1 = esl_zext<64,10>(indvar_reg_221_pp0_iter1_reg.read());
}

void ddr_to_axis_reader::thread_indvar_next_fu_359_p2() {
    indvar_next_fu_359_p2 = (!ap_phi_mux_indvar_phi_fu_225_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(ap_phi_mux_indvar_phi_fu_225_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void ddr_to_axis_reader::thread_inner_index_V_2_fu_244_p2() {
    inner_index_V_2_fu_244_p2 = (!frame_index_V.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<3>(): (sc_biguint<3>(frame_index_V.read()) + sc_bigint<3>(ap_const_lv3_7));
}

void ddr_to_axis_reader::thread_j_1_fu_376_p2() {
    j_1_fu_376_p2 = (!j_reg_233.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(j_reg_233.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void ddr_to_axis_reader::thread_offset_fu_517_p2() {
    offset_fu_517_p2 = (!offset1_reg_200.read().is_01() || !ap_const_lv19_200.is_01())? sc_lv<19>(): (sc_biguint<19>(offset1_reg_200.read()) + sc_biguint<19>(ap_const_lv19_200));
}

void ddr_to_axis_reader::thread_outStream_V_1_ack_in() {
    outStream_V_1_ack_in = outStream_V_1_state.read()[1];
}

void ddr_to_axis_reader::thread_outStream_V_1_ack_out() {
    outStream_V_1_ack_out = outStream_V_TREADY.read();
}

void ddr_to_axis_reader::thread_outStream_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_1_sel.read())) {
        outStream_V_1_data_out = outStream_V_1_payload_B.read();
    } else {
        outStream_V_1_data_out = outStream_V_1_payload_A.read();
    }
}

void ddr_to_axis_reader::thread_outStream_V_1_load_A() {
    outStream_V_1_load_A = (outStream_V_1_state_cmp_full.read() & ~outStream_V_1_sel_wr.read());
}

void ddr_to_axis_reader::thread_outStream_V_1_load_B() {
    outStream_V_1_load_B = (outStream_V_1_sel_wr.read() & outStream_V_1_state_cmp_full.read());
}

void ddr_to_axis_reader::thread_outStream_V_1_sel() {
    outStream_V_1_sel = outStream_V_1_sel_rd.read();
}

void ddr_to_axis_reader::thread_outStream_V_1_state_cmp_full() {
    outStream_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_1_state.read() != ap_const_lv2_1))[0];
}

void ddr_to_axis_reader::thread_outStream_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_reg_569.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        outStream_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_1_vld_in = ap_const_logic_0;
    }
}

void ddr_to_axis_reader::thread_outStream_V_1_vld_out() {
    outStream_V_1_vld_out = outStream_V_1_state.read()[0];
}

void ddr_to_axis_reader::thread_outStream_V_TDATA() {
    outStream_V_TDATA = outStream_V_1_data_out.read();
}

void ddr_to_axis_reader::thread_outStream_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_reg_569.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_reg_569_pp1_iter1_reg.read())))) {
        outStream_V_TDATA_blk_n = outStream_V_1_state.read()[1];
    } else {
        outStream_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void ddr_to_axis_reader::thread_outStream_V_TVALID() {
    outStream_V_TVALID = outStream_V_1_state.read()[0];
}

void ddr_to_axis_reader::thread_start_pos_fu_401_p3() {
    start_pos_fu_401_p3 = esl_concat<3,3>(tmp_8_reg_578.read(), ap_const_lv3_0);
}

void ddr_to_axis_reader::thread_tmp_10_fu_414_p2() {
    tmp_10_fu_414_p2 = (!start_pos_fu_401_p3.read().is_01() || !end_pos_fu_408_p2.read().is_01())? sc_lv<1>(): (sc_biguint<6>(start_pos_fu_401_p3.read()) > sc_biguint<6>(end_pos_fu_408_p2.read()));
}

void ddr_to_axis_reader::thread_tmp_11_fu_420_p1() {
    tmp_11_fu_420_p1 = esl_zext<7,6>(start_pos_fu_401_p3.read());
}

void ddr_to_axis_reader::thread_tmp_12_fu_424_p1() {
    tmp_12_fu_424_p1 = esl_zext<7,6>(end_pos_fu_408_p2.read());
}

void ddr_to_axis_reader::thread_tmp_13_fu_428_p4() {
    tmp_13_fu_428_p4 = buffer_q0.read().range(0, 63);
}

void ddr_to_axis_reader::thread_tmp_14_fu_438_p2() {
    tmp_14_fu_438_p2 = (!tmp_11_fu_420_p1.read().is_01() || !tmp_12_fu_424_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp_11_fu_420_p1.read()) - sc_biguint<7>(tmp_12_fu_424_p1.read()));
}

void ddr_to_axis_reader::thread_tmp_15_fu_444_p2() {
    tmp_15_fu_444_p2 = (tmp_11_fu_420_p1.read() ^ ap_const_lv7_3F);
}

void ddr_to_axis_reader::thread_tmp_16_fu_450_p2() {
    tmp_16_fu_450_p2 = (!tmp_12_fu_424_p1.read().is_01() || !tmp_11_fu_420_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp_12_fu_424_p1.read()) - sc_biguint<7>(tmp_11_fu_420_p1.read()));
}

void ddr_to_axis_reader::thread_tmp_17_fu_456_p3() {
    tmp_17_fu_456_p3 = (!tmp_10_fu_414_p2.read()[0].is_01())? sc_lv<7>(): ((tmp_10_fu_414_p2.read()[0].to_bool())? tmp_14_fu_438_p2.read(): tmp_16_fu_450_p2.read());
}

void ddr_to_axis_reader::thread_tmp_18_fu_464_p3() {
    tmp_18_fu_464_p3 = (!tmp_10_fu_414_p2.read()[0].is_01())? sc_lv<64>(): ((tmp_10_fu_414_p2.read()[0].to_bool())? tmp_13_fu_428_p4.read(): buffer_q0.read());
}

void ddr_to_axis_reader::thread_tmp_19_fu_472_p3() {
    tmp_19_fu_472_p3 = (!tmp_10_fu_414_p2.read()[0].is_01())? sc_lv<7>(): ((tmp_10_fu_414_p2.read()[0].to_bool())? tmp_15_fu_444_p2.read(): tmp_11_fu_420_p1.read());
}

void ddr_to_axis_reader::thread_tmp_1_fu_262_p0() {
    tmp_1_fu_262_p0 =  (sc_lv<3>) (tmp_1_fu_262_p00.read());
}

void ddr_to_axis_reader::thread_tmp_1_fu_262_p00() {
    tmp_1_fu_262_p00 = esl_zext<22,3>(inner_index_V_2_fu_244_p2.read());
}

void ddr_to_axis_reader::thread_tmp_1_fu_262_p2() {
    tmp_1_fu_262_p2 = (!tmp_1_fu_262_p0.read().is_01() || !ap_const_lv22_4B000.is_01())? sc_lv<22>(): sc_biguint<3>(tmp_1_fu_262_p0.read()) * sc_biguint<22>(ap_const_lv22_4B000);
}

void ddr_to_axis_reader::thread_tmp_20_fu_480_p2() {
    tmp_20_fu_480_p2 = (!ap_const_lv7_3F.is_01() || !tmp_17_fu_456_p3.read().is_01())? sc_lv<7>(): (sc_biguint<7>(ap_const_lv7_3F) - sc_biguint<7>(tmp_17_fu_456_p3.read()));
}

void ddr_to_axis_reader::thread_tmp_21_fu_486_p1() {
    tmp_21_fu_486_p1 = esl_zext<64,7>(tmp_19_fu_472_p3.read());
}

void ddr_to_axis_reader::thread_tmp_22_fu_490_p1() {
    tmp_22_fu_490_p1 = esl_zext<64,7>(tmp_20_fu_480_p2.read());
}

void ddr_to_axis_reader::thread_tmp_23_fu_494_p2() {
    tmp_23_fu_494_p2 = (!tmp_21_fu_486_p1.read().is_01())? sc_lv<64>(): tmp_18_fu_464_p3.read() >> (unsigned short)tmp_21_fu_486_p1.read().to_uint();
}

void ddr_to_axis_reader::thread_tmp_24_fu_500_p2() {
    tmp_24_fu_500_p2 = (!tmp_22_fu_490_p1.read().is_01())? sc_lv<64>(): ap_const_lv64_FFFFFFFFFFFFFFFF >> (unsigned short)tmp_22_fu_490_p1.read().to_uint();
}

void ddr_to_axis_reader::thread_tmp_25_fu_506_p2() {
    tmp_25_fu_506_p2 = (tmp_23_fu_494_p2.read() & tmp_24_fu_500_p2.read());
}

void ddr_to_axis_reader::thread_tmp_26_fu_512_p1() {
    tmp_26_fu_512_p1 = tmp_25_fu_506_p2.read().range(8-1, 0);
}

void ddr_to_axis_reader::thread_tmp_2_fu_322_p1() {
    tmp_2_fu_322_p1 = index_old.read().range(4-1, 0);
}

void ddr_to_axis_reader::thread_tmp_3_fu_305_p2() {
    tmp_3_fu_305_p2 = (!ap_const_lv32_1.is_01() || !frame_count_inner.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(frame_count_inner.read()));
}

void ddr_to_axis_reader::thread_tmp_4_fu_326_p2() {
    tmp_4_fu_326_p2 = (!tmp_cast_reg_528.read().is_01() || !tmp_2_fu_322_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_cast_reg_528.read() == tmp_2_fu_322_p1.read());
}

void ddr_to_axis_reader::thread_tmp_5_fu_290_p1() {
    tmp_5_fu_290_p1 = esl_zext<64,19>(offset1_reg_200.read());
}

void ddr_to_axis_reader::thread_tmp_6_fu_335_p2() {
    tmp_6_fu_335_p2 = (!frame_count_equals_i.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(frame_count_equals_i.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void ddr_to_axis_reader::thread_tmp_7_fu_370_p2() {
    tmp_7_fu_370_p2 = (!j_reg_233.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_233.read() == ap_const_lv13_1000);
}

void ddr_to_axis_reader::thread_tmp_8_fu_382_p1() {
    tmp_8_fu_382_p1 = j_reg_233.read().range(3-1, 0);
}

void ddr_to_axis_reader::thread_tmp_cast_fu_258_p1() {
    tmp_cast_fu_258_p1 = esl_zext<4,3>(inner_index_V_2_fu_244_p2.read());
}

void ddr_to_axis_reader::thread_tmp_fu_250_p1() {
    tmp_fu_250_p1 = esl_zext<32,3>(inner_index_V_2_fu_244_p2.read());
}

void ddr_to_axis_reader::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((!(esl_seteq<1,1,1>(outStream_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())) && esl_seteq<1,1,1>(exitcond_fu_278_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(exitcond1_fu_353_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(exitcond1_fu_353_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 1024 : 
            if ((!(esl_seteq<1,1,1>(tmp_7_fu_370_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_7_fu_370_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXX";
            break;
    }
}

void ddr_to_axis_reader::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_V_TDATA\" :  \"" << outStream_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_V_TVALID\" :  \"" << outStream_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_V_TREADY\" :  \"" << outStream_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWVALID\" :  \"" << m_axi_base_ddr_addr_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_AWREADY\" :  \"" << m_axi_base_ddr_addr_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWADDR\" :  \"" << m_axi_base_ddr_addr_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWID\" :  \"" << m_axi_base_ddr_addr_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWLEN\" :  \"" << m_axi_base_ddr_addr_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWSIZE\" :  \"" << m_axi_base_ddr_addr_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWBURST\" :  \"" << m_axi_base_ddr_addr_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWLOCK\" :  \"" << m_axi_base_ddr_addr_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWCACHE\" :  \"" << m_axi_base_ddr_addr_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWPROT\" :  \"" << m_axi_base_ddr_addr_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWQOS\" :  \"" << m_axi_base_ddr_addr_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWREGION\" :  \"" << m_axi_base_ddr_addr_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWUSER\" :  \"" << m_axi_base_ddr_addr_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WVALID\" :  \"" << m_axi_base_ddr_addr_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_WREADY\" :  \"" << m_axi_base_ddr_addr_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WDATA\" :  \"" << m_axi_base_ddr_addr_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WSTRB\" :  \"" << m_axi_base_ddr_addr_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WLAST\" :  \"" << m_axi_base_ddr_addr_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WID\" :  \"" << m_axi_base_ddr_addr_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WUSER\" :  \"" << m_axi_base_ddr_addr_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARVALID\" :  \"" << m_axi_base_ddr_addr_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_ARREADY\" :  \"" << m_axi_base_ddr_addr_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARADDR\" :  \"" << m_axi_base_ddr_addr_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARID\" :  \"" << m_axi_base_ddr_addr_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARLEN\" :  \"" << m_axi_base_ddr_addr_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARSIZE\" :  \"" << m_axi_base_ddr_addr_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARBURST\" :  \"" << m_axi_base_ddr_addr_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARLOCK\" :  \"" << m_axi_base_ddr_addr_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARCACHE\" :  \"" << m_axi_base_ddr_addr_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARPROT\" :  \"" << m_axi_base_ddr_addr_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARQOS\" :  \"" << m_axi_base_ddr_addr_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARREGION\" :  \"" << m_axi_base_ddr_addr_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARUSER\" :  \"" << m_axi_base_ddr_addr_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RVALID\" :  \"" << m_axi_base_ddr_addr_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_RREADY\" :  \"" << m_axi_base_ddr_addr_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RDATA\" :  \"" << m_axi_base_ddr_addr_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RLAST\" :  \"" << m_axi_base_ddr_addr_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RID\" :  \"" << m_axi_base_ddr_addr_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RUSER\" :  \"" << m_axi_base_ddr_addr_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RRESP\" :  \"" << m_axi_base_ddr_addr_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BVALID\" :  \"" << m_axi_base_ddr_addr_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_BREADY\" :  \"" << m_axi_base_ddr_addr_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BRESP\" :  \"" << m_axi_base_ddr_addr_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BID\" :  \"" << m_axi_base_ddr_addr_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BUSER\" :  \"" << m_axi_base_ddr_addr_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"frame_index_V\" :  \"" << frame_index_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frame_count\" :  \"" << frame_count.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frame_count_equals\" :  \"" << frame_count_equals.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

