-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ddr_to_axis_reader is
generic (
    C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BASE_DDR_ADDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outStream_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_V_TVALID : OUT STD_LOGIC;
    outStream_V_TREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_AWREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH/8-1 downto 0);
    m_axi_base_ddr_addr_WLAST : OUT STD_LOGIC;
    m_axi_base_ddr_addr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARVALID : OUT STD_LOGIC;
    m_axi_base_ddr_addr_ARREADY : IN STD_LOGIC;
    m_axi_base_ddr_addr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_base_ddr_addr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_base_ddr_addr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_base_ddr_addr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_RREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RLAST : IN STD_LOGIC;
    m_axi_base_ddr_addr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BVALID : IN STD_LOGIC;
    m_axi_base_ddr_addr_BREADY : OUT STD_LOGIC;
    m_axi_base_ddr_addr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_base_ddr_addr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_ID_WIDTH-1 downto 0);
    m_axi_base_ddr_addr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH-1 downto 0);
    frame_index_V : IN STD_LOGIC_VECTOR (2 downto 0);
    frame_count : OUT STD_LOGIC_VECTOR (31 downto 0);
    frame_count_equals : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ddr_to_axis_reader is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ddr_to_axis_reader,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=346576,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=1,HLS_SYN_FF=854,HLS_SYN_LUT=1783}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv22_4B000 : STD_LOGIC_VECTOR (21 downto 0) := "0001001011000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv7_4B : STD_LOGIC_VECTOR (6 downto 0) := "1001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv19_200 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal outStream_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_1_vld_in : STD_LOGIC;
    signal outStream_V_1_vld_out : STD_LOGIC;
    signal outStream_V_1_ack_in : STD_LOGIC;
    signal outStream_V_1_ack_out : STD_LOGIC;
    signal outStream_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_1_sel : STD_LOGIC;
    signal outStream_V_1_load_A : STD_LOGIC;
    signal outStream_V_1_load_B : STD_LOGIC;
    signal outStream_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_1_state_cmp_full : STD_LOGIC;
    signal frame_count_inner : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal index_old : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    signal frame_count_equals_i : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outStream_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_7_reg_569 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal tmp_7_reg_569_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_AWREADY : STD_LOGIC;
    signal base_ddr_addr_WREADY : STD_LOGIC;
    signal base_ddr_addr_ARVALID : STD_LOGIC;
    signal base_ddr_addr_ARREADY : STD_LOGIC;
    signal base_ddr_addr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal base_ddr_addr_RVALID : STD_LOGIC;
    signal base_ddr_addr_RREADY : STD_LOGIC;
    signal base_ddr_addr_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal base_ddr_addr_RLAST : STD_LOGIC;
    signal base_ddr_addr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BVALID : STD_LOGIC;
    signal base_ddr_addr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal base_ddr_addr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal base_ddr_addr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_reg_221 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_reg_221_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_reg_233 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_fu_258_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_reg_528 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_284_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_541 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_ioackin_base_ddr_addr_ARREADY : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal exitcond1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_555_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_359_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_next_reg_559 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal base_ddr_addr_addr_r_reg_564 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_1_fu_376_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_8_fu_382_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_reg_578 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_fu_512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal offset_fu_517_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce0 : STD_LOGIC;
    signal buffer_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal buffer_ce1 : STD_LOGIC;
    signal buffer_we1 : STD_LOGIC;
    signal offset1_reg_200 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_reg_210 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_indvar_phi_fu_225_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar1_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_base_ddr_addr_ARREADY : STD_LOGIC := '0';
    signal tmp_3_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal inner_index_V_2_fu_244_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_262_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_262_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_fu_322_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal gepindex_cast_fu_386_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal start_pos_fu_401_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal end_pos_fu_408_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_420_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_424_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_438_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_fu_450_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_428_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_444_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_456_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_472_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_480_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_464_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_494_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_500_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_506_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal tmp_1_fu_262_p00 : STD_LOGIC_VECTOR (21 downto 0);

    component ddr_to_axis_readebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ddr_to_axis_reader_base_ddr_addr_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ddr_to_axis_reader_base_ddr_addr_m_axi_U : component ddr_to_axis_reader_base_ddr_addr_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_BASE_DDR_ADDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_base_ddr_addr_AWVALID,
        AWREADY => m_axi_base_ddr_addr_AWREADY,
        AWADDR => m_axi_base_ddr_addr_AWADDR,
        AWID => m_axi_base_ddr_addr_AWID,
        AWLEN => m_axi_base_ddr_addr_AWLEN,
        AWSIZE => m_axi_base_ddr_addr_AWSIZE,
        AWBURST => m_axi_base_ddr_addr_AWBURST,
        AWLOCK => m_axi_base_ddr_addr_AWLOCK,
        AWCACHE => m_axi_base_ddr_addr_AWCACHE,
        AWPROT => m_axi_base_ddr_addr_AWPROT,
        AWQOS => m_axi_base_ddr_addr_AWQOS,
        AWREGION => m_axi_base_ddr_addr_AWREGION,
        AWUSER => m_axi_base_ddr_addr_AWUSER,
        WVALID => m_axi_base_ddr_addr_WVALID,
        WREADY => m_axi_base_ddr_addr_WREADY,
        WDATA => m_axi_base_ddr_addr_WDATA,
        WSTRB => m_axi_base_ddr_addr_WSTRB,
        WLAST => m_axi_base_ddr_addr_WLAST,
        WID => m_axi_base_ddr_addr_WID,
        WUSER => m_axi_base_ddr_addr_WUSER,
        ARVALID => m_axi_base_ddr_addr_ARVALID,
        ARREADY => m_axi_base_ddr_addr_ARREADY,
        ARADDR => m_axi_base_ddr_addr_ARADDR,
        ARID => m_axi_base_ddr_addr_ARID,
        ARLEN => m_axi_base_ddr_addr_ARLEN,
        ARSIZE => m_axi_base_ddr_addr_ARSIZE,
        ARBURST => m_axi_base_ddr_addr_ARBURST,
        ARLOCK => m_axi_base_ddr_addr_ARLOCK,
        ARCACHE => m_axi_base_ddr_addr_ARCACHE,
        ARPROT => m_axi_base_ddr_addr_ARPROT,
        ARQOS => m_axi_base_ddr_addr_ARQOS,
        ARREGION => m_axi_base_ddr_addr_ARREGION,
        ARUSER => m_axi_base_ddr_addr_ARUSER,
        RVALID => m_axi_base_ddr_addr_RVALID,
        RREADY => m_axi_base_ddr_addr_RREADY,
        RDATA => m_axi_base_ddr_addr_RDATA,
        RLAST => m_axi_base_ddr_addr_RLAST,
        RID => m_axi_base_ddr_addr_RID,
        RUSER => m_axi_base_ddr_addr_RUSER,
        RRESP => m_axi_base_ddr_addr_RRESP,
        BVALID => m_axi_base_ddr_addr_BVALID,
        BREADY => m_axi_base_ddr_addr_BREADY,
        BRESP => m_axi_base_ddr_addr_BRESP,
        BID => m_axi_base_ddr_addr_BID,
        BUSER => m_axi_base_ddr_addr_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => base_ddr_addr_ARVALID,
        I_ARREADY => base_ddr_addr_ARREADY,
        I_ARADDR => base_ddr_addr_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_200,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => base_ddr_addr_RVALID,
        I_RREADY => base_ddr_addr_RREADY,
        I_RDATA => base_ddr_addr_RDATA,
        I_RID => base_ddr_addr_RID,
        I_RUSER => base_ddr_addr_RUSER,
        I_RRESP => base_ddr_addr_RRESP,
        I_RLAST => base_ddr_addr_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => base_ddr_addr_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => base_ddr_addr_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => base_ddr_addr_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => base_ddr_addr_BRESP,
        I_BID => base_ddr_addr_BID,
        I_BUSER => base_ddr_addr_BUSER);

    buffer_U : component ddr_to_axis_readebkb
    generic map (
        DataWidth => 64,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_address0,
        ce0 => buffer_ce0,
        q0 => buffer_q0,
        address1 => buffer_address1,
        ce1 => buffer_ce1,
        we1 => buffer_we1,
        d1 => base_ddr_addr_addr_r_reg_564);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_base_ddr_addr_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_0;
            else
                if (((exitcond_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    if (not(((outStream_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io)))) then 
                        ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_0;
                    elsif (((outStream_V_1_ack_in = ap_const_logic_1) and (base_ddr_addr_ARREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_1_ack_out = ap_const_logic_1) and (outStream_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_1_sel_rd <= not(outStream_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_1_ack_in = ap_const_logic_1) and (outStream_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_1_sel_wr <= not(outStream_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_1_state = ap_const_lv2_2) and (outStream_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_1_state = ap_const_lv2_3) and (outStream_V_1_vld_in = ap_const_logic_0) and (outStream_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_1_state = ap_const_lv2_1) and (outStream_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_1_state = ap_const_lv2_3) and (outStream_V_1_ack_out = ap_const_logic_0) and (outStream_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_1_vld_in = ap_const_logic_0) and (outStream_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_1_ack_out = ap_const_logic_0) and (outStream_V_1_vld_in = ap_const_logic_1))) and (outStream_V_1_state = ap_const_lv2_3)) or ((outStream_V_1_state = ap_const_lv2_1) and (outStream_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_1_state = ap_const_lv2_2) and (outStream_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_reg_210 <= i_1_reg_541;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_210 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_555 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_reg_221 <= indvar_next_reg_559;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_reg_221 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_reg_233 <= ap_const_lv13_0;
            elsif (((tmp_7_fu_370_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_reg_233 <= j_1_fu_376_p2;
            end if; 
        end if;
    end process;

    offset1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                offset1_reg_200 <= offset_fu_517_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                offset1_reg_200 <= tmp_1_fu_262_p2(21 downto 3);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_555 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                base_ddr_addr_addr_r_reg_564 <= base_ddr_addr_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_555 <= exitcond1_fu_353_p2;
                exitcond1_reg_555_pp0_iter1_reg <= exitcond1_reg_555;
                indvar_reg_221_pp0_iter1_reg <= indvar_reg_221;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((outStream_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (tmp_4_fu_326_p2 = ap_const_lv1_1) and (exitcond_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                frame_count_equals_i <= tmp_6_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((outStream_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (exitcond_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                frame_count_inner <= tmp_3_fu_305_p2;
                index_old <= tmp_reg_523;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((outStream_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_541 <= i_1_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_next_reg_559 <= indvar_next_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_1_load_A = ap_const_logic_1)) then
                outStream_V_1_payload_A <= tmp_26_fu_512_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_1_load_B = ap_const_logic_1)) then
                outStream_V_1_payload_B <= tmp_26_fu_512_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_7_reg_569 <= tmp_7_fu_370_p2;
                tmp_7_reg_569_pp1_iter1_reg <= tmp_7_reg_569;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_370_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                tmp_8_reg_578 <= tmp_8_fu_382_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_cast_reg_528(2 downto 0) <= tmp_cast_fu_258_p1(2 downto 0);
                    tmp_reg_523(2 downto 0) <= tmp_fu_250_p1(2 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_523(31 downto 3) <= "00000000000000000000000000000";
    tmp_cast_reg_528(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, outStream_V_1_ack_in, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2, exitcond_fu_278_p2, ap_enable_reg_pp0_iter1, ap_block_state2_io, exitcond1_fu_353_p2, ap_enable_reg_pp0_iter0, tmp_7_fu_370_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((outStream_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (exitcond_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((outStream_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (exitcond_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond1_fu_353_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((exitcond1_fu_353_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((tmp_7_fu_370_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((tmp_7_fu_370_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond1_reg_555, base_ddr_addr_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond1_reg_555 = ap_const_lv1_0) and (base_ddr_addr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond1_reg_555, base_ddr_addr_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond1_reg_555 = ap_const_lv1_0) and (base_ddr_addr_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state14_io, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state14_io, ap_block_state15_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond1_reg_555, base_ddr_addr_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((exitcond1_reg_555 = ap_const_lv1_0) and (base_ddr_addr_RVALID = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(outStream_V_1_ack_in, tmp_7_reg_569)
    begin
                ap_block_state14_io <= ((tmp_7_reg_569 = ap_const_lv1_0) and (outStream_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(outStream_V_1_ack_in, tmp_7_reg_569_pp1_iter1_reg)
    begin
                ap_block_state15_io <= ((tmp_7_reg_569_pp1_iter1_reg = ap_const_lv1_0) and (outStream_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state15_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(exitcond_fu_278_p2, ap_sig_ioackin_base_ddr_addr_ARREADY)
    begin
                ap_block_state2_io <= ((exitcond_fu_278_p2 = ap_const_lv1_0) and (ap_sig_ioackin_base_ddr_addr_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond1_fu_353_p2)
    begin
        if ((exitcond1_fu_353_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(tmp_7_fu_370_p2)
    begin
        if ((tmp_7_fu_370_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(outStream_V_1_ack_in, ap_CS_fsm_state2, exitcond_fu_278_p2, ap_block_state2_io)
    begin
        if ((not(((outStream_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (exitcond_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_phi_fu_225_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_555, indvar_reg_221, indvar_next_reg_559)
    begin
        if (((exitcond1_reg_555 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_phi_fu_225_p4 <= indvar_next_reg_559;
        else 
            ap_phi_mux_indvar_phi_fu_225_p4 <= indvar_reg_221;
        end if; 
    end process;


    ap_ready_assign_proc : process(outStream_V_1_ack_in, ap_CS_fsm_state2, exitcond_fu_278_p2, ap_block_state2_io)
    begin
        if ((not(((outStream_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (exitcond_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_base_ddr_addr_ARREADY_assign_proc : process(base_ddr_addr_ARREADY, ap_reg_ioackin_base_ddr_addr_ARREADY)
    begin
        if ((ap_reg_ioackin_base_ddr_addr_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_base_ddr_addr_ARREADY <= base_ddr_addr_ARREADY;
        else 
            ap_sig_ioackin_base_ddr_addr_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    base_ddr_addr_ARADDR <= tmp_5_fu_290_p1(32 - 1 downto 0);

    base_ddr_addr_ARVALID_assign_proc : process(outStream_V_1_ack_in, ap_CS_fsm_state2, exitcond_fu_278_p2, ap_reg_ioackin_base_ddr_addr_ARREADY)
    begin
        if (((exitcond_fu_278_p2 = ap_const_lv1_0) and (outStream_V_1_ack_in = ap_const_logic_1) and (ap_reg_ioackin_base_ddr_addr_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            base_ddr_addr_ARVALID <= ap_const_logic_1;
        else 
            base_ddr_addr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    base_ddr_addr_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_555, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_reg_555 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            base_ddr_addr_RREADY <= ap_const_logic_1;
        else 
            base_ddr_addr_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    base_ddr_addr_blk_n_AR_assign_proc : process(m_axi_base_ddr_addr_ARREADY, ap_CS_fsm_state2, exitcond_fu_278_p2)
    begin
        if (((exitcond_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            base_ddr_addr_blk_n_AR <= m_axi_base_ddr_addr_ARREADY;
        else 
            base_ddr_addr_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    base_ddr_addr_blk_n_R_assign_proc : process(m_axi_base_ddr_addr_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_555)
    begin
        if (((exitcond1_reg_555 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            base_ddr_addr_blk_n_R <= m_axi_base_ddr_addr_RVALID;
        else 
            base_ddr_addr_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    buffer_address0 <= gepindex2_cast_fu_396_p1(9 - 1 downto 0);
    buffer_address1 <= indvar1_fu_365_p1(9 - 1 downto 0);

    buffer_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            buffer_ce0 <= ap_const_logic_1;
        else 
            buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buffer_ce1 <= ap_const_logic_1;
        else 
            buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_we1_assign_proc : process(ap_block_pp0_stage0_11001, exitcond1_reg_555_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((exitcond1_reg_555_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buffer_we1 <= ap_const_logic_1;
        else 
            buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    end_pos_fu_408_p2 <= (start_pos_fu_401_p3 or ap_const_lv6_7);
    exitcond1_fu_353_p2 <= "1" when (ap_phi_mux_indvar_phi_fu_225_p4 = ap_const_lv10_200) else "0";
    exitcond_fu_278_p2 <= "1" when (i_reg_210 = ap_const_lv7_4B) else "0";
    frame_count <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(frame_count_inner));
    frame_count_equals <= std_logic_vector(unsigned(frame_count_equals_i) + unsigned(ap_const_lv32_1));
    gepindex2_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex_cast_fu_386_p4),64));
    gepindex_cast_fu_386_p4 <= j_reg_233(11 downto 3);
    i_1_fu_284_p2 <= std_logic_vector(unsigned(i_reg_210) + unsigned(ap_const_lv7_1));
    indvar1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvar_reg_221_pp0_iter1_reg),64));
    indvar_next_fu_359_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_phi_fu_225_p4) + unsigned(ap_const_lv10_1));
    inner_index_V_2_fu_244_p2 <= std_logic_vector(unsigned(frame_index_V) + unsigned(ap_const_lv3_7));
    j_1_fu_376_p2 <= std_logic_vector(unsigned(j_reg_233) + unsigned(ap_const_lv13_1));
    offset_fu_517_p2 <= std_logic_vector(unsigned(offset1_reg_200) + unsigned(ap_const_lv19_200));
    outStream_V_1_ack_in <= outStream_V_1_state(1);
    outStream_V_1_ack_out <= outStream_V_TREADY;

    outStream_V_1_data_out_assign_proc : process(outStream_V_1_payload_A, outStream_V_1_payload_B, outStream_V_1_sel)
    begin
        if ((outStream_V_1_sel = ap_const_logic_1)) then 
            outStream_V_1_data_out <= outStream_V_1_payload_B;
        else 
            outStream_V_1_data_out <= outStream_V_1_payload_A;
        end if; 
    end process;

    outStream_V_1_load_A <= (outStream_V_1_state_cmp_full and not(outStream_V_1_sel_wr));
    outStream_V_1_load_B <= (outStream_V_1_state_cmp_full and outStream_V_1_sel_wr);
    outStream_V_1_sel <= outStream_V_1_sel_rd;
    outStream_V_1_state_cmp_full <= '0' when (outStream_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_7_reg_569, ap_block_pp1_stage0_11001)
    begin
        if (((tmp_7_reg_569 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            outStream_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_1_vld_out <= outStream_V_1_state(0);
    outStream_V_TDATA <= outStream_V_1_data_out;

    outStream_V_TDATA_blk_n_assign_proc : process(outStream_V_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_7_reg_569, ap_enable_reg_pp1_iter2, tmp_7_reg_569_pp1_iter1_reg)
    begin
        if ((((tmp_7_reg_569_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((tmp_7_reg_569 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            outStream_V_TDATA_blk_n <= outStream_V_1_state(1);
        else 
            outStream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_V_TVALID <= outStream_V_1_state(0);
    start_pos_fu_401_p3 <= (tmp_8_reg_578 & ap_const_lv3_0);
    tmp_10_fu_414_p2 <= "1" when (unsigned(start_pos_fu_401_p3) > unsigned(end_pos_fu_408_p2)) else "0";
    tmp_11_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_pos_fu_401_p3),7));
    tmp_12_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_pos_fu_408_p2),7));
    
    tmp_13_fu_428_p4_proc : process(buffer_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_13_fu_428_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := buffer_q0;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_13_fu_428_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_13_fu_428_p4_i) := buffer_q0(64-1-tmp_13_fu_428_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_428_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_14_fu_438_p2 <= std_logic_vector(unsigned(tmp_11_fu_420_p1) - unsigned(tmp_12_fu_424_p1));
    tmp_15_fu_444_p2 <= (tmp_11_fu_420_p1 xor ap_const_lv7_3F);
    tmp_16_fu_450_p2 <= std_logic_vector(unsigned(tmp_12_fu_424_p1) - unsigned(tmp_11_fu_420_p1));
    tmp_17_fu_456_p3 <= 
        tmp_14_fu_438_p2 when (tmp_10_fu_414_p2(0) = '1') else 
        tmp_16_fu_450_p2;
    tmp_18_fu_464_p3 <= 
        tmp_13_fu_428_p4 when (tmp_10_fu_414_p2(0) = '1') else 
        buffer_q0;
    tmp_19_fu_472_p3 <= 
        tmp_15_fu_444_p2 when (tmp_10_fu_414_p2(0) = '1') else 
        tmp_11_fu_420_p1;
    tmp_1_fu_262_p0 <= tmp_1_fu_262_p00(3 - 1 downto 0);
    tmp_1_fu_262_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inner_index_V_2_fu_244_p2),22));
    tmp_1_fu_262_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_262_p0) * unsigned(ap_const_lv22_4B000), 22));
    tmp_20_fu_480_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_17_fu_456_p3));
    tmp_21_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_472_p3),64));
    tmp_22_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_480_p2),64));
    tmp_23_fu_494_p2 <= std_logic_vector(shift_right(unsigned(tmp_18_fu_464_p3),to_integer(unsigned('0' & tmp_21_fu_486_p1(31-1 downto 0)))));
    tmp_24_fu_500_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_22_fu_490_p1(31-1 downto 0)))));
    tmp_25_fu_506_p2 <= (tmp_24_fu_500_p2 and tmp_23_fu_494_p2);
    tmp_26_fu_512_p1 <= tmp_25_fu_506_p2(8 - 1 downto 0);
    tmp_2_fu_322_p1 <= index_old(4 - 1 downto 0);
    tmp_3_fu_305_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(frame_count_inner));
    tmp_4_fu_326_p2 <= "1" when (tmp_cast_reg_528 = tmp_2_fu_322_p1) else "0";
    tmp_5_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset1_reg_200),64));
    tmp_6_fu_335_p2 <= std_logic_vector(unsigned(frame_count_equals_i) + unsigned(ap_const_lv32_1));
    tmp_7_fu_370_p2 <= "1" when (j_reg_233 = ap_const_lv13_1000) else "0";
    tmp_8_fu_382_p1 <= j_reg_233(3 - 1 downto 0);
    tmp_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inner_index_V_2_fu_244_p2),4));
    tmp_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inner_index_V_2_fu_244_p2),32));
end behav;
