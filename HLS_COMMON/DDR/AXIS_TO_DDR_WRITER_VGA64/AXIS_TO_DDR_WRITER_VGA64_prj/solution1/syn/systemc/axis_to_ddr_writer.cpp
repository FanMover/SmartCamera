// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axis_to_ddr_writer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axis_to_ddr_writer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axis_to_ddr_writer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_state1 = "1";
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_state2 = "10";
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_state5 = "1000";
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_pp1_stage0 = "10000";
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_state9 = "100000";
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_state10 = "1000000";
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_state11 = "10000000";
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_state12 = "100000000";
const sc_lv<10> axis_to_ddr_writer::ap_ST_fsm_state13 = "1000000000";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool axis_to_ddr_writer::ap_const_boolean_1 = true;
const sc_lv<1> axis_to_ddr_writer::ap_const_lv1_0 = "0";
const sc_lv<1> axis_to_ddr_writer::ap_const_lv1_1 = "1";
const sc_lv<2> axis_to_ddr_writer::ap_const_lv2_0 = "00";
const sc_lv<2> axis_to_ddr_writer::ap_const_lv2_2 = "10";
const sc_lv<2> axis_to_ddr_writer::ap_const_lv2_3 = "11";
const sc_lv<2> axis_to_ddr_writer::ap_const_lv2_1 = "1";
const sc_lv<3> axis_to_ddr_writer::ap_const_lv3_0 = "000";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_2 = "10";
const bool axis_to_ddr_writer::ap_const_boolean_0 = false;
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_3 = "11";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_9 = "1001";
const int axis_to_ddr_writer::C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int axis_to_ddr_writer::C_M_AXI_BASE_DDR_ADDR_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axis_to_ddr_writer::C_M_AXI_BASE_DDR_ADDR_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int axis_to_ddr_writer::C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE = "11";
const int axis_to_ddr_writer::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_1 = "1";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_4 = "100";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_5 = "101";
const sc_lv<7> axis_to_ddr_writer::ap_const_lv7_0 = "0000000";
const sc_lv<13> axis_to_ddr_writer::ap_const_lv13_0 = "0000000000000";
const sc_lv<10> axis_to_ddr_writer::ap_const_lv10_0 = "0000000000";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_200 = "1000000000";
const sc_lv<4> axis_to_ddr_writer::ap_const_lv4_0 = "0000";
const sc_lv<8> axis_to_ddr_writer::ap_const_lv8_FF = "11111111";
const sc_lv<22> axis_to_ddr_writer::ap_const_lv22_4B000 = "1001011000000000000";
const sc_lv<32> axis_to_ddr_writer::ap_const_lv32_15 = "10101";
const sc_lv<7> axis_to_ddr_writer::ap_const_lv7_4B = "1001011";
const sc_lv<7> axis_to_ddr_writer::ap_const_lv7_1 = "1";
const sc_lv<3> axis_to_ddr_writer::ap_const_lv3_1 = "1";
const sc_lv<13> axis_to_ddr_writer::ap_const_lv13_1000 = "1000000000000";
const sc_lv<13> axis_to_ddr_writer::ap_const_lv13_1 = "1";
const sc_lv<10> axis_to_ddr_writer::ap_const_lv10_200 = "1000000000";
const sc_lv<10> axis_to_ddr_writer::ap_const_lv10_1 = "1";
const sc_lv<19> axis_to_ddr_writer::ap_const_lv19_200 = "1000000000";

axis_to_ddr_writer::axis_to_ddr_writer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    axis_to_ddr_writer_base_ddr_addr_m_axi_U = new axis_to_ddr_writer_base_ddr_addr_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_BASE_DDR_ADDR_ID_WIDTH,C_M_AXI_BASE_DDR_ADDR_ADDR_WIDTH,C_M_AXI_BASE_DDR_ADDR_DATA_WIDTH,C_M_AXI_BASE_DDR_ADDR_AWUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_ARUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_WUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_RUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_BUSER_WIDTH,C_M_AXI_BASE_DDR_ADDR_TARGET_ADDR,C_M_AXI_BASE_DDR_ADDR_USER_VALUE,C_M_AXI_BASE_DDR_ADDR_PROT_VALUE,C_M_AXI_BASE_DDR_ADDR_CACHE_VALUE>("axis_to_ddr_writer_base_ddr_addr_m_axi_U");
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWVALID(m_axi_base_ddr_addr_AWVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWREADY(m_axi_base_ddr_addr_AWREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWADDR(m_axi_base_ddr_addr_AWADDR);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWID(m_axi_base_ddr_addr_AWID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWLEN(m_axi_base_ddr_addr_AWLEN);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWSIZE(m_axi_base_ddr_addr_AWSIZE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWBURST(m_axi_base_ddr_addr_AWBURST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWLOCK(m_axi_base_ddr_addr_AWLOCK);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWCACHE(m_axi_base_ddr_addr_AWCACHE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWPROT(m_axi_base_ddr_addr_AWPROT);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWQOS(m_axi_base_ddr_addr_AWQOS);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWREGION(m_axi_base_ddr_addr_AWREGION);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->AWUSER(m_axi_base_ddr_addr_AWUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WVALID(m_axi_base_ddr_addr_WVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WREADY(m_axi_base_ddr_addr_WREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WDATA(m_axi_base_ddr_addr_WDATA);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WSTRB(m_axi_base_ddr_addr_WSTRB);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WLAST(m_axi_base_ddr_addr_WLAST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WID(m_axi_base_ddr_addr_WID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->WUSER(m_axi_base_ddr_addr_WUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARVALID(m_axi_base_ddr_addr_ARVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARREADY(m_axi_base_ddr_addr_ARREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARADDR(m_axi_base_ddr_addr_ARADDR);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARID(m_axi_base_ddr_addr_ARID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARLEN(m_axi_base_ddr_addr_ARLEN);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARSIZE(m_axi_base_ddr_addr_ARSIZE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARBURST(m_axi_base_ddr_addr_ARBURST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARLOCK(m_axi_base_ddr_addr_ARLOCK);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARCACHE(m_axi_base_ddr_addr_ARCACHE);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARPROT(m_axi_base_ddr_addr_ARPROT);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARQOS(m_axi_base_ddr_addr_ARQOS);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARREGION(m_axi_base_ddr_addr_ARREGION);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARUSER(m_axi_base_ddr_addr_ARUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RVALID(m_axi_base_ddr_addr_RVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RREADY(m_axi_base_ddr_addr_RREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RDATA(m_axi_base_ddr_addr_RDATA);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RLAST(m_axi_base_ddr_addr_RLAST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RID(m_axi_base_ddr_addr_RID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RUSER(m_axi_base_ddr_addr_RUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->RRESP(m_axi_base_ddr_addr_RRESP);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BVALID(m_axi_base_ddr_addr_BVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BREADY(m_axi_base_ddr_addr_BREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BRESP(m_axi_base_ddr_addr_BRESP);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BID(m_axi_base_ddr_addr_BID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->BUSER(m_axi_base_ddr_addr_BUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ACLK(ap_clk);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ARESET(ap_rst_n_inv);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->ACLK_EN(ap_var_for_const0);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARVALID(ap_var_for_const1);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARREADY(base_ddr_addr_ARREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARADDR(ap_var_for_const2);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARID(ap_var_for_const3);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARLEN(ap_var_for_const2);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARSIZE(ap_var_for_const4);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARLOCK(ap_var_for_const5);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARCACHE(ap_var_for_const6);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARQOS(ap_var_for_const6);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARPROT(ap_var_for_const4);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARUSER(ap_var_for_const3);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARBURST(ap_var_for_const5);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_ARREGION(ap_var_for_const6);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RVALID(base_ddr_addr_RVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RREADY(ap_var_for_const1);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RDATA(base_ddr_addr_RDATA);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RID(base_ddr_addr_RID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RUSER(base_ddr_addr_RUSER);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RRESP(base_ddr_addr_RRESP);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_RLAST(base_ddr_addr_RLAST);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWVALID(base_ddr_addr_AWVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWREADY(base_ddr_addr_AWREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWADDR(base_ddr_addr_AWADDR);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWID(ap_var_for_const3);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWLEN(ap_var_for_const7);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWSIZE(ap_var_for_const4);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWLOCK(ap_var_for_const5);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWCACHE(ap_var_for_const6);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWQOS(ap_var_for_const6);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWPROT(ap_var_for_const4);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWUSER(ap_var_for_const3);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWBURST(ap_var_for_const5);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_AWREGION(ap_var_for_const6);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WVALID(base_ddr_addr_WVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WREADY(base_ddr_addr_WREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WDATA(buffer_load_reg_371);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WID(ap_var_for_const3);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WUSER(ap_var_for_const3);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WLAST(ap_var_for_const1);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_WSTRB(ap_var_for_const8);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BVALID(base_ddr_addr_BVALID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BREADY(base_ddr_addr_BREADY);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BRESP(base_ddr_addr_BRESP);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BID(base_ddr_addr_BID);
    axis_to_ddr_writer_base_ddr_addr_m_axi_U->I_BUSER(base_ddr_addr_BUSER);
    buffer_U = new axis_to_ddr_writebkb("buffer_U");
    buffer_U->clk(ap_clk);
    buffer_U->reset(ap_rst_n_inv);
    buffer_U->address0(buffer_address0);
    buffer_U->ce0(buffer_ce0);
    buffer_U->q0(buffer_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( inputStream_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_342 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( inputStream_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_342 );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state8_io );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_state8_io );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( inputStream_V_0_vld_out );
    sensitive << ( exitcond_flatten_reg_342 );

    SC_METHOD(thread_ap_block_state6_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state7_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state8_io);
    sensitive << ( exitcond1_reg_357_pp1_iter1_reg );
    sensitive << ( ap_sig_ioackin_base_ddr_addr_WREADY );

    SC_METHOD(thread_ap_block_state8_pp1_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_flatten_fu_277_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state6);
    sensitive << ( exitcond1_fu_300_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( exitcond_fu_237_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( exitcond_fu_237_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_base_ddr_addr_AWREADY);
    sensitive << ( base_ddr_addr_AWREADY );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_base_ddr_addr_WREADY);
    sensitive << ( base_ddr_addr_WREADY );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_WREADY );

    SC_METHOD(thread_base_ddr_addr_AWADDR);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_7_fu_289_p1 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_base_ddr_addr_AWVALID);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_AWREADY );

    SC_METHOD(thread_base_ddr_addr_BREADY);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( base_ddr_addr_BVALID );

    SC_METHOD(thread_base_ddr_addr_WVALID);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( exitcond1_reg_357_pp1_iter1_reg );
    sensitive << ( ap_reg_ioackin_base_ddr_addr_WREADY );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_base_ddr_addr_blk_n_AW);
    sensitive << ( m_axi_base_ddr_addr_AWREADY );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_base_ddr_addr_blk_n_B);
    sensitive << ( m_axi_base_ddr_addr_BVALID );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_base_ddr_addr_blk_n_W);
    sensitive << ( m_axi_base_ddr_addr_WREADY );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( exitcond1_reg_357_pp1_iter1_reg );

    SC_METHOD(thread_buffer_address0);
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( indvar1_fu_312_p1 );

    SC_METHOD(thread_buffer_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_exitcond1_fu_300_p2);
    sensitive << ( indvar_reg_201 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_exitcond_flatten_fu_277_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_190 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_fu_237_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( idx_reg_179 );

    SC_METHOD(thread_frame_count);
    sensitive << ( frame_count_inner );
    sensitive << ( exitcond_fu_237_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_frame_index_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( inner_index_V );
    sensitive << ( frame_index_V_preg );

    SC_METHOD(thread_idx_1_fu_243_p2);
    sensitive << ( idx_reg_179 );

    SC_METHOD(thread_indvar1_fu_312_p1);
    sensitive << ( indvar_reg_201 );

    SC_METHOD(thread_indvar_flatten_next_fu_283_p2);
    sensitive << ( indvar_flatten_reg_190 );

    SC_METHOD(thread_indvar_next_fu_306_p2);
    sensitive << ( indvar_reg_201 );

    SC_METHOD(thread_inputStream_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_342 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_inputStream_V_0_vld_in);
    sensitive << ( inputStream_V_TVALID );

    SC_METHOD(thread_inputStream_V_0_vld_out);
    sensitive << ( inputStream_V_0_state );

    SC_METHOD(thread_inputStream_V_TDATA_blk_n);
    sensitive << ( inputStream_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_342 );

    SC_METHOD(thread_inputStream_V_TREADY);
    sensitive << ( inputStream_V_0_state );

    SC_METHOD(thread_offset_fu_317_p2);
    sensitive << ( offset1_reg_169 );

    SC_METHOD(thread_tmp_1_fu_221_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_1_fu_221_p00 );

    SC_METHOD(thread_tmp_1_fu_221_p00);
    sensitive << ( inner_index_V );

    SC_METHOD(thread_tmp_1_fu_221_p2);
    sensitive << ( tmp_1_fu_221_p0 );

    SC_METHOD(thread_tmp_4_fu_249_p2);
    sensitive << ( inner_index_V_load_reg_323 );

    SC_METHOD(thread_tmp_6_fu_264_p2);
    sensitive << ( frame_count_inner );

    SC_METHOD(thread_tmp_7_fu_289_p1);
    sensitive << ( offset1_reg_169 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( base_ddr_addr_BVALID );
    sensitive << ( exitcond_fu_237_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_flatten_fu_277_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_sig_ioackin_base_ddr_addr_AWREADY );
    sensitive << ( exitcond1_fu_300_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const8);

    ap_CS_fsm = "0000000001";
    inputStream_V_0_state = "00";
    inner_index_V = "000";
    frame_count_inner = "00000000000000000000000000000000";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_reg_ioackin_base_ddr_addr_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_base_ddr_addr_WREADY = SC_LOGIC_0;
    frame_index_V_preg = "000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axis_to_ddr_writer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, inputStream_V_TDATA, "(port)inputStream_V_TDATA");
    sc_trace(mVcdFile, inputStream_V_TVALID, "(port)inputStream_V_TVALID");
    sc_trace(mVcdFile, inputStream_V_TREADY, "(port)inputStream_V_TREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWVALID, "(port)m_axi_base_ddr_addr_AWVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWREADY, "(port)m_axi_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWADDR, "(port)m_axi_base_ddr_addr_AWADDR");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWID, "(port)m_axi_base_ddr_addr_AWID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWLEN, "(port)m_axi_base_ddr_addr_AWLEN");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWSIZE, "(port)m_axi_base_ddr_addr_AWSIZE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWBURST, "(port)m_axi_base_ddr_addr_AWBURST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWLOCK, "(port)m_axi_base_ddr_addr_AWLOCK");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWCACHE, "(port)m_axi_base_ddr_addr_AWCACHE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWPROT, "(port)m_axi_base_ddr_addr_AWPROT");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWQOS, "(port)m_axi_base_ddr_addr_AWQOS");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWREGION, "(port)m_axi_base_ddr_addr_AWREGION");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_AWUSER, "(port)m_axi_base_ddr_addr_AWUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WVALID, "(port)m_axi_base_ddr_addr_WVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WREADY, "(port)m_axi_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WDATA, "(port)m_axi_base_ddr_addr_WDATA");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WSTRB, "(port)m_axi_base_ddr_addr_WSTRB");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WLAST, "(port)m_axi_base_ddr_addr_WLAST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WID, "(port)m_axi_base_ddr_addr_WID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_WUSER, "(port)m_axi_base_ddr_addr_WUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARVALID, "(port)m_axi_base_ddr_addr_ARVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARREADY, "(port)m_axi_base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARADDR, "(port)m_axi_base_ddr_addr_ARADDR");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARID, "(port)m_axi_base_ddr_addr_ARID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARLEN, "(port)m_axi_base_ddr_addr_ARLEN");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARSIZE, "(port)m_axi_base_ddr_addr_ARSIZE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARBURST, "(port)m_axi_base_ddr_addr_ARBURST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARLOCK, "(port)m_axi_base_ddr_addr_ARLOCK");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARCACHE, "(port)m_axi_base_ddr_addr_ARCACHE");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARPROT, "(port)m_axi_base_ddr_addr_ARPROT");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARQOS, "(port)m_axi_base_ddr_addr_ARQOS");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARREGION, "(port)m_axi_base_ddr_addr_ARREGION");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_ARUSER, "(port)m_axi_base_ddr_addr_ARUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RVALID, "(port)m_axi_base_ddr_addr_RVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RREADY, "(port)m_axi_base_ddr_addr_RREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RDATA, "(port)m_axi_base_ddr_addr_RDATA");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RLAST, "(port)m_axi_base_ddr_addr_RLAST");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RID, "(port)m_axi_base_ddr_addr_RID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RUSER, "(port)m_axi_base_ddr_addr_RUSER");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_RRESP, "(port)m_axi_base_ddr_addr_RRESP");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BVALID, "(port)m_axi_base_ddr_addr_BVALID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BREADY, "(port)m_axi_base_ddr_addr_BREADY");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BRESP, "(port)m_axi_base_ddr_addr_BRESP");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BID, "(port)m_axi_base_ddr_addr_BID");
    sc_trace(mVcdFile, m_axi_base_ddr_addr_BUSER, "(port)m_axi_base_ddr_addr_BUSER");
    sc_trace(mVcdFile, frame_index_V, "(port)frame_index_V");
    sc_trace(mVcdFile, frame_count, "(port)frame_count");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, inputStream_V_0_vld_in, "inputStream_V_0_vld_in");
    sc_trace(mVcdFile, inputStream_V_0_vld_out, "inputStream_V_0_vld_out");
    sc_trace(mVcdFile, inputStream_V_0_ack_out, "inputStream_V_0_ack_out");
    sc_trace(mVcdFile, inputStream_V_0_state, "inputStream_V_0_state");
    sc_trace(mVcdFile, inner_index_V, "inner_index_V");
    sc_trace(mVcdFile, frame_count_inner, "frame_count_inner");
    sc_trace(mVcdFile, inputStream_V_TDATA_blk_n, "inputStream_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_reg_342, "exitcond_flatten_reg_342");
    sc_trace(mVcdFile, base_ddr_addr_blk_n_AW, "base_ddr_addr_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, base_ddr_addr_blk_n_W, "base_ddr_addr_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, exitcond1_reg_357, "exitcond1_reg_357");
    sc_trace(mVcdFile, exitcond1_reg_357_pp1_iter1_reg, "exitcond1_reg_357_pp1_iter1_reg");
    sc_trace(mVcdFile, base_ddr_addr_blk_n_B, "base_ddr_addr_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, base_ddr_addr_AWVALID, "base_ddr_addr_AWVALID");
    sc_trace(mVcdFile, base_ddr_addr_AWREADY, "base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, base_ddr_addr_AWADDR, "base_ddr_addr_AWADDR");
    sc_trace(mVcdFile, base_ddr_addr_WVALID, "base_ddr_addr_WVALID");
    sc_trace(mVcdFile, base_ddr_addr_WREADY, "base_ddr_addr_WREADY");
    sc_trace(mVcdFile, base_ddr_addr_ARREADY, "base_ddr_addr_ARREADY");
    sc_trace(mVcdFile, base_ddr_addr_RVALID, "base_ddr_addr_RVALID");
    sc_trace(mVcdFile, base_ddr_addr_RDATA, "base_ddr_addr_RDATA");
    sc_trace(mVcdFile, base_ddr_addr_RLAST, "base_ddr_addr_RLAST");
    sc_trace(mVcdFile, base_ddr_addr_RID, "base_ddr_addr_RID");
    sc_trace(mVcdFile, base_ddr_addr_RUSER, "base_ddr_addr_RUSER");
    sc_trace(mVcdFile, base_ddr_addr_RRESP, "base_ddr_addr_RRESP");
    sc_trace(mVcdFile, base_ddr_addr_BVALID, "base_ddr_addr_BVALID");
    sc_trace(mVcdFile, base_ddr_addr_BREADY, "base_ddr_addr_BREADY");
    sc_trace(mVcdFile, base_ddr_addr_BRESP, "base_ddr_addr_BRESP");
    sc_trace(mVcdFile, base_ddr_addr_BID, "base_ddr_addr_BID");
    sc_trace(mVcdFile, base_ddr_addr_BUSER, "base_ddr_addr_BUSER");
    sc_trace(mVcdFile, indvar_flatten_reg_190, "indvar_flatten_reg_190");
    sc_trace(mVcdFile, indvar_reg_201, "indvar_reg_201");
    sc_trace(mVcdFile, inner_index_V_load_reg_323, "inner_index_V_load_reg_323");
    sc_trace(mVcdFile, exitcond_fu_237_p2, "exitcond_fu_237_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, idx_1_fu_243_p2, "idx_1_fu_243_p2");
    sc_trace(mVcdFile, idx_1_reg_337, "idx_1_reg_337");
    sc_trace(mVcdFile, exitcond_flatten_fu_277_p2, "exitcond_flatten_fu_277_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_283_p2, "indvar_flatten_next_fu_283_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_sig_ioackin_base_ddr_addr_AWREADY, "ap_sig_ioackin_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, exitcond1_fu_300_p2, "exitcond1_fu_300_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state6_pp1_stage0_iter0, "ap_block_state6_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state7_pp1_stage0_iter1, "ap_block_state7_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state8_pp1_stage0_iter2, "ap_block_state8_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_sig_ioackin_base_ddr_addr_WREADY, "ap_sig_ioackin_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, ap_block_state8_io, "ap_block_state8_io");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, indvar_next_fu_306_p2, "indvar_next_fu_306_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, buffer_q0, "buffer_q0");
    sc_trace(mVcdFile, buffer_load_reg_371, "buffer_load_reg_371");
    sc_trace(mVcdFile, offset_fu_317_p2, "offset_fu_317_p2");
    sc_trace(mVcdFile, offset_reg_376, "offset_reg_376");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state6, "ap_condition_pp1_exit_iter0_state6");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, buffer_address0, "buffer_address0");
    sc_trace(mVcdFile, buffer_ce0, "buffer_ce0");
    sc_trace(mVcdFile, offset1_reg_169, "offset1_reg_169");
    sc_trace(mVcdFile, idx_reg_179, "idx_reg_179");
    sc_trace(mVcdFile, indvar1_fu_312_p1, "indvar1_fu_312_p1");
    sc_trace(mVcdFile, tmp_7_fu_289_p1, "tmp_7_fu_289_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_base_ddr_addr_AWREADY, "ap_reg_ioackin_base_ddr_addr_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_base_ddr_addr_WREADY, "ap_reg_ioackin_base_ddr_addr_WREADY");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, tmp_4_fu_249_p2, "tmp_4_fu_249_p2");
    sc_trace(mVcdFile, tmp_6_fu_264_p2, "tmp_6_fu_264_p2");
    sc_trace(mVcdFile, frame_index_V_preg, "frame_index_V_preg");
    sc_trace(mVcdFile, tmp_1_fu_221_p0, "tmp_1_fu_221_p0");
    sc_trace(mVcdFile, tmp_1_fu_221_p2, "tmp_1_fu_221_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, tmp_1_fu_221_p00, "tmp_1_fu_221_p00");
#endif

    }
    mHdltvinHandle.open("axis_to_ddr_writer.hdltvin.dat");
    mHdltvoutHandle.open("axis_to_ddr_writer.hdltvout.dat");
}

axis_to_ddr_writer::~axis_to_ddr_writer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete axis_to_ddr_writer_base_ddr_addr_m_axi_U;
    delete buffer_U;
}

void axis_to_ddr_writer::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void axis_to_ddr_writer::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void axis_to_ddr_writer::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void axis_to_ddr_writer::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void axis_to_ddr_writer::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void axis_to_ddr_writer::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void axis_to_ddr_writer::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv32_200;
}

void axis_to_ddr_writer::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void axis_to_ddr_writer::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv8_FF;
}

void axis_to_ddr_writer::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(exitcond_fu_237_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(exitcond_fu_237_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state6.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state6.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state6.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_base_ddr_addr_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_base_ddr_addr_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, base_ddr_addr_AWREADY.read())) {
                ap_reg_ioackin_base_ddr_addr_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_base_ddr_addr_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_357_pp1_iter1_reg.read()))) {
            if (esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_base_ddr_addr_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, base_ddr_addr_WREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_base_ddr_addr_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        frame_index_V_preg = ap_const_lv3_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            frame_index_V_preg = inner_index_V.read();
        }
    }
    if ((esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        idx_reg_179 = idx_1_reg_337.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        idx_reg_179 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_237_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        indvar_flatten_reg_190 = ap_const_lv13_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_277_p2.read()))) {
        indvar_flatten_reg_190 = indvar_flatten_next_fu_283_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_300_p2.read()))) {
        indvar_reg_201 = indvar_next_fu_306_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        indvar_reg_201 = ap_const_lv10_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inner_index_V = ap_const_lv3_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond_fu_237_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            inner_index_V = tmp_4_fu_249_p2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inputStream_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_2)))) {
            inputStream_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_1)))) {
            inputStream_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(inputStream_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inputStream_V_0_ack_out.read()))))) {
            inputStream_V_0_state = ap_const_lv2_3;
        } else {
            inputStream_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        offset1_reg_169 = offset_reg_376.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        offset1_reg_169 = tmp_1_fu_221_p2.read().range(21, 3);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_357.read()))) {
        buffer_load_reg_371 = buffer_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond1_reg_357 = exitcond1_fu_300_p2.read();
        exitcond1_reg_357_pp1_iter1_reg = exitcond1_reg_357.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_342 = exitcond_flatten_fu_277_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_237_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        frame_count_inner = tmp_6_fu_264_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        idx_1_reg_337 = idx_1_fu_243_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        inner_index_V_load_reg_323 = inner_index_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        offset_reg_376 = offset_fu_317_p2.read();
    }
}

void axis_to_ddr_writer::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void axis_to_ddr_writer::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[4];
}

void axis_to_ddr_writer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void axis_to_ddr_writer::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[9];
}

void axis_to_ddr_writer::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void axis_to_ddr_writer::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void axis_to_ddr_writer::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[5];
}

void axis_to_ddr_writer::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_ddr_writer::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_342.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_out.read()));
}

void axis_to_ddr_writer::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_342.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_out.read()));
}

void axis_to_ddr_writer::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_ddr_writer::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_ddr_writer::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state8_io.read()));
}

void axis_to_ddr_writer::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state8_io.read()));
}

void axis_to_ddr_writer::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_ddr_writer::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_342.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inputStream_V_0_vld_out.read()));
}

void axis_to_ddr_writer::thread_ap_block_state6_pp1_stage0_iter0() {
    ap_block_state6_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_ddr_writer::thread_ap_block_state7_pp1_stage0_iter1() {
    ap_block_state7_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_ddr_writer::thread_ap_block_state8_io() {
    ap_block_state8_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_357_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_base_ddr_addr_WREADY.read()));
}

void axis_to_ddr_writer::thread_ap_block_state8_pp1_stage0_iter2() {
    ap_block_state8_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axis_to_ddr_writer::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_277_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_condition_pp1_exit_iter0_state6() {
    if (esl_seteq<1,1,1>(exitcond1_fu_300_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state6 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state6 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_done() {
    if ((esl_seteq<1,1,1>(exitcond_fu_237_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void axis_to_ddr_writer::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void axis_to_ddr_writer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_237_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axis_to_ddr_writer::thread_ap_sig_ioackin_base_ddr_addr_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_AWREADY.read())) {
        ap_sig_ioackin_base_ddr_addr_AWREADY = base_ddr_addr_AWREADY.read();
    } else {
        ap_sig_ioackin_base_ddr_addr_AWREADY = ap_const_logic_1;
    }
}

void axis_to_ddr_writer::thread_ap_sig_ioackin_base_ddr_addr_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_WREADY.read())) {
        ap_sig_ioackin_base_ddr_addr_WREADY = base_ddr_addr_WREADY.read();
    } else {
        ap_sig_ioackin_base_ddr_addr_WREADY = ap_const_logic_1;
    }
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWADDR() {
    base_ddr_addr_AWADDR =  (sc_lv<32>) (tmp_7_fu_289_p1.read());
}

void axis_to_ddr_writer::thread_base_ddr_addr_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_AWREADY.read()))) {
        base_ddr_addr_AWVALID = ap_const_logic_1;
    } else {
        base_ddr_addr_AWVALID = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_base_ddr_addr_BREADY() {
    if ((esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        base_ddr_addr_BREADY = ap_const_logic_1;
    } else {
        base_ddr_addr_BREADY = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_base_ddr_addr_WVALID() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_357_pp1_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_base_ddr_addr_WREADY.read()))) {
        base_ddr_addr_WVALID = ap_const_logic_1;
    } else {
        base_ddr_addr_WVALID = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_base_ddr_addr_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        base_ddr_addr_blk_n_AW = m_axi_base_ddr_addr_AWREADY.read();
    } else {
        base_ddr_addr_blk_n_AW = ap_const_logic_1;
    }
}

void axis_to_ddr_writer::thread_base_ddr_addr_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        base_ddr_addr_blk_n_B = m_axi_base_ddr_addr_BVALID.read();
    } else {
        base_ddr_addr_blk_n_B = ap_const_logic_1;
    }
}

void axis_to_ddr_writer::thread_base_ddr_addr_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_reg_357_pp1_iter1_reg.read()))) {
        base_ddr_addr_blk_n_W = m_axi_base_ddr_addr_WREADY.read();
    } else {
        base_ddr_addr_blk_n_W = ap_const_logic_1;
    }
}

void axis_to_ddr_writer::thread_buffer_address0() {
    buffer_address0 =  (sc_lv<9>) (indvar1_fu_312_p1.read());
}

void axis_to_ddr_writer::thread_buffer_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1))) {
        buffer_ce0 = ap_const_logic_1;
    } else {
        buffer_ce0 = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_exitcond1_fu_300_p2() {
    exitcond1_fu_300_p2 = (!indvar_reg_201.read().is_01() || !ap_const_lv10_200.is_01())? sc_lv<1>(): sc_lv<1>(indvar_reg_201.read() == ap_const_lv10_200);
}

void axis_to_ddr_writer::thread_exitcond_flatten_fu_277_p2() {
    exitcond_flatten_fu_277_p2 = (!indvar_flatten_reg_190.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_190.read() == ap_const_lv13_1000);
}

void axis_to_ddr_writer::thread_exitcond_fu_237_p2() {
    exitcond_fu_237_p2 = (!idx_reg_179.read().is_01() || !ap_const_lv7_4B.is_01())? sc_lv<1>(): sc_lv<1>(idx_reg_179.read() == ap_const_lv7_4B);
}

void axis_to_ddr_writer::thread_frame_count() {
    frame_count = (!frame_count_inner.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(frame_count_inner.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axis_to_ddr_writer::thread_frame_index_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        frame_index_V = inner_index_V.read();
    } else {
        frame_index_V = frame_index_V_preg.read();
    }
}

void axis_to_ddr_writer::thread_idx_1_fu_243_p2() {
    idx_1_fu_243_p2 = (!idx_reg_179.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(idx_reg_179.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void axis_to_ddr_writer::thread_indvar1_fu_312_p1() {
    indvar1_fu_312_p1 = esl_zext<64,10>(indvar_reg_201.read());
}

void axis_to_ddr_writer::thread_indvar_flatten_next_fu_283_p2() {
    indvar_flatten_next_fu_283_p2 = (!indvar_flatten_reg_190.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(indvar_flatten_reg_190.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void axis_to_ddr_writer::thread_indvar_next_fu_306_p2() {
    indvar_next_fu_306_p2 = (!indvar_reg_201.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(indvar_reg_201.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void axis_to_ddr_writer::thread_inputStream_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_342.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inputStream_V_0_ack_out = ap_const_logic_1;
    } else {
        inputStream_V_0_ack_out = ap_const_logic_0;
    }
}

void axis_to_ddr_writer::thread_inputStream_V_0_vld_in() {
    inputStream_V_0_vld_in = inputStream_V_TVALID.read();
}

void axis_to_ddr_writer::thread_inputStream_V_0_vld_out() {
    inputStream_V_0_vld_out = inputStream_V_0_state.read()[0];
}

void axis_to_ddr_writer::thread_inputStream_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_342.read()))) {
        inputStream_V_TDATA_blk_n = inputStream_V_0_state.read()[0];
    } else {
        inputStream_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void axis_to_ddr_writer::thread_inputStream_V_TREADY() {
    inputStream_V_TREADY = inputStream_V_0_state.read()[1];
}

void axis_to_ddr_writer::thread_offset_fu_317_p2() {
    offset_fu_317_p2 = (!offset1_reg_169.read().is_01() || !ap_const_lv19_200.is_01())? sc_lv<19>(): (sc_biguint<19>(offset1_reg_169.read()) + sc_biguint<19>(ap_const_lv19_200));
}

void axis_to_ddr_writer::thread_tmp_1_fu_221_p0() {
    tmp_1_fu_221_p0 =  (sc_lv<3>) (tmp_1_fu_221_p00.read());
}

void axis_to_ddr_writer::thread_tmp_1_fu_221_p00() {
    tmp_1_fu_221_p00 = esl_zext<22,3>(inner_index_V.read());
}

void axis_to_ddr_writer::thread_tmp_1_fu_221_p2() {
    tmp_1_fu_221_p2 = (!tmp_1_fu_221_p0.read().is_01() || !ap_const_lv22_4B000.is_01())? sc_lv<22>(): sc_biguint<3>(tmp_1_fu_221_p0.read()) * sc_biguint<22>(ap_const_lv22_4B000);
}

void axis_to_ddr_writer::thread_tmp_4_fu_249_p2() {
    tmp_4_fu_249_p2 = (!inner_index_V_load_reg_323.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(inner_index_V_load_reg_323.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void axis_to_ddr_writer::thread_tmp_6_fu_264_p2() {
    tmp_6_fu_264_p2 = (!frame_count_inner.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(frame_count_inner.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void axis_to_ddr_writer::thread_tmp_7_fu_289_p1() {
    tmp_7_fu_289_p1 = esl_zext<64,19>(offset1_reg_169.read());
}

void axis_to_ddr_writer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_237_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(exitcond_flatten_fu_277_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(exitcond_flatten_fu_277_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_base_ddr_addr_AWREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((!(esl_seteq<1,1,1>(exitcond1_fu_300_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)) && !(esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1)) || (esl_seteq<1,1,1>(exitcond1_fu_300_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(base_ddr_addr_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

void axis_to_ddr_writer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_V_TDATA\" :  \"" << inputStream_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inputStream_V_TVALID\" :  \"" << inputStream_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inputStream_V_TREADY\" :  \"" << inputStream_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWVALID\" :  \"" << m_axi_base_ddr_addr_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_AWREADY\" :  \"" << m_axi_base_ddr_addr_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWADDR\" :  \"" << m_axi_base_ddr_addr_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWID\" :  \"" << m_axi_base_ddr_addr_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWLEN\" :  \"" << m_axi_base_ddr_addr_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWSIZE\" :  \"" << m_axi_base_ddr_addr_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWBURST\" :  \"" << m_axi_base_ddr_addr_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWLOCK\" :  \"" << m_axi_base_ddr_addr_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWCACHE\" :  \"" << m_axi_base_ddr_addr_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWPROT\" :  \"" << m_axi_base_ddr_addr_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWQOS\" :  \"" << m_axi_base_ddr_addr_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWREGION\" :  \"" << m_axi_base_ddr_addr_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_AWUSER\" :  \"" << m_axi_base_ddr_addr_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WVALID\" :  \"" << m_axi_base_ddr_addr_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_WREADY\" :  \"" << m_axi_base_ddr_addr_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WDATA\" :  \"" << m_axi_base_ddr_addr_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WSTRB\" :  \"" << m_axi_base_ddr_addr_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WLAST\" :  \"" << m_axi_base_ddr_addr_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WID\" :  \"" << m_axi_base_ddr_addr_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_WUSER\" :  \"" << m_axi_base_ddr_addr_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARVALID\" :  \"" << m_axi_base_ddr_addr_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_ARREADY\" :  \"" << m_axi_base_ddr_addr_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARADDR\" :  \"" << m_axi_base_ddr_addr_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARID\" :  \"" << m_axi_base_ddr_addr_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARLEN\" :  \"" << m_axi_base_ddr_addr_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARSIZE\" :  \"" << m_axi_base_ddr_addr_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARBURST\" :  \"" << m_axi_base_ddr_addr_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARLOCK\" :  \"" << m_axi_base_ddr_addr_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARCACHE\" :  \"" << m_axi_base_ddr_addr_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARPROT\" :  \"" << m_axi_base_ddr_addr_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARQOS\" :  \"" << m_axi_base_ddr_addr_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARREGION\" :  \"" << m_axi_base_ddr_addr_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_ARUSER\" :  \"" << m_axi_base_ddr_addr_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RVALID\" :  \"" << m_axi_base_ddr_addr_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_RREADY\" :  \"" << m_axi_base_ddr_addr_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RDATA\" :  \"" << m_axi_base_ddr_addr_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RLAST\" :  \"" << m_axi_base_ddr_addr_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RID\" :  \"" << m_axi_base_ddr_addr_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RUSER\" :  \"" << m_axi_base_ddr_addr_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_RRESP\" :  \"" << m_axi_base_ddr_addr_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BVALID\" :  \"" << m_axi_base_ddr_addr_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_base_ddr_addr_BREADY\" :  \"" << m_axi_base_ddr_addr_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BRESP\" :  \"" << m_axi_base_ddr_addr_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BID\" :  \"" << m_axi_base_ddr_addr_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_base_ddr_addr_BUSER\" :  \"" << m_axi_base_ddr_addr_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frame_index_V\" :  \"" << frame_index_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frame_count\" :  \"" << frame_count.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

